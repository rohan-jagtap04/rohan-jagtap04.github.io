{
  "version": 3,
  "sources": ["../../.pnpm/@milkdown+react@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdow_ptasmrvnpydugqqqpwa7qpsmbe/node_modules/@milkdown/react/src/useGetEditor.ts", "../../.pnpm/@milkdown+react@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdow_ptasmrvnpydugqqqpwa7qpsmbe/node_modules/@milkdown/react/src/Editor.tsx", "../../.pnpm/@milkdown+react@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdow_ptasmrvnpydugqqqpwa7qpsmbe/node_modules/@milkdown/react/src/useEditor.ts", "../../.pnpm/@milkdown+react@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdow_ptasmrvnpydugqqqpwa7qpsmbe/node_modules/@milkdown/react/src/useInstance.ts"],
  "sourcesContent": ["/* Copyright 2021, Milkdown by Mirone. */\nimport { createContext, useContext, useEffect, useRef } from 'react'\n\nimport type { EditorInfoCtx } from './types'\n\nexport const editorInfoContext = createContext<EditorInfoCtx>({} as EditorInfoCtx)\n\nexport const useGetEditor = () => {\n  const { dom, editor: editorRef, setLoading, editorFactory: getEditor } = useContext(editorInfoContext)\n  const domRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const div = domRef.current\n\n    if (!getEditor)\n      return\n\n    if (!div)\n      return\n\n    dom.current = div\n\n    const editor = getEditor(div)\n    if (!editor)\n      return\n\n    setLoading(true)\n    editor\n      .create()\n      .then((editor) => {\n        editorRef.current = editor\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n      .catch(console.error)\n\n    return () => {\n      editorRef.current?.destroy()\n    }\n  }, [dom, editorRef, getEditor, setLoading])\n\n  return domRef\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Editor } from '@milkdown/core'\nimport type { FC, ReactNode } from 'react'\nimport React, { useMemo, useRef, useState } from 'react'\n\nimport type { EditorInfoCtx, GetEditor } from './types'\nimport { editorInfoContext, useGetEditor } from './useGetEditor'\n\nexport const Milkdown: FC = () => {\n  const domRef = useGetEditor()\n\n  return <div data-milkdown-root ref={domRef} />\n}\n\nexport const MilkdownProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const dom = useRef<HTMLDivElement | undefined>(undefined)\n  const [editorFactory, setEditorFactory] = useState<GetEditor | undefined>(undefined)\n  const editor = useRef<Editor>()\n  const [loading, setLoading] = useState(true)\n\n  const editorInfoCtx = useMemo<EditorInfoCtx>(() => ({\n    loading,\n    dom,\n    editor,\n    setLoading,\n    editorFactory,\n    setEditorFactory,\n  }), [loading, editorFactory])\n\n  return (\n    <editorInfoContext.Provider value={editorInfoCtx}>\n      {children}\n    </editorInfoContext.Provider>\n  )\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { DependencyList } from 'react'\nimport { useCallback, useContext, useLayoutEffect } from 'react'\n\nimport type { GetEditor, UseEditorReturn } from './types'\nimport { editorInfoContext } from './useGetEditor'\n\nexport const useEditor = (getEditor: GetEditor, deps: DependencyList = []): UseEditorReturn => {\n  const editorInfo = useContext(editorInfoContext)\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const factory = useCallback(getEditor, deps)\n\n  useLayoutEffect(() => {\n    editorInfo.setEditorFactory(() => factory)\n  }, [editorInfo, factory])\n\n  return {\n    loading: editorInfo.loading,\n    get: () => editorInfo.editor.current,\n  }\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Editor } from '@milkdown/core'\nimport { useCallback, useContext } from 'react'\nimport { editorInfoContext } from './useGetEditor'\n\nexport type Instance = [true, () => undefined] | [false, () => Editor]\n\nexport const useInstance = () => {\n  const editorInfo = useContext(editorInfoContext)\n\n  const getInstance = useCallback(() => {\n    return editorInfo.editor.current\n  }, [editorInfo.editor])\n\n  return [editorInfo.loading, getInstance] as Instance\n}\n"],
  "mappings": ";;;;;;;;;AAKa,IAAAA,QAAoBC,aAAAA,eAA6B,CAAA,CAAmB;AAApE,IAEAC,IAAe,MAAM;AAC1B,QAAA,EAAE,KAAAC,GAAK,QAAQC,GAAW,YAAAC,GAAY,eAAeC,EAAc,QAAAC,aAAAA,YAAWP,CAAiB,GAC/FQ,QAASC,aAAAA,QAAuB,IAAI;AAE1C,aAAAC,aAAAA,WAAU,MAAM;AACd,UAAMC,IAAMH,EAAO;AAKnB,QAHI,CAACF,KAGD,CAACK;AACH;AAEFR,MAAI,UAAUQ;AAER,UAAAC,IAASN,EAAUK,CAAG;AAC5B,QAAKC;AAGL,aAAAP,EAAW,IAAI,GACfO,EACG,OAAO,EACP,KAAK,CAACA,MAAW;AAChBR,UAAU,UAAUQ;MAAA,CACrB,EACA,QAAQ,MAAM;AACbP,UAAW,KAAK;MACjB,CAAA,EACA,MAAM,QAAQ,KAAK,GAEf,MAAM;;AACX,SAAAQ,IAAAT,EAAU,YAAV,QAAAS,EAAmB,QAAA;MAAQ;EAAA,GAE5B,CAACV,GAAKC,GAAWE,GAAWD,CAAU,CAAC,GAEnCG;AACT;AAtCa,ICGAM,IAAe,MAAM;AAChC,QAAMN,IAASN,EAAAA;AAEf,SAAQa,aAAAA,QAAA,cAAA,OAAA,EAAI,sBAAkB,MAAC,KAAKP,EAAQ,CAAA;AAC9C;ADPa,ICSAQ,IAAgD,CAAC,EAAE,UAAAC,EAAAA,MAAe;AACvE,QAAAd,QAAMM,aAAAA,QAAmC,MAAS,GAClD,CAACS,GAAeC,CAAgB,QAAIC,aAAAA,UAAgC,MAAS,GAC7ER,QAASH,aAAAA,QAAAA,GACT,CAACY,GAAShB,CAAU,QAAIe,aAAAA,UAAS,IAAI,GAErCE,QAAgBC,aAAAA,SAAuB,OAAO;IAClD,SAAAF;IACA,KAAAlB;IACA,QAAAS;IACA,YAAAP;IACA,eAAAa;IACA,kBAAAC;EACE,IAAA,CAACE,GAASH,CAAa,CAAC;AAE5B,SAAA,aAAAM,QAAA,cACGxB,EAAkB,UAAlB,EAA2B,OAAOsB,EAAAA,GAChCL,CACH;AAEJ;AD7Ba,IEEAQ,IAAY,CAACnB,GAAsBoB,IAAuB,CAAA,MAAwB;AACvF,QAAAC,QAAapB,aAAAA,YAAWP,CAAiB,GAGzC4B,QAAUC,aAAAA,aAAYvB,GAAWoB,CAAI;AAE3C,aAAAI,aAAAA,iBAAgB,MAAM;AACTH,MAAA,iBAAiB,MAAMC,CAAO;EAAA,GACxC,CAACD,GAAYC,CAAO,CAAC,GAEjB;IACL,SAASD,EAAW;IACpB,KAAK,MAAMA,EAAW,OAAO;EAAA;AAEjC;AFhBa,IGEAI,IAAc,MAAM;AACzB,QAAAJ,QAAapB,aAAAA,YAAWP,CAAiB,GAEzCgC,QAAcH,aAAAA,aAAY,MACvBF,EAAW,OAAO,SACxB,CAACA,EAAW,MAAM,CAAC;AAEf,SAAA,CAACA,EAAW,SAASK,CAAW;AACzC;",
  "names": ["editorInfoContext", "createContext", "useGetEditor", "dom", "editorRef", "setLoading", "getEditor", "useContext", "domRef", "useRef", "useEffect", "div", "editor", "_a", "Milkdown", "React", "MilkdownProvider", "children", "editorFactory", "setEditorFactory", "useState", "loading", "editorInfoCtx", "useMemo", "l", "useEditor", "deps", "editorInfo", "factory", "useCallback", "useLayoutEffect", "useInstance", "getInstance"]
}
