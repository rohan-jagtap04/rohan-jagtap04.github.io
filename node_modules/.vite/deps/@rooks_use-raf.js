import {
  require_react
} from "./chunk-2JR5MSOI.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/.pnpm/performance-now@2.1.0/node_modules/performance-now/lib/performance-now.js
var require_performance_now = __commonJS({
  "node_modules/.pnpm/performance-now@2.1.0/node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/.pnpm/raf@3.4.1/node_modules/raf/index.js
var require_raf = __commonJS({
  "node_modules/.pnpm/raf@3.4.1/node_modules/raf/index.js"(exports, module) {
    var now = require_performance_now();
    var root = typeof window === "undefined" ? global : window;
    var vendors = ["moz", "webkit"];
    var suffix = "AnimationFrame";
    var raf2 = root["request" + suffix];
    var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
    for (i = 0; !raf2 && i < vendors.length; i++) {
      raf2 = root[vendors[i] + "Request" + suffix];
      caf = root[vendors[i] + "Cancel" + suffix] || root[vendors[i] + "CancelRequest" + suffix];
    }
    var i;
    if (!raf2 || !caf) {
      last = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
      raf2 = function(callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function() {
            var cp = queue.slice(0);
            queue.length = 0;
            for (var i2 = 0; i2 < cp.length; i2++) {
              if (!cp[i2].cancelled) {
                try {
                  cp[i2].callback(last);
                } catch (e) {
                  setTimeout(function() {
                    throw e;
                  }, 0);
                }
              }
            }
          }, Math.round(next));
        }
        queue.push({
          handle: ++id,
          callback,
          cancelled: false
        });
        return id;
      };
      caf = function(handle) {
        for (var i2 = 0; i2 < queue.length; i2++) {
          if (queue[i2].handle === handle) {
            queue[i2].cancelled = true;
          }
        }
      };
    }
    var last;
    var id;
    var queue;
    var frameDuration;
    module.exports = function(fn) {
      return raf2.call(root, fn);
    };
    module.exports.cancel = function() {
      caf.apply(root, arguments);
    };
    module.exports.polyfill = function(object) {
      if (!object) {
        object = root;
      }
      object.requestAnimationFrame = raf2;
      object.cancelAnimationFrame = caf;
    };
  }
});

// node_modules/.pnpm/@rooks+use-raf@4.11.2/node_modules/@rooks/use-raf/lib/index.esm.js
var import_react = __toESM(require_react());
var import_raf = __toESM(require_raf());
function useRaf(callback, isActive) {
  const savedCallback = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    savedCallback.current = callback;
  }, [callback]);
  (0, import_react.useEffect)(() => {
    let startTime, animationFrame;
    function tick() {
      const timeElapsed = Date.now() - startTime;
      startTime = Date.now();
      loop();
      savedCallback.current && savedCallback.current(timeElapsed);
    }
    function loop() {
      animationFrame = (0, import_raf.default)(tick);
    }
    if (isActive) {
      startTime = Date.now();
      loop();
      return () => {
        import_raf.default.cancel(animationFrame);
      };
    }
  }, [isActive]);
}
var index_esm_default = useRaf;
export {
  index_esm_default as default
};
//# sourceMappingURL=@rooks_use-raf.js.map
