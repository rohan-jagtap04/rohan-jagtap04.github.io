{
  "version": 3,
  "sources": ["../../.pnpm/nanoid@4.0.2/node_modules/nanoid/index.browser.js", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/utils.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$command.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$inputRule.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$mark.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$node.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$prose.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$remark.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$shortcut.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$view.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/$ctx.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/composed/$node-schema.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/composed/$mark-schema.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/composed/$user-keymap.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/composable/composed/$attr.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/call-command.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/force-update.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/get-html.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/get-markdown.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/insert.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/outline.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/replace-all.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/macro/set-attr.ts", "../../.pnpm/@milkdown+utils@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7.2.3_@milkdown+transformer@7.2.3/node_modules/@milkdown/utils/src/pipe.ts"],
  "sourcesContent": ["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Cleanup, Ctx, MilkdownPlugin, SliceType, TimerType } from '@milkdown/ctx'\nimport { createTimer } from '@milkdown/ctx'\nimport { customAlphabet } from 'nanoid'\n\n/// @internal\nexport const nanoid = customAlphabet('abcedfghicklmn', 10)\n\n/// @internal\nexport type WithTimer<T> = T & { timer: TimerType }\n\n/// @internal\nexport const addTimer = <T extends MilkdownPlugin, PluginWithTimer extends T = WithTimer<T>>(\n  runner: (ctx: Ctx, plugin: PluginWithTimer, done: () => void) => Promise<void | Cleanup>,\n  injectTo: SliceType<TimerType[], string>,\n  timerName?: string,\n): PluginWithTimer => {\n  const timer = createTimer(timerName || nanoid())\n  let doneCalled = false\n\n  const plugin: MilkdownPlugin = (ctx) => {\n    ctx.record(timer)\n    ctx.update(injectTo, x => x.concat(timer))\n\n    return async () => {\n      const done = () => {\n        ctx.done(timer)\n        doneCalled = true\n      }\n\n      const cleanup = await runner(ctx, <PluginWithTimer>plugin, done)\n\n      if (!doneCalled)\n        ctx.done(timer)\n\n      return () => {\n        ctx.update(injectTo, x => x.filter(y => y !== timer))\n        ctx.clearTimer(timer)\n        cleanup?.()\n      }\n    }\n  };\n  (<T & { timer: TimerType }>plugin).timer = timer\n\n  return <PluginWithTimer>plugin\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Cmd, CmdKey } from '@milkdown/core'\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { SchemaReady, commandsCtx, commandsTimerCtx, createCmdKey } from '@milkdown/core'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Command<T> = MilkdownPlugin & {\n  run: (payload?: T) => boolean\n  key: CmdKey<T>\n}\n\n/// Create a command plugin. The command will be registered in the `commandsCtx` and can be called by other parts of the editor.\n/// It takes a key and a factory function. The factory function will be called when the plugin is created.\n/// The factory should return a function that will be called when the command is executed.\n/// The function should receive at **most one parameter**, which is the payload of the command.\n/// And the payload should always be **optional**.\n///\n/// ```ts\n/// import { setBlockType } from '@milkdown/prose/commands'\n///\n/// const commandPlugin = $command('SetAsHeading', (ctx) => {\n///   return (level = 1) => setBlockType(headingSchema.type(), { level });\n/// });\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the command.\n/// - `run`: The function to run the command.\n///\n/// You can use `callCommand` in `editor.action` to call the command.\n///\n/// ```ts\n/// import { callCommand } from '@milkdown/utils';\n/// const editor = Editor.make().use(/* some plugins */).use(commandPlugin).create();\n///\n/// editor.action(callCommand(commandPlugin.key, 3));\n/// ```\nexport const $command = <T, K extends string>(key: K, cmd: (ctx: Ctx) => Cmd<T>): $Command<T> => {\n  const cmdKey = createCmdKey<T>(key)\n\n  const plugin: MilkdownPlugin = ctx => async () => {\n    (<$Command<T>>plugin).key = cmdKey\n    await ctx.wait(SchemaReady)\n    const command = cmd(ctx)\n    ctx.get(commandsCtx).create(cmdKey, command);\n    (<$Command<T>>plugin).run = (payload?: T) => ctx.get(commandsCtx).call(key, payload)\n\n    return () => {\n      ctx.get(commandsCtx).remove(cmdKey)\n    }\n  }\n\n  return <$Command<T>>plugin\n}\n\n/// The async version for `$command`. You can use `await` in the factory when creating the command.\n/// ```ts\n/// const commandPlugin = $commandASync('LoadRemoteDoc', (ctx) => {\n///   return async (url = 'my-remote-api') => {\n///     const doc = await LoadRemoteDoc(url);\n///     return addDoc(doc);\n///   }\n/// });\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the command.\n/// - `run`: The function to run the command.\n/// - `timer`: The timer which will be resolved when the command is ready.\nexport const $commandAsync = <T, K extends string>(key: K, cmd: (ctx: Ctx) => Promise<Cmd<T>>, timerName?: string) => {\n  const cmdKey = createCmdKey<T>(key)\n  return addTimer<$Command<T>>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const command = await cmd(ctx)\n      ctx.get(commandsCtx).create(cmdKey, command);\n      (<$Command<T>>plugin).run = (payload?: T) => ctx.get(commandsCtx).call(key, payload);\n      (<$Command<T>>plugin).key = cmdKey\n      return () => {\n        ctx.get(commandsCtx).remove(cmdKey)\n      }\n    },\n    commandsTimerCtx,\n    timerName,\n  )\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { SchemaReady, editorStateTimerCtx, inputRulesCtx } from '@milkdown/core'\nimport type { InputRule } from '@milkdown/prose/inputrules'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $InputRule = MilkdownPlugin & {\n  inputRule: InputRule\n}\n\n/// Create an input rule plugin.\n/// It takes a factory function which returns a [prosemirror input rule](https://prosemirror.net/docs/ref/#inputrules.InputRule).\n///\n/// Additional property:\n/// - `inputRule`: The prosemirror input rule created.\nexport const $inputRule = (inputRule: (ctx: Ctx) => InputRule): $InputRule => {\n  const plugin: MilkdownPlugin = ctx => async () => {\n    await ctx.wait(SchemaReady)\n    const ir = inputRule(ctx)\n    ctx.update(inputRulesCtx, irs => [...irs, ir]);\n    (<$InputRule>plugin).inputRule = ir\n\n    return () => {\n      ctx.update(inputRulesCtx, irs => irs.filter(x => x !== ir))\n    }\n  }\n\n  return <$InputRule>plugin\n}\n\n/// The async version for `$inputRule`. You can use `await` in the factory when creating the input rule.\n///\n/// Additional property:\n/// - `inputRule`: The prosemirror input rule created.\n/// - `timer`: The timer which will be resolved when the input rule is ready.\nexport const $inputRuleAsync = (inputRule: (ctx: Ctx) => Promise<InputRule>, timerName?: string) => {\n  return addTimer<$InputRule>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const ir = await inputRule(ctx)\n      ctx.update(inputRulesCtx, irs => [...irs, ir])\n      plugin.inputRule = ir\n      return () => {\n        ctx.update(inputRulesCtx, irs => irs.filter(x => x !== ir))\n      }\n    },\n    editorStateTimerCtx,\n    timerName,\n  )\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type {\n  Ctx,\n  MilkdownPlugin,\n} from '@milkdown/ctx'\nimport type { MarkSchema } from '@milkdown/transformer'\nimport {\n  SchemaReady,\n  marksCtx,\n  schemaCtx,\n  schemaTimerCtx,\n} from '@milkdown/core'\nimport { missingMarkInSchema } from '@milkdown/exception'\nimport type { MarkType } from '@milkdown/prose/model'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Mark = MilkdownPlugin & {\n  id: string\n  schema: MarkSchema\n  type: () => MarkType\n}\n\n/// Create a mark plugin.\n/// It takes a mark id and a factory function.\n/// The factory should return a function that returns a [mark schema](/transformer#interface-markschema).\n///\n/// Additional property:\n/// - `id`: The id of the mark.\n/// - `schema`: The mark schema created.\n/// - `type`: A function that will return the [prosemirror mark type](https://prosemirror.net/docs/ref/#model.MarkType).\nexport const $mark = (id: string, schema: (ctx: Ctx) => MarkSchema): $Mark => {\n  let markType: MarkType | undefined\n  const plugin: MilkdownPlugin = ctx => async () => {\n    const markSchema = schema(ctx)\n    ctx.update(marksCtx, ns => [...ns.filter(n => n[0] !== id), [id, markSchema] as [string, MarkSchema]]);\n\n    (<$Mark>plugin).id = id;\n    (<$Mark>plugin).schema = markSchema\n\n    await ctx.wait(SchemaReady)\n\n    markType = ctx.get(schemaCtx).marks[id]\n    if (!markType)\n      throw missingMarkInSchema(id)\n\n    return () => {\n      ctx.update(marksCtx, ns => ns.filter(([x]) => x !== id))\n    }\n  }\n  (<$Mark>plugin).type = () => markType!\n\n  return <$Mark>plugin\n}\n\n/// The async version for `$mark`. You can use `await` in the factory when creating the mark schema.\n///\n/// Additional property:\n/// - `id`: The id of the mark.\n/// - `schema`: The mark schema created.\n/// - `type`: A function that will return the [prosemirror mark type](https://prosemirror.net/docs/ref/#model.MarkType).\n/// - `timer`: The timer which will be resolved when the mark schema is ready.\nexport const $markAsync = (id: string, schema: (ctx: Ctx) => Promise<MarkSchema>, timerName?: string) => {\n  let markType: MarkType | undefined\n  const plugin = addTimer<$Mark>(\n    async (ctx, plugin, done) => {\n      const markSchema = await schema(ctx)\n      ctx.update(marksCtx, ns => [...ns.filter(n => n[0] !== id), [id, markSchema] as [string, MarkSchema]])\n\n      plugin.id = id\n      plugin.schema = markSchema\n      done()\n\n      await ctx.wait(SchemaReady)\n\n      const markType = ctx.get(schemaCtx).marks[id]\n      if (!markType)\n        throw missingMarkInSchema(id)\n\n      return () => {\n        ctx.update(marksCtx, ns => ns.filter(([x]) => x !== id))\n      }\n    },\n    schemaTimerCtx,\n    timerName,\n  )\n  plugin.type = () => markType!\n\n  return plugin\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type {\n  Ctx,\n  MilkdownPlugin,\n} from '@milkdown/ctx'\nimport {\n  SchemaReady,\n  nodesCtx,\n  schemaCtx,\n  schemaTimerCtx,\n} from '@milkdown/core'\nimport { missingNodeInSchema } from '@milkdown/exception'\nimport type { NodeType } from '@milkdown/prose/model'\n\nimport type { NodeSchema } from '@milkdown/transformer'\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Node = MilkdownPlugin & {\n  id: string\n  schema: NodeSchema\n  type: () => NodeType\n}\n\n/// Create a node plugin.\n/// It takes a node id and a factory function.\n/// The factory should return a function that returns a [node schema](/transformer#interface-nodeschema).\n///\n/// Additional property:\n/// - `id`: The id of the node.\n/// - `schema`: The node schema created.\n/// - `type`: A function that will return the [prosemirror node type](https://prosemirror.net/docs/ref/#model.NodeType).\nexport const $node = (id: string, schema: (ctx: Ctx) => NodeSchema): $Node => {\n  let nodeType: NodeType | undefined\n  const plugin: MilkdownPlugin = ctx => async () => {\n    const nodeSchema = schema(ctx)\n    ctx.update(nodesCtx, ns => [...ns.filter(n => n[0] !== id), [id, nodeSchema] as [string, NodeSchema]]);\n\n    (<$Node>plugin).id = id;\n    (<$Node>plugin).schema = nodeSchema\n\n    await ctx.wait(SchemaReady)\n\n    nodeType = ctx.get(schemaCtx).nodes[id]\n    if (!nodeType)\n      throw missingNodeInSchema(id)\n\n    return () => {\n      ctx.update(nodesCtx, ns => ns.filter(([x]) => x !== id))\n    }\n  }\n  (<$Node>plugin).type = () => nodeType!\n\n  return <$Node>plugin\n}\n\n/// The async version for `$node`. You can use `await` in the factory when creating the node schema.\n///\n/// Additional property:\n/// - `id`: The id of the node.\n/// - `schema`: The node schema created.\n/// - `type`: A function that will return the [prosemirror node type](https://prosemirror.net/docs/ref/#model.NodeType).\n/// - `timer`: The timer which will be resolved when the node schema is ready.\nexport const $nodeAsync = (id: string, schema: (ctx: Ctx) => Promise<NodeSchema>, timerName?: string) => {\n  let nodeType: NodeType | undefined\n  const plugin = addTimer<$Node>(\n    async (ctx, plugin, done) => {\n      const nodeSchema = await schema(ctx)\n      ctx.update(nodesCtx, ns => [...ns.filter(n => n[0] !== id), [id, nodeSchema] as [string, NodeSchema]])\n\n      plugin.id = id\n      plugin.schema = nodeSchema\n      done()\n\n      await ctx.wait(SchemaReady)\n\n      nodeType = ctx.get(schemaCtx).nodes[id]\n      if (!nodeType)\n        throw missingNodeInSchema(id)\n\n      return () => {\n        ctx.update(nodesCtx, ns => ns.filter(([x]) => x !== id))\n      }\n    },\n    schemaTimerCtx,\n    timerName,\n  )\n  plugin.type = () => nodeType!\n\n  return plugin\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { SchemaReady, editorStateTimerCtx, prosePluginsCtx } from '@milkdown/core'\nimport type { Plugin, PluginKey } from '@milkdown/prose/state'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Prose = MilkdownPlugin & {\n  plugin: () => Plugin\n  key: () => PluginKey | undefined\n}\n\n/// Create a milkdown wrapper for [prosemirror plugin](https://prosemirror.net/docs/ref/#state.Plugin).\n/// It takes a factory function which returns a [prosemirror plugin](https://prosemirror.net/docs/ref/#state.Plugin).\n///\n/// Additional property:\n/// - `plugin`: The prosemirror plugin created.\n/// - `key`: The [prosemirror plugin key](https://prosemirror.net/docs/ref/#state.PluginKey) of the plugin.\nexport const $prose = (prose: (ctx: Ctx) => Plugin): $Prose => {\n  let prosePlugin: Plugin | undefined\n  const plugin: MilkdownPlugin = ctx => async () => {\n    await ctx.wait(SchemaReady)\n    prosePlugin = prose(ctx)\n    ctx.update(prosePluginsCtx, ps => [...ps, prosePlugin!])\n\n    return () => {\n      ctx.update(prosePluginsCtx, ps => ps.filter(x => x !== prosePlugin))\n    }\n  }\n  (<$Prose>plugin).plugin = () => prosePlugin!;\n  (<$Prose>plugin).key = () => prosePlugin!.spec.key\n\n  return <$Prose>plugin\n}\n\n/// The async version for `$prose`. You can use `await` in the factory when creating the plugin.\n///\n/// Additional property:\n/// - `plugin`: The prosemirror plugin created.\n/// - `key`: The [prosemirror plugin key](https://prosemirror.net/docs/ref/#state.PluginKey) of the plugin.\n/// - `timer`: The timer which will be resolved when the plugin is ready.\nexport const $proseAsync = (prose: (ctx: Ctx) => Promise<Plugin>, timerName?: string) => {\n  let prosePlugin: Plugin | undefined\n  const plugin = addTimer<$Prose>(\n    async (ctx) => {\n      await ctx.wait(SchemaReady)\n      prosePlugin = await prose(ctx)\n      ctx.update(prosePluginsCtx, ps => [...ps, prosePlugin!])\n\n      return () => {\n        ctx.update(prosePluginsCtx, ps => ps.filter(x => x !== prosePlugin))\n      }\n    },\n    editorStateTimerCtx,\n    timerName,\n  )\n\n  plugin.plugin = () => prosePlugin!\n  plugin.key = () => prosePlugin!.spec.key\n\n  return plugin\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { InitReady, remarkPluginsCtx, schemaTimerCtx } from '@milkdown/core'\n\nimport type { RemarkPlugin } from '@milkdown/transformer'\nimport { addTimer } from './utils'\n\n/// @internal\nexport type $Remark = MilkdownPlugin & {\n  plugin: RemarkPlugin\n}\n\n/// Create a milkdown wrapper for [remark plugin](https://github.com/remarkjs/remark/blob/main/doc/plugins.md).\n/// It takes a factory function which returns a [remark plugin](https://github.com/remarkjs/remark/blob/main/doc/plugins.md).\n///\n/// Additional property:\n/// - `plugin`: The remark plugin created.\nexport const $remark = (remark: (ctx: Ctx) => RemarkPlugin): $Remark => {\n  const plugin: MilkdownPlugin = ctx => async () => {\n    await ctx.wait(InitReady)\n    const re = remark(ctx)\n    ctx.update(remarkPluginsCtx, rp => [...rp, re]);\n    (<$Remark>plugin).plugin = re\n\n    return () => {\n      ctx.update(remarkPluginsCtx, rp => rp.filter(x => x !== re))\n    }\n  }\n\n  return <$Remark>plugin\n}\n\n/// The async version for `$remark`. You can use `await` in the factory when creating the remark plugin.\n///\n/// Additional property:\n/// - `plugin`: The remark plugin created.\n/// - `timer`: The timer which will be resolved when the remark plugin is ready.\nexport const $remarkAsync = (remark: (ctx: Ctx) => Promise<RemarkPlugin>, timerName?: string) =>\n  addTimer<$Remark>(\n    async (ctx, plugin) => {\n      await ctx.wait(InitReady)\n      const re = await remark(ctx)\n      ctx.update(remarkPluginsCtx, rp => [...rp, re])\n      plugin.plugin = re\n\n      return () => {\n        ctx.update(remarkPluginsCtx, rp => rp.filter(x => x !== re))\n      }\n    },\n    schemaTimerCtx,\n    timerName,\n  )\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { SchemaReady, editorStateTimerCtx, prosePluginsCtx } from '@milkdown/core'\nimport { keymap } from '@milkdown/prose/keymap'\nimport type { Command } from '@milkdown/prose/state'\n\nimport { addTimer } from './utils'\n\n/// @internal\nexport type Keymap = Record<string, Command>\n\n/// @internal\nexport type $Shortcut = MilkdownPlugin & {\n  keymap: Keymap\n}\n\n/// Create a shortcut for the editor.\n/// It takes a factory function which returns a [prosemirror keymap](https://prosemirror.net/docs/ref/#keymap).\n///\n/// Additional property:\n/// - `keymap`: The prosemirror keymap created.\nexport const $shortcut = (shortcut: (ctx: Ctx) => Keymap): $Shortcut => {\n  const plugin: MilkdownPlugin = ctx => async () => {\n    await ctx.wait(SchemaReady)\n    const k = shortcut(ctx)\n    const keymapPlugin = keymap(k)\n    ctx.update(prosePluginsCtx, ps => [...ps, keymapPlugin]);\n    (<$Shortcut>plugin).keymap = k\n\n    return () => {\n      ctx.update(prosePluginsCtx, ps => ps.filter(x => x !== keymapPlugin))\n    }\n  }\n\n  return <$Shortcut>plugin\n}\n\n/// The async version for `$shortcut`. You can use `await` in the factory when creating the keymap.\n///\n/// Additional property:\n/// - `keymap`: The prosemirror keymap created.\n/// - `timer`: The timer which will be resolved when the plugin is ready.\nexport const $shortcutAsync = (shortcut: (ctx: Ctx) => Promise<Keymap>, timerName?: string) =>\n  addTimer<$Shortcut>(\n    async (ctx, plugin) => {\n      await ctx.wait(SchemaReady)\n      const k = await shortcut(ctx)\n      const keymapPlugin = keymap(k)\n      ctx.update(prosePluginsCtx, ps => [...ps, keymapPlugin])\n      plugin.keymap = k\n\n      return () => {\n        ctx.update(prosePluginsCtx, ps => ps.filter(x => x !== keymapPlugin))\n      }\n    },\n    editorStateTimerCtx,\n    timerName,\n  )\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { SchemaReady, editorViewTimerCtx, markViewCtx, nodeViewCtx } from '@milkdown/core'\nimport { NodeType } from '@milkdown/prose/model'\nimport type { MarkViewConstructor, NodeViewConstructor } from '@milkdown/prose/view'\n\nimport { addTimer } from './utils'\nimport type { $Mark, $Node } from '.'\n\n/// @internal\nexport type $View<T extends $Node | $Mark, V extends NodeViewConstructor | MarkViewConstructor> = MilkdownPlugin & {\n  view: V\n  type: T\n}\n\n/// @internal\nexport type GetConstructor<T extends $Node | $Mark> = T extends $Node\n  ? NodeViewConstructor\n  : T extends $Mark\n    ? MarkViewConstructor\n    : NodeViewConstructor | MarkViewConstructor\n\n/// Create a [prosemirror node/mark view](https://prosemirror.net/docs/ref/#view.NodeView) plugin.\n/// It takes two arguments\n/// - `type`: The node/mark plugin that needs to add a view.\n/// - `view`: The factory that creates the view. It should return a function that returns a [node/mark view constructor](https://prosemirror.net/docs/ref/#view.NodeView).\n///\n/// Additional property:\n/// - `view`: The view created.\n/// - `type`: The node/mark plugin that needs to add a view.\nexport const $view = <\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor = GetConstructor<T>,\n>(type: T, view: (ctx: Ctx) => V): $View<T, V> => {\n  const plugin: MilkdownPlugin = ctx => async () => {\n    await ctx.wait(SchemaReady)\n    const v = view(ctx)\n    if (type.type() instanceof NodeType)\n      ctx.update(nodeViewCtx, ps => [...ps, [type.id, v] as [string, NodeViewConstructor]])\n    else\n      ctx.update(markViewCtx, ps => [...ps, [type.id, v] as [string, MarkViewConstructor]]);\n\n    (<$View<T, V>>plugin).view = v;\n    (<$View<T, V>>plugin).type = type\n\n    return () => {\n      if (type.type() instanceof NodeType)\n        ctx.update(nodeViewCtx, ps => ps.filter(x => x[0] !== type.id))\n      else\n        ctx.update(markViewCtx, ps => ps.filter(x => x[0] !== type.id))\n    }\n  }\n\n  return <$View<T, V>>plugin\n}\n\n/// The async version for `$view`. You can use `await` in the factory when creating the view.\n///\n/// Additional property:\n/// - `view`: The view created.\n/// - `type`: The node/mark plugin that needs to add a view.\n/// - `timer`: The timer which will be resolved when the view is ready.\nexport const $viewAsync = <\n  T extends $Node | $Mark,\n  V extends NodeViewConstructor | MarkViewConstructor = GetConstructor<T>,\n>(type: T, view: (ctx: Ctx) => Promise<V>, timerName?: string) =>\n    addTimer<$View<T, V>>(\n      async (ctx, plugin) => {\n        await ctx.wait(SchemaReady)\n        const v = await view(ctx)\n        if (type.type() instanceof NodeType)\n          ctx.update(nodeViewCtx, ps => [...ps, [type.id, v] as [string, NodeViewConstructor]])\n        else\n          ctx.update(markViewCtx, ps => [...ps, [type.id, v] as [string, MarkViewConstructor]])\n\n        plugin.view = v\n        plugin.type = type\n\n        return () => {\n          if (type.type() instanceof NodeType)\n            ctx.update(nodeViewCtx, ps => ps.filter(x => x[0] !== type.id))\n          else\n            ctx.update(markViewCtx, ps => ps.filter(x => x[0] !== type.id))\n        }\n      },\n      editorViewTimerCtx,\n      timerName,\n    )\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin, SliceType } from '@milkdown/ctx'\nimport { createSlice } from '@milkdown/ctx'\n\n/// @internal\nexport type $Ctx<T, N extends string> = MilkdownPlugin & {\n  key: SliceType<T, N>\n}\n\n/// Create a slice plugin. The plugin will be registered in the `ctx` and can be accessed by other parts of the editor.\n/// ```ts\n/// const counterCtx = $ctx(0, 'counter');\n/// ```\n///\n/// Additional property:\n/// - `key`: The key of the slice.\nexport const $ctx = <T, N extends string>(value: T, name: N): $Ctx<T, N> => {\n  const slice = createSlice(value, name)\n  const plugin: $Ctx<T, N> = (ctx) => {\n    ctx.inject(slice)\n    return () => {\n      return () => {\n        ctx.remove(slice)\n      }\n    }\n  }\n\n  plugin.key = slice\n\n  return plugin\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { nodesCtx } from '@milkdown/core'\nimport type { NodeSchema } from '@milkdown/transformer'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\nimport type { $Node } from '../$node'\nimport { $node } from '../$node'\n\n/// @internal\nexport type GetNodeSchema = (ctx: Ctx) => NodeSchema\n\n/// @internal\nexport type $NodeSchema<T extends string> = [\n  schemaCtx: $Ctx<GetNodeSchema, T>,\n  schema: $Node,\n] & {\n  id: $Node['id']\n  type: $Node['type']\n  node: $Node\n  ctx: $Ctx<GetNodeSchema, T>\n  schema: NodeSchema\n  key: $Ctx<GetNodeSchema, T>['key']\n  extendSchema: (handler: (prev: GetNodeSchema) => GetNodeSchema) => MilkdownPlugin\n}\n\n/// Create a plugin for node schema.\n/// The first parameter is the id of the node schema.\n/// The second parameter is the function that returns the node schema.\n///\n/// The function will return a plugin with additional properties:\n/// - `id`: The id of the node schema.\n/// - `type`: A function witch will return the type of the node schema.\n/// - `ctx`: The context of the node schema.\n/// - `node`: The node schema plugin.\n/// - `schema`: The node schema.\n/// - `key`: The key of slice which contains the node schema factory.\n/// - `extendSchema`: A function witch will return a plugin that can extend the node schema.\nexport const $nodeSchema = <T extends string>(id: T, schema: GetNodeSchema): $NodeSchema<T> => {\n  const schemaCtx = $ctx(schema, id)\n\n  const nodeSchema = $node(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx.key)\n    return userSchema(ctx)\n  })\n\n  const result = [schemaCtx, nodeSchema] as $NodeSchema<T>\n  result.id = nodeSchema.id\n  result.node = nodeSchema\n  result.type = nodeSchema.type\n  result.schema = nodeSchema.schema\n  result.ctx = schemaCtx\n  result.key = schemaCtx.key\n  result.extendSchema = (handler): MilkdownPlugin => {\n    return ctx => () => {\n      const prev = ctx.get(schemaCtx.key)\n      const next = handler(prev)\n      const nodeSchema = next(ctx)\n      ctx.update(nodesCtx, ns => [...ns.filter(n => n[0] !== id), [id, nodeSchema] as [string, NodeSchema]])\n      result.schema = nodeSchema\n    }\n  }\n\n  return result\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { marksCtx } from '@milkdown/core'\nimport type { MarkSchema } from '@milkdown/transformer'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\nimport type { $Mark } from '../$mark'\nimport { $mark } from '../$mark'\n\n/// @internal\nexport type GetMarkSchema = (ctx: Ctx) => MarkSchema\n\n/// @internal\nexport type $MarkSchema<T extends string> = [\n  schemaCtx: $Ctx<GetMarkSchema, T>,\n  schema: $Mark,\n] & {\n  id: $Mark['id']\n  type: $Mark['type']\n  mark: $Mark\n  ctx: $Ctx<GetMarkSchema, T>\n  schema: MarkSchema\n  key: $Ctx<GetMarkSchema, T>['key']\n  extendSchema: (handler: (prev: GetMarkSchema) => GetMarkSchema) => MilkdownPlugin\n}\n\n/// Create a plugin for mark schema.\n/// The first parameter is the id of the mark schema.\n/// The second parameter is the function that returns the mark schema.\n///\n/// The function will return a plugin with additional properties:\n/// - `id`: The id of the mark schema.\n/// - `type`: A function witch will return the type of the mark schema.\n/// - `ctx`: The context of the mark schema.\n/// - `mark`: The mark schema plugin.\n/// - `schema`: The mark schema.\n/// - `key`: The key of slice which contains the mark schema factory.\n/// - `extendSchema`: A function witch will return a plugin that can extend the mark schema.\nexport const $markSchema = <T extends string>(id: T, schema: GetMarkSchema): $MarkSchema<T> => {\n  const schemaCtx = $ctx(schema, id)\n\n  const markSchema = $mark(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx.key)\n    return userSchema(ctx)\n  })\n\n  const result = [schemaCtx, markSchema] as $MarkSchema<T>\n  result.id = markSchema.id\n  result.mark = markSchema\n  result.type = markSchema.type\n  result.schema = markSchema.schema\n  result.ctx = schemaCtx\n  result.key = schemaCtx.key\n  result.extendSchema = (handler): MilkdownPlugin => {\n    return ctx => () => {\n      const prev = ctx.get(schemaCtx.key)\n      const next = handler(prev)\n      const markSchema = next(ctx)\n      ctx.update(marksCtx, ms => [...ms.filter(m => m[0] !== id), [id, markSchema] as [string, MarkSchema]])\n      result.schema = markSchema\n    }\n  }\n\n  return result\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx, SliceType } from '@milkdown/ctx'\nimport type { Command } from '@milkdown/prose/state'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\nimport type { $Shortcut, Keymap } from '../$shortcut'\nimport { $shortcut } from '../$shortcut'\n\n/// @internal\nexport type KeymapConfig<K extends string> = Record<K, string | string[]>\n\n/// @internal\nexport type KeymapItem = {\n  shortcuts: string | string[]\n  command: (ctx: Ctx) => Command\n}\n\n/// @internal\nexport type UserKeymapConfig<Key extends string> = Record<Key, KeymapItem>\n\n/// @internal\nexport type $UserKeymap<N extends string, Key extends string> = [$Ctx<KeymapConfig<Key>, `${N}Keymap`>, $Shortcut] & {\n  key: SliceType<KeymapConfig<Key>, `${N}Keymap`>\n  keymap: Keymap\n  ctx: $Ctx<KeymapConfig<Key>, `${N}Keymap`>\n  shortcuts: $Shortcut\n}\n\n/// Create a keymap which can be customized by user.\n/// It takes two arguments:\n/// - `name`: The name of the keymap.\n/// - `userKeymap`: The keymap config which contains the shortcuts and the command.\nexport const $useKeymap = <N extends string, Key extends string>(name: N, userKeymap: UserKeymapConfig<Key>) => {\n  const key = Object.fromEntries(Object.entries<KeymapItem>(userKeymap).map(([key, { shortcuts }]) => {\n    return [key, shortcuts]\n  })) as Record<Key, string | string[]>\n\n  const keymapDef = $ctx<KeymapConfig<Key>, `${N}Keymap`>(key, `${name}Keymap`)\n\n  const shortcuts = $shortcut((ctx) => {\n    const keys = ctx.get(keymapDef.key)\n\n    const keymapTuple = Object.entries<KeymapItem>(userKeymap).flatMap(([key, { command }]) => {\n      const targetKeys: string[] = [keys[key as Key]].flat()\n\n      return targetKeys.map(targetKey => [targetKey, command(ctx)] as const)\n    })\n\n    return Object.fromEntries(keymapTuple)\n  })\n\n  const result = [keymapDef, shortcuts] as $UserKeymap<N, Key>\n  result.ctx = keymapDef\n  result.shortcuts = shortcuts\n  result.key = keymapDef.key\n  result.keymap = shortcuts.keymap\n\n  return result\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Mark, Node } from '@milkdown/prose/model'\nimport type { $Ctx } from '../$ctx'\nimport { $ctx } from '../$ctx'\n\n/// @internal\nexport type $NodeAttr = $Ctx<(node: Node) => Record<string, any>, `${string}Attr`>\n\n/// Create a slice which contains the attributes for node schema.\nexport const $nodeAttr = (name: string, value: (node: Node) => Record<string, any> = () => ({})): $NodeAttr => $ctx(value, `${name}Attr`)\n\n/// @internal\nexport type $MarkAttr = $Ctx<(node: Mark) => Record<string, any>, `${string}Attr`>\n\n/// Create a slice which contains the attributes for mark schema.\nexport const $markAttr = (name: string, value: (mark: Mark) => Record<string, any> = () => ({})): $MarkAttr => $ctx(value, `${name}Attr`)\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { CmdKey } from '@milkdown/core'\nimport { commandsCtx } from '@milkdown/core'\nimport type { Ctx } from '@milkdown/ctx'\n\ntype InferParams<T> = T extends CmdKey<infer U> ? U : never\n\n/// Call a command. You can pass the command key and the payload to the macro.\nexport function callCommand<T extends CmdKey<any>>(slice: string, payload?: InferParams<T>): (ctx: Ctx) => boolean\nexport function callCommand<T>(slice: CmdKey<T>, payload?: T): (ctx: Ctx) => boolean\nexport function callCommand(slice: string | CmdKey<any>, payload?: any): (ctx: Ctx) => boolean\nexport function callCommand(slice: string | CmdKey<any>, payload?: any): (ctx: Ctx) => boolean {\n  return (ctx: Ctx) => {\n    return ctx.get(commandsCtx).call(slice, payload)\n  }\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Force update the editor.\nexport const forceUpdate\n  = () =>\n    (ctx: Ctx): void => {\n      const view = ctx.get(editorViewCtx)\n      const { tr } = view.state\n\n      const nextTr = Object.assign(Object.create(tr), tr).setTime(Date.now())\n      return view.dispatch(nextTr)\n    }\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx, schemaCtx } from '@milkdown/core'\nimport { DOMSerializer } from '@milkdown/prose/model'\n\n/// Get content of the editor as HTML string.\nexport const getHTML\n  = () =>\n    (ctx: Ctx): string => {\n      const div = document.createElement('div')\n      const schema = ctx.get(schemaCtx)\n      const view = ctx.get(editorViewCtx)\n      const fragment = DOMSerializer.fromSchema(schema).serializeFragment(view.state.doc.content)\n\n      div.appendChild(fragment)\n\n      return div.innerHTML\n    }\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx, serializerCtx } from '@milkdown/core'\n\n/// Get content of the editor as markdown string.\nexport const getMarkdown\n  = () =>\n    (ctx: Ctx): string => {\n      const view = ctx.get(editorViewCtx)\n      const serializer = ctx.get(serializerCtx)\n\n      return serializer(view.state.doc)\n    }\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx, parserCtx } from '@milkdown/core'\nimport { Slice } from '@milkdown/prose/model'\n\n/// Insert markdown string into the editor.\nexport const insert = (markdown: string) => (ctx: Ctx) => {\n  const view = ctx.get(editorViewCtx)\n  const parser = ctx.get(parserCtx)\n  const doc = parser(markdown)\n  if (!doc)\n    return\n\n  const contentSlice = view.state.selection.content()\n  return view.dispatch(\n    view.state.tr\n      .replaceSelection(new Slice(doc.content, contentSlice.openStart, contentSlice.openEnd))\n      .scrollIntoView(),\n  )\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\n\n/// Get outline of the editor.\nexport const outline\n  = () =>\n    (ctx: Ctx): Array<{ text: string; level: number; id: string }> => {\n      const view = ctx.get(editorViewCtx)\n      const data: { text: string; level: number; id: string }[] = []\n      const doc = view.state.doc\n      doc.descendants((node) => {\n        if (node.type.name === 'heading' && node.attrs.level)\n          data.push({ text: node.textContent, level: node.attrs.level, id: node.attrs.id })\n      })\n      return data\n    }\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport {\n  editorStateOptionsCtx,\n  editorViewCtx,\n  parserCtx,\n  prosePluginsCtx,\n  schemaCtx,\n} from '@milkdown/core'\nimport { Slice } from '@milkdown/prose/model'\nimport { EditorState } from '@milkdown/prose/state'\n\n/// Replace all content of the editor with markdown string.\n/// If flush is true, the editor state will be re-created.\nexport const replaceAll\n  = (markdown: string, flush = false) =>\n    (ctx: Ctx): void => {\n      const view = ctx.get(editorViewCtx)\n      const parser = ctx.get(parserCtx)\n      const doc = parser(markdown)\n      if (!doc)\n        return\n\n      if (!flush) {\n        const { state } = view\n        return view.dispatch(state.tr.replace(0, state.doc.content.size, new Slice(doc.content, 0, 0)))\n      }\n\n      const schema = ctx.get(schemaCtx)\n      const options = ctx.get(editorStateOptionsCtx)\n      const plugins = ctx.get(prosePluginsCtx)\n\n      const state = EditorState.create({\n        schema,\n        doc,\n        plugins,\n        ...options,\n      })\n\n      view.updateState(state)\n    }\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\nimport type { Attrs } from '@milkdown/prose/model'\n\n/// Set the attributes of the node at the given position.\nexport const setAttr = (pos: number, update: (prevAttrs: Attrs) => Attrs) => (ctx: Ctx) => {\n  const view = ctx.get(editorViewCtx)\n  const { tr } = view.state\n  const node = tr.doc.nodeAt(pos)\n  if (!node)\n    return\n  const nextAttr = update(node.attrs)\n  return view.dispatch(tr.setNodeMarkup(pos, undefined, nextAttr))\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\n\n/// @internal\nexport type Many<T> = T | ReadonlyArray<T>\n\ninterface Pipe {\n  pipe<A extends any[], R1, R2, R3, R4, R5, R6, R7>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n    f5: (a: R4) => R5,\n    f6: (a: R5) => R6,\n    f7: (a: R6) => R7,\n  ): (...args: A) => R7\n  pipe<A extends any[], R1, R2, R3, R4, R5, R6, R7>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n    f5: (a: R4) => R5,\n    f6: (a: R5) => R6,\n    f7: (a: R6) => R7,\n    ...func: Array<Many<(a: any) => any>>\n  ): (...args: A) => any\n  pipe<A extends any[], R1, R2, R3, R4, R5, R6>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n    f5: (a: R4) => R5,\n    f6: (a: R5) => R6,\n  ): (...args: A) => R6\n  pipe<A extends any[], R1, R2, R3, R4, R5>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n    f5: (a: R4) => R5,\n  ): (...args: A) => R5\n  pipe<A extends any[], R1, R2, R3, R4>(\n    f1: (...args: A) => R1,\n    f2: (a: R1) => R2,\n    f3: (a: R2) => R3,\n    f4: (a: R3) => R4,\n  ): (...args: A) => R4\n  pipe<A extends any[], R1, R2, R3>(f1: (...args: A) => R1, f2: (a: R1) => R2, f3: (a: R2) => R3): (...args: A) => R3\n  pipe<A extends any[], R1, R2>(f1: (...args: A) => R1, f2: (a: R1) => R2): (...args: A) => R2\n  pipe(...func: Array<Many<(...args: any[]) => any>>): (...args: any[]) => any\n}\n\n/// @internal\nexport const pipe: Pipe['pipe'] = (...funcs: any[]) => {\n  const length = funcs.length\n  let index = length\n  while (index--) {\n    if (typeof funcs[index] !== 'function')\n      throw new TypeError('Expected a function')\n  }\n  return (...args: any[]) => {\n    let index = 0\n    let result = length ? funcs[index](...args) : args[0]\n    while (++index < length)\n      result = funcs[index](result)\n\n    return result\n  }\n}\n"],
  "mappings": "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",
  "names": ["nanoid", "customAlphabet", "$command", "key", "cmd", "cmdKey", "createCmdKey", "plugin", "ctx", "SchemaReady", "command", "commandsCtx", "payload", "$inputRule", "inputRule", "plugin", "ctx", "SchemaReady", "ir", "inputRulesCtx", "irs", "x", "$mark", "id", "schema", "markType", "plugin", "markSchema", "ctx", "marksCtx", "ns", "n", "SchemaReady", "schemaCtx", "missingMarkInSchema", "x", "$node", "id", "schema", "nodeType", "plugin", "nodeSchema", "ctx", "nodesCtx", "ns", "n", "SchemaReady", "schemaCtx", "missingNodeInSchema", "x", "$prose", "prose", "prosePlugin", "plugin", "ctx", "SchemaReady", "prosePluginsCtx", "ps", "x", "$remark", "remark", "plugin", "ctx", "InitReady", "re", "remarkPluginsCtx", "rp", "x", "$shortcut", "shortcut", "plugin", "ctx", "SchemaReady", "k", "keymapPlugin", "keymap", "prosePluginsCtx", "ps", "x", "$ctx", "value", "name", "slice", "createSlice", "plugin", "ctx", "$nodeSchema", "id", "schema", "schemaCtx", "nodeSchema", "$node", "result", "handler", "prev", "nodesCtx", "ns", "n", "$markSchema", "markSchema", "$mark", "marksCtx", "ms", "m", "$useKeymap", "userKeymap", "key", "shortcuts", "keymapDef", "$shortcut", "keys", "keymapTuple", "command", "targetKey", "$nodeAttr", "$markAttr", "pipe", "funcs", "length", "index", "args", "result"]
}
