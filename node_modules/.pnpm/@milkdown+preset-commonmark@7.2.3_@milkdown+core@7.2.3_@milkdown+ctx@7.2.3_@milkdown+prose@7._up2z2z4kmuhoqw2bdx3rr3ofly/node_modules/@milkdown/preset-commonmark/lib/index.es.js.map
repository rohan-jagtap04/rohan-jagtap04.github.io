{"version":3,"file":"index.es.js","sources":["../src/__internal__/serialize-text.ts","../src/__internal__/with-meta.ts","../src/mark/emphasis.ts","../src/mark/strong.ts","../src/mark/inline-code.ts","../src/mark/link.ts","../src/node/doc.ts","../src/node/paragraph.ts","../src/node/heading.ts","../src/node/blockquote.ts","../src/node/code-block.ts","../src/node/image.ts","../src/node/hardbreak.ts","../src/node/hr.ts","../src/node/bullet-list.ts","../src/node/ordered-list.ts","../src/node/list-item.ts","../src/node/text.ts","../src/node/html.ts","../src/composed/schema.ts","../src/composed/inputrules.ts","../src/composed/commands.ts","../src/composed/keymap.ts","../src/plugin/inline-sync-plugin/regexp.ts","../src/plugin/inline-sync-plugin/utils.ts","../src/plugin/inline-sync-plugin/config.ts","../src/plugin/inline-sync-plugin/context.ts","../src/plugin/inline-sync-plugin/replacer.ts","../src/plugin/inline-sync-plugin/inline-sync-plugin.ts","../src/plugin/remark-add-order-in-list-plugin.ts","../src/plugin/remark-line-break.ts","../src/plugin/remark-inline-link-plugin.ts","../src/plugin/remark-html-transformer.ts","../src/plugin/remark-marker-plugin.ts","../src/plugin/inline-nodes-cursor-plugin.ts","../src/plugin/hardbreak-clear-mark-plugin.ts","../src/plugin/hardbreak-filter-plugin.ts","../src/plugin/sync-heading-id-plugin.ts","../src/plugin/sync-list-order-plugin.ts","../src/composed/plugins.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport type { SerializerState } from '@milkdown/transformer'\nimport type { Node } from '@milkdown/prose/model'\nimport { Fragment } from '@milkdown/prose/model'\n\nexport const serializeText = (state: SerializerState, node: Node) => {\n  const lastIsHardBreak\n    = node.childCount >= 1 && node.lastChild?.type.name === 'hardbreak'\n  if (!lastIsHardBreak) {\n    state.next(node.content)\n    return\n  }\n\n  const contentArr: Node[] = []\n  node.content.forEach((n, _, i) => {\n    if (i === node.childCount - 1)\n      return\n\n    contentArr.push(n)\n  })\n  state.next(Fragment.fromArray(contentArr))\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport const withMeta = <T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>,\n): T => {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/preset-commonmark',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, remarkStringifyOptionsCtx } from '@milkdown/core'\nimport { $command, $markAttr, $markSchema, $useKeymap } from '@milkdown/utils'\nimport { toggleMarkdownMark } from '@milkdown/prose'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the emphasis mark.\nexport const emphasisAttr = $markAttr('emphasis')\n\nwithMeta(emphasisAttr, {\n  displayName: 'Attr<emphasis>',\n  group: 'Emphasis',\n})\n\n/// Emphasis mark schema.\nexport const emphasisSchema = $markSchema('emphasis', ctx => ({\n  attrs: {\n    marker: {\n      default: ctx.get(remarkStringifyOptionsCtx).emphasis || '*',\n    },\n  },\n  parseDOM: [\n    { tag: 'i' },\n    { tag: 'em' },\n    { style: 'font-style', getAttrs: value => (value === 'italic') as false },\n  ],\n  toDOM: mark => ['em', ctx.get(emphasisAttr.key)(mark)],\n  parseMarkdown: {\n    match: node => node.type === 'emphasis',\n    runner: (state, node, markType) => {\n      state.openMark(markType, { marker: node.marker })\n      state.next(node.children)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'emphasis',\n    runner: (state, mark) => {\n      state.withMark(mark, 'emphasis', undefined, {\n        marker: mark.attrs.marker,\n      })\n    },\n  },\n}))\n\nwithMeta(emphasisSchema.mark, {\n  displayName: 'MarkSchema<emphasis>',\n  group: 'Emphasis',\n})\n\nwithMeta(emphasisSchema.ctx, {\n  displayName: 'MarkSchemaCtx<emphasis>',\n  group: 'Emphasis',\n})\n\n/// A command to toggle the emphasis mark.\nexport const toggleEmphasisCommand = $command('ToggleEmphasis', ctx => () => {\n  const markType = emphasisSchema.type()\n  const mark = ctx.get(remarkStringifyOptionsCtx).emphasis || '*'\n  return toggleMarkdownMark(markType, mark)\n})\n\nwithMeta(toggleEmphasisCommand, {\n  displayName: 'Command<toggleEmphasisCommand>',\n  group: 'Emphasis',\n})\n\n/// Keymap for the emphasis mark.\n/// - `Mod-i` - Toggle the emphasis mark.\nexport const emphasisKeymap = $useKeymap('emphasisKeymap', {\n  ToggleEmphasis: {\n    shortcuts: 'Mod-i',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(toggleEmphasisCommand.key)\n    },\n  },\n})\n\nwithMeta(emphasisKeymap.ctx, {\n  displayName: 'KeymapCtx<emphasis>',\n  group: 'Emphasis',\n})\n\nwithMeta(emphasisKeymap.shortcuts, {\n  displayName: 'Keymap<emphasis>',\n  group: 'Emphasis',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, remarkStringifyOptionsCtx } from '@milkdown/core'\nimport { $command, $markAttr, $markSchema, $useKeymap } from '@milkdown/utils'\nimport { toggleMarkdownMark } from '@milkdown/prose'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the strong mark.\nexport const strongAttr = $markAttr('strong')\n\nwithMeta(strongAttr, {\n  displayName: 'Attr<strong>',\n  group: 'Strong',\n})\n\n/// Strong mark schema.\nexport const strongSchema = $markSchema('strong', ctx => ({\n  attrs: {\n    marker: {\n      default: ctx.get(remarkStringifyOptionsCtx).strong || '*',\n    },\n  },\n  parseDOM: [\n    { tag: 'b' },\n    { tag: 'strong' },\n    { style: 'font-style', getAttrs: value => (value === 'bold') as false },\n  ],\n  toDOM: mark => ['strong', ctx.get(strongAttr.key)(mark)],\n  parseMarkdown: {\n    match: node => node.type === 'strong',\n    runner: (state, node, markType) => {\n      state.openMark(markType, { marker: node.marker })\n      state.next(node.children)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'strong',\n    runner: (state, mark) => {\n      state.withMark(mark, 'strong', undefined, {\n        marker: mark.attrs.marker,\n      })\n    },\n  },\n}))\n\nwithMeta(strongSchema.mark, {\n  displayName: 'MarkSchema<strong>',\n  group: 'Strong',\n})\n\nwithMeta(strongSchema.ctx, {\n  displayName: 'MarkSchemaCtx<strong>',\n  group: 'Strong',\n})\n\n/// A command to toggle the strong mark.\nexport const toggleStrongCommand = $command('ToggleStrong', ctx => () => {\n  const markType = strongSchema.type()\n  const markSymbol = ctx.get(remarkStringifyOptionsCtx).strong || '*'\n  const mark = markSymbol + markSymbol\n  return toggleMarkdownMark(markType, mark)\n})\n\nwithMeta(toggleStrongCommand, {\n  displayName: 'Command<toggleStrongCommand>',\n  group: 'Strong',\n})\n\n/// Keymap for the strong mark.\n/// - `Mod-b` - Toggle the strong mark.\nexport const strongKeymap = $useKeymap('strongKeymap', {\n  ToggleBold: {\n    shortcuts: ['Mod-b'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(toggleStrongCommand.key)\n    },\n  },\n})\n\nwithMeta(strongKeymap.ctx, {\n  displayName: 'KeymapCtx<strong>',\n  group: 'Strong',\n})\n\nwithMeta(strongKeymap.shortcuts, {\n  displayName: 'Keymap<strong>',\n  group: 'Strong',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport type { MarkType } from '@milkdown/prose/model'\nimport { $command, $markAttr, $markSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the inlineCode mark.\nexport const inlineCodeAttr = $markAttr('inlineCode')\n\nwithMeta(inlineCodeAttr, {\n  displayName: 'Attr<inlineCode>',\n  group: 'InlineCode',\n})\n\n/// InlineCode mark schema.\nexport const inlineCodeSchema = $markSchema('inlineCode', ctx => ({\n  priority: 100,\n  code: true,\n  inclusive: false,\n  parseDOM: [{ tag: 'code' }],\n  toDOM: mark => ['code', ctx.get(inlineCodeAttr.key)(mark)],\n  parseMarkdown: {\n    match: node => node.type === 'inlineCode',\n    runner: (state, node, markType) => {\n      state.openMark(markType)\n      state.addText(node.value as string)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'inlineCode',\n    runner: (state, mark, node) => {\n      state.withMark(mark, 'inlineCode', node.text || '')\n    },\n  },\n}))\n\nwithMeta(inlineCodeSchema.mark, {\n  displayName: 'MarkSchema<inlineCode>',\n  group: 'InlineCode',\n})\n\nwithMeta(inlineCodeSchema.ctx, {\n  displayName: 'MarkSchemaCtx<inlineCode>',\n  group: 'InlineCode',\n})\n\n/// A command to toggle the inlineCode mark.\nexport const toggleInlineCodeCommand = $command('ToggleInlineCode', () => () => (state, dispatch) => {\n  const { selection, tr } = state\n  if (selection.empty)\n    return false\n  const { from, to } = selection\n\n  const has = state.doc.rangeHasMark(from, to, inlineCodeSchema.type())\n  // remove exists inlineCode mark if have\n  if (has) {\n    dispatch?.(tr.removeMark(from, to, inlineCodeSchema.type()))\n    return true\n  }\n\n  const restMarksName = Object.keys(state.schema.marks).filter(x => x !== inlineCodeSchema.type.name)\n\n  // remove other marks\n  restMarksName\n    .map(name => state.schema.marks[name] as MarkType)\n    .forEach((t) => {\n      tr.removeMark(from, to, t)\n    })\n\n  // add inlineCode mark\n  dispatch?.(tr.addMark(from, to, inlineCodeSchema.type().create()))\n  return true\n})\n\nwithMeta(toggleInlineCodeCommand, {\n  displayName: 'Command<toggleInlineCodeCommand>',\n  group: 'InlineCode',\n})\n\n/// Keymap for the inlineCode mark.\n/// - `Mod-e` - Toggle the inlineCode mark.\nexport const inlineCodeKeymap = $useKeymap('inlineCodeKeymap', {\n  ToggleInlineCode: {\n    shortcuts: 'Mod-e',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(toggleInlineCodeCommand.key)\n    },\n  },\n})\n\nwithMeta(inlineCodeKeymap.ctx, {\n  displayName: 'KeymapCtx<inlineCode>',\n  group: 'InlineCode',\n})\n\nwithMeta(inlineCodeKeymap.shortcuts, {\n  displayName: 'Keymap<inlineCode>',\n  group: 'InlineCode',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { toggleMark } from '@milkdown/prose/commands'\nimport type { Node as ProseNode } from '@milkdown/prose/model'\nimport { TextSelection } from '@milkdown/prose/state'\nimport { $command, $markAttr, $markSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the link mark.\nexport const linkAttr = $markAttr('link')\n\nwithMeta(linkAttr, {\n  displayName: 'Attr<link>',\n  group: 'Link',\n})\n\n/// Link mark schema.\nexport const linkSchema = $markSchema('link', ctx => ({\n  attrs: {\n    href: {},\n    title: { default: null },\n  },\n  parseDOM: [\n    {\n      tag: 'a[href]',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement))\n          throw expectDomTypeError(dom)\n\n        return { href: dom.getAttribute('href'), title: dom.getAttribute('title') }\n      },\n    },\n  ],\n  toDOM: mark => ['a', { ...ctx.get(linkAttr.key)(mark), ...mark.attrs }],\n  parseMarkdown: {\n    match: node => node.type === 'link',\n    runner: (state, node, markType) => {\n      const url = node.url as string\n      const title = node.title as string\n      state.openMark(markType, { href: url, title })\n      state.next(node.children)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'link',\n    runner: (state, mark) => {\n      state.withMark(mark, 'link', undefined, {\n        title: mark.attrs.title,\n        url: mark.attrs.href,\n      })\n    },\n  },\n}))\n\nwithMeta(linkSchema.mark, {\n  displayName: 'MarkSchema<link>',\n  group: 'Link',\n})\n\n/// @internal\nexport type UpdateLinkCommandPayload = {\n  href?: string\n  title?: string\n}\n/// A command to toggle the link mark.\n/// You can pass the `href` and `title` to the link.\nexport const toggleLinkCommand = $command('ToggleLink', () => (payload: UpdateLinkCommandPayload = {}) => toggleMark(linkSchema.type(), payload))\n\nwithMeta(toggleLinkCommand, {\n  displayName: 'Command<toggleLinkCommand>',\n  group: 'Link',\n})\n\n/// A command to update the link mark.\n/// You can pass the `href` and `title` to update the link.\nexport const updateLinkCommand = $command('UpdateLink', () => (payload: UpdateLinkCommandPayload = {}) => (state, dispatch) => {\n  if (!dispatch)\n    return false\n\n  let node: ProseNode | undefined\n  let pos = -1\n  const { selection } = state\n  const { from, to } = selection\n  state.doc.nodesBetween(from, from === to ? to + 1 : to, (n, p) => {\n    if (linkSchema.type().isInSet(n.marks)) {\n      node = n\n      pos = p\n      return false\n    }\n\n    return undefined\n  })\n\n  if (!node)\n    return false\n\n  const mark = node.marks.find(({ type }) => type === linkSchema.type())\n  if (!mark)\n    return false\n\n  const start = pos\n  const end = pos + node.nodeSize\n  const { tr } = state\n  const linkMark = linkSchema.type().create({ ...mark.attrs, ...payload })\n  if (!linkMark)\n    return false\n\n  dispatch(\n    tr\n      .removeMark(start, end, mark)\n      .addMark(start, end, linkMark)\n      .setSelection(new TextSelection(tr.selection.$anchor))\n      .scrollIntoView(),\n  )\n\n  return true\n})\n\nwithMeta(updateLinkCommand, {\n  displayName: 'Command<updateLinkCommand>',\n  group: 'Link',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $node } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// The top-level document node.\nexport const docSchema = $node('doc', () => ({\n  content: 'block+',\n  parseMarkdown: {\n    match: ({ type }) => type === 'root',\n    runner: (state, node, type) => {\n      state.injectRoot(node, type)\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'doc',\n    runner: (state, node) => {\n      state.openNode('root')\n      state.next(node.content)\n    },\n  },\n}))\n\nwithMeta(docSchema, {\n  displayName: 'NodeSchema<doc>',\n  group: 'Doc',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { $command, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { serializeText, withMeta } from '../__internal__'\n\n/// HTML attributes for paragraph node.\nexport const paragraphAttr = $nodeAttr('paragraph')\n\nwithMeta(paragraphAttr, {\n  displayName: 'Attr<paragraph>',\n  group: 'Paragraph',\n})\n\n/// Schema for paragraph node.\nexport const paragraphSchema = $nodeSchema('paragraph', ctx => ({\n  content: 'inline*',\n  group: 'block',\n  parseDOM: [{ tag: 'p' }],\n  toDOM: node => ['p', ctx.get(paragraphAttr.key)(node), 0],\n  parseMarkdown: {\n    match: node => node.type === 'paragraph',\n    runner: (state, node, type) => {\n      state.openNode(type)\n      if (node.children)\n        state.next(node.children)\n\n      else\n        state.addText((node.value || '') as string)\n\n      state.closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'paragraph',\n    runner: (state, node) => {\n      state.openNode('paragraph')\n      serializeText(state, node)\n      state.closeNode()\n    },\n  },\n}))\n\nwithMeta(paragraphSchema.node, {\n  displayName: 'NodeSchema<paragraph>',\n  group: 'Paragraph',\n})\nwithMeta(paragraphSchema.ctx, {\n  displayName: 'NodeSchemaCtx<paragraph>',\n  group: 'Paragraph',\n})\n\n/// This command can turn the selected block into paragraph.\nexport const turnIntoTextCommand = $command('TurnIntoText', () => () => setBlockType(paragraphSchema.type()))\n\nwithMeta(turnIntoTextCommand, {\n  displayName: 'Command<turnIntoTextCommand>',\n  group: 'Paragraph',\n})\n\n/// Keymap for paragraph node.\n/// - `<Mod-Alt-0>`: Turn the selected block into paragraph.\nexport const paragraphKeymap = $useKeymap('paragraphKeymap', {\n  TurnIntoText: {\n    shortcuts: 'Mod-Alt-0',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(turnIntoTextCommand.key)\n    },\n  },\n})\n\nwithMeta(paragraphKeymap.ctx, {\n  displayName: 'KeymapCtx<paragraph>',\n  group: 'Paragraph',\n})\n\nwithMeta(paragraphKeymap.shortcuts, {\n  displayName: 'Keymap<paragraph>',\n  group: 'Paragraph',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, editorViewCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { textblockTypeInputRule } from '@milkdown/prose/inputrules'\nimport type { Node } from '@milkdown/prose/model'\nimport { $command, $ctx, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport slugify from '@sindresorhus/slugify'\nimport { serializeText, withMeta } from '../__internal__'\nimport { paragraphSchema } from './paragraph'\n\nconst headingIndex = Array(6)\n  .fill(0)\n  .map((_, i) => i + 1)\n\nconst defaultHeadingIdGenerator = (node: Node) =>\n  slugify(node.textContent)\n\n/// This is a slice contains a function to generate heading id.\n/// You can configure it to generate id in your own way.\nexport const headingIdGenerator = $ctx(defaultHeadingIdGenerator, 'headingIdGenerator')\n\nwithMeta(headingIdGenerator, {\n  displayName: 'Ctx<HeadingIdGenerator>',\n  group: 'Heading',\n})\n\n/// HTML attributes for heading node.\nexport const headingAttr = $nodeAttr('heading')\n\nwithMeta(headingAttr, {\n  displayName: 'Attr<heading>',\n  group: 'Heading',\n})\n\n/// Schema for heading node.\nexport const headingSchema = $nodeSchema('heading', (ctx) => {\n  const getId = ctx.get(headingIdGenerator.key)\n  return {\n    content: 'inline*',\n    group: 'block',\n    defining: true,\n    attrs: {\n      id: {\n        default: '',\n      },\n      level: {\n        default: 1,\n      },\n    },\n    parseDOM: headingIndex.map(x => ({\n      tag: `h${x}`,\n      getAttrs: (node) => {\n        if (!(node instanceof HTMLElement))\n          throw expectDomTypeError(node)\n\n        return { level: x, id: node.id }\n      },\n    })),\n    toDOM: (node) => {\n      return [\n        `h${node.attrs.level}`,\n        {\n          ...ctx.get(headingAttr.key)(node),\n          id: node.attrs.id || getId(node),\n        },\n        0,\n      ]\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === 'heading',\n      runner: (state, node, type) => {\n        const depth = node.depth as number\n        state.openNode(type, { level: depth })\n        state.next(node.children)\n        state.closeNode()\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'heading',\n      runner: (state, node) => {\n        state.openNode('heading', undefined, { depth: node.attrs.level })\n        serializeText(state, node)\n        state.closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(headingSchema.node, {\n  displayName: 'NodeSchema<heading>',\n  group: 'Heading',\n})\n\nwithMeta(headingSchema.ctx, {\n  displayName: 'NodeSchemaCtx<heading>',\n  group: 'Heading',\n})\n\n/// This input rule can turn the selected block into heading.\n/// You can input numbers of `#` and a `space` to create heading.\nexport const wrapInHeadingInputRule = $inputRule((ctx) => {\n  return textblockTypeInputRule(/^(?<hashes>#+)\\s$/, headingSchema.type(), (match) => {\n    const x = match.groups?.hashes?.length || 0\n\n    const view = ctx.get(editorViewCtx)\n    const { $from } = view.state.selection\n    const node = $from.node()\n    if (node.type.name === 'heading') {\n      let level = Number(node.attrs.level) + Number(x)\n      if (level > 6)\n        level = 6\n\n      return { level }\n    }\n    return { level: x }\n  })\n})\n\nwithMeta(wrapInHeadingInputRule, {\n  displayName: 'InputRule<wrapInHeadingInputRule>',\n  group: 'Heading',\n})\n\n/// This command can turn the selected block into heading.\n/// You can pass the level of heading to this command.\n/// By default, the level is 1, which means it will create a `h1` element.\nexport const wrapInHeadingCommand = $command('WrapInHeading', () => {\n  return (level?: number) => {\n    level ??= 1\n\n    if (level < 1)\n      return setBlockType(paragraphSchema.type())\n\n    return setBlockType(headingSchema.type(), { level })\n  }\n})\n\nwithMeta(wrapInHeadingCommand, {\n  displayName: 'Command<wrapInHeadingCommand>',\n  group: 'Heading',\n})\n\n/// This command can downgrade the selected heading.\n/// For example, if you have a `h2` element, and you call this command, you will get a `h1` element.\n/// If the element is already a `h1` element, it will turn it into a `p` element.\nexport const downgradeHeadingCommand = $command('DowngradeHeading', () => () =>\n  (state, dispatch, view) => {\n    const { $from } = state.selection\n    const node = $from.node()\n    if (node.type !== headingSchema.type() || !state.selection.empty || $from.parentOffset !== 0)\n      return false\n\n    const level = node.attrs.level - 1\n    if (!level)\n      return setBlockType(paragraphSchema.type())(state, dispatch, view)\n\n    dispatch?.(\n      state.tr.setNodeMarkup(state.selection.$from.before(), undefined, {\n        ...node.attrs,\n        level,\n      }),\n    )\n    return true\n  })\n\nwithMeta(downgradeHeadingCommand, {\n  displayName: 'Command<downgradeHeadingCommand>',\n  group: 'Heading',\n})\n\n/// Keymap for heading node.\n/// - `<Mod-Alt-{1-6}>`: Turn the selected block into `h{1-6}` element.\n/// - `<Delete>/<Backspace>`: Downgrade the selected heading.\nexport const headingKeymap = $useKeymap('headingKeymap', {\n  TurnIntoH1: {\n    shortcuts: 'Mod-Alt-1',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 1)\n    },\n  },\n  TurnIntoH2: {\n    shortcuts: 'Mod-Alt-2',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 2)\n    },\n  },\n  TurnIntoH3: {\n    shortcuts: 'Mod-Alt-3',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  TurnIntoH4: {\n    shortcuts: 'Mod-Alt-4',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  TurnIntoH5: {\n    shortcuts: 'Mod-Alt-5',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  TurnIntoH6: {\n    shortcuts: 'Mod-Alt-6',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  DowngradeHeading: {\n    shortcuts: ['Delete', 'Backspace'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(downgradeHeadingCommand.key)\n    },\n  },\n})\n\nwithMeta(headingKeymap.ctx, {\n  displayName: 'KeymapCtx<heading>',\n  group: 'Heading',\n})\n\nwithMeta(headingKeymap.shortcuts, {\n  displayName: 'Keymap<heading>',\n  group: 'Heading',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { wrapIn } from '@milkdown/prose/commands'\nimport { wrappingInputRule } from '@milkdown/prose/inputrules'\nimport type { $NodeSchema } from '@milkdown/utils'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for blockquote node.\nexport const blockquoteAttr = $nodeAttr('blockquote')\n\nwithMeta(blockquoteAttr, {\n  displayName: 'Attr<blockquote>',\n  group: 'Blockquote',\n})\n\n/// Schema for blockquote node.\nexport const blockquoteSchema: $NodeSchema<'blockquote'> = $nodeSchema('blockquote', ctx => ({\n  content: 'block+',\n  group: 'block',\n  defining: true,\n  parseDOM: [{ tag: 'blockquote' }],\n  toDOM: node => ['blockquote', ctx.get(blockquoteAttr.key)(node), 0],\n  parseMarkdown: {\n    match: ({ type }) => type === 'blockquote',\n    runner: (state, node, type) => {\n      state.openNode(type).next(node.children).closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'blockquote',\n    runner: (state, node) => {\n      state.openNode('blockquote').next(node.content).closeNode()\n    },\n  },\n}))\n\nwithMeta(blockquoteSchema.node, {\n  displayName: 'NodeSchema<blockquote>',\n  group: 'Blockquote',\n})\n\nwithMeta(blockquoteSchema.ctx, {\n  displayName: 'NodeSchemaCtx<blockquote>',\n  group: 'Blockquote',\n})\n\n/// This input rule will convert a line that starts with `> ` into a blockquote.\n/// You can type `> ` at the start of a line to create a blockquote.\nexport const wrapInBlockquoteInputRule = $inputRule(() => wrappingInputRule(/^\\s*>\\s$/, blockquoteSchema.type()))\n\nwithMeta(wrapInBlockquoteInputRule, {\n  displayName: 'InputRule<wrapInBlockquoteInputRule>',\n  group: 'Blockquote',\n})\n\n/// This command will wrap the current selection in a blockquote.\nexport const wrapInBlockquoteCommand = $command('WrapInBlockquote', () => () => wrapIn(blockquoteSchema.type()))\n\nwithMeta(wrapInBlockquoteCommand, {\n  displayName: 'Command<wrapInBlockquoteCommand>',\n  group: 'Blockquote',\n})\n\n/// Keymap for blockquote.\n/// - `Mod-Shift-b`: Wrap selection in blockquote.\nexport const blockquoteKeymap = $useKeymap('blockquoteKeymap', {\n  WrapInBlockquote: {\n    shortcuts: 'Mod-Shift-b',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInBlockquoteCommand.key)\n    },\n  },\n})\n\nwithMeta(blockquoteKeymap.ctx, {\n  displayName: 'KeymapCtx<blockquote>',\n  group: 'Blockquote',\n})\n\nwithMeta(blockquoteKeymap.shortcuts, {\n  displayName: 'Keymap<blockquote>',\n  group: 'Blockquote',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { textblockTypeInputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for code block node.\nexport const codeBlockAttr = $nodeAttr('codeBlock', () => ({\n  pre: {},\n  code: {},\n}))\n\nwithMeta(codeBlockAttr, {\n  displayName: 'Attr<codeBlock>',\n  group: 'CodeBlock',\n})\n\n/// Schema for code block node.\nexport const codeBlockSchema = $nodeSchema('code_block', (ctx) => {\n  return {\n    content: 'text*',\n    group: 'block',\n    marks: '',\n    defining: true,\n    code: true,\n    attrs: {\n      language: {\n        default: '',\n      },\n    },\n    parseDOM: [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return { language: dom.dataset.language }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      const attr = ctx.get(codeBlockAttr.key)(node)\n      return [\n        'pre',\n        {\n          ...attr.pre,\n          'data-language': node.attrs.language,\n        },\n        ['code', attr.code, 0],\n      ]\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === 'code',\n      runner: (state, node, type) => {\n        const language = node.lang as string\n        const value = node.value as string\n        state.openNode(type, { language })\n        if (value)\n          state.addText(value)\n\n        state.closeNode()\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'code_block',\n      runner: (state, node) => {\n        state.addNode('code', undefined, node.content.firstChild?.text || '', {\n          lang: node.attrs.language,\n        })\n      },\n    },\n  }\n})\n\nwithMeta(codeBlockSchema.node, {\n  displayName: 'NodeSchema<codeBlock>',\n  group: 'CodeBlock',\n})\n\nwithMeta(codeBlockSchema.ctx, {\n  displayName: 'NodeSchemaCtx<codeBlock>',\n  group: 'CodeBlock',\n})\n\n/// A input rule for creating code block.\n/// For example, ` ```javascript ` will create a code block with language javascript.\nexport const createCodeBlockInputRule = $inputRule(() => textblockTypeInputRule(/^```(?<language>[a-z]*)?[\\s\\n]$/, codeBlockSchema.type(), match => ({\n  language: match.groups?.language ?? '',\n})))\n\nwithMeta(createCodeBlockInputRule, {\n  displayName: 'InputRule<createCodeBlockInputRule>',\n  group: 'CodeBlock',\n})\n\n/// A command for creating code block.\n/// You can pass the language of the code block as the parameter.\nexport const createCodeBlockCommand = $command('CreateCodeBlock', () => (language = '') => setBlockType(codeBlockSchema.type(), { language }))\n\nwithMeta(createCodeBlockCommand, {\n  displayName: 'Command<createCodeBlockCommand>',\n  group: 'CodeBlock',\n})\n\n/// A command for updating the code block language of the target position.\nexport const updateCodeBlockLanguageCommand = $command('UpdateCodeBlockLanguage', () => ({ pos, language }: { pos: number; language: string } = { pos: -1, language: '' }) => (state, dispatch) => {\n  if (pos >= 0) {\n    dispatch?.(state.tr.setNodeAttribute(pos, 'language', language))\n    return true\n  }\n\n  return false\n})\n\nwithMeta(updateCodeBlockLanguageCommand, {\n  displayName: 'Command<updateCodeBlockLanguageCommand>',\n  group: 'CodeBlock',\n})\n\n/// Keymap for code block.\n/// - `Mod-Alt-c`: Create a code block.\nexport const codeBlockKeymap = $useKeymap('codeBlockKeymap', {\n  CreateCodeBlock: {\n    shortcuts: 'Mod-Alt-c',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(createCodeBlockCommand.key)\n    },\n  },\n})\n\nwithMeta(codeBlockKeymap.ctx, {\n  displayName: 'KeymapCtx<codeBlock>',\n  group: 'CodeBlock',\n})\n\nwithMeta(codeBlockKeymap.shortcuts, {\n  displayName: 'Keymap<codeBlock>',\n  group: 'CodeBlock',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { findSelectedNodeOfType } from '@milkdown/prose'\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for image node.\nexport const imageAttr = $nodeAttr('image')\n\nwithMeta(imageAttr, {\n  displayName: 'Attr<image>',\n  group: 'Image',\n})\n\n/// Schema for image node.\nexport const imageSchema = $nodeSchema('image', (ctx) => {\n  return {\n    inline: true,\n    group: 'inline',\n    selectable: true,\n    draggable: true,\n    marks: '',\n    atom: true,\n    defining: true,\n    isolating: true,\n    attrs: {\n      src: { default: '' },\n      alt: { default: '' },\n      title: { default: '' },\n    },\n    parseDOM: [\n      {\n        tag: 'img[src]',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            src: dom.getAttribute('src') || '',\n            alt: dom.getAttribute('alt') || '',\n            title: dom.getAttribute('title') || dom.getAttribute('alt') || '',\n          }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      return ['img', { ...ctx.get(imageAttr.key)(node), ...node.attrs }]\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === 'image',\n      runner: (state, node, type) => {\n        const url = node.url as string\n        const alt = node.alt as string\n        const title = node.title as string\n        state.addNode(type, {\n          src: url,\n          alt,\n          title,\n        })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'image',\n      runner: (state, node) => {\n        state.addNode('image', undefined, undefined, {\n          title: node.attrs.title,\n          url: node.attrs.src,\n          alt: node.attrs.alt,\n        })\n      },\n    },\n  }\n})\n\nwithMeta(imageSchema.node, {\n  displayName: 'NodeSchema<image>',\n  group: 'Image',\n})\n\nwithMeta(imageSchema.ctx, {\n  displayName: 'NodeSchemaCtx<image>',\n  group: 'Image',\n})\n\n/// @internal\nexport type UpdateImageCommandPayload = {\n  src?: string\n  title?: string\n  alt?: string\n}\n\n/// This command will insert a image node.\n/// You can pass a payload to set `src`, `alt` and `title` for the image node.\nexport const insertImageCommand = $command('InsertImage', () => (payload: UpdateImageCommandPayload = {}) =>\n  (state, dispatch) => {\n    if (!dispatch)\n      return true\n\n    const { src = '', alt = '', title = '' } = payload\n\n    const node = imageSchema.type().create({ src, alt, title })\n    if (!node)\n      return true\n\n    dispatch(state.tr.replaceSelectionWith(node).scrollIntoView())\n    return true\n  })\n\nwithMeta(insertImageCommand, {\n  displayName: 'Command<insertImageCommand>',\n  group: 'Image',\n})\n\n/// This command will update the selected image node.\n/// You can pass a payload to update `src`, `alt` and `title` for the image node.\nexport const updateImageCommand = $command('UpdateImage', () => (payload: UpdateImageCommandPayload = {}) => (state, dispatch) => {\n  const nodeWithPos = findSelectedNodeOfType(state.selection, imageSchema.type())\n  if (!nodeWithPos)\n    return false\n\n  const { node, pos } = nodeWithPos\n\n  const newAttrs = { ...node.attrs }\n  const { src, alt, title } = payload\n  if (src !== undefined)\n    newAttrs.src = src\n  if (alt !== undefined)\n    newAttrs.alt = alt\n  if (title !== undefined)\n    newAttrs.title = title\n\n  dispatch?.(state.tr.setNodeMarkup(pos, undefined, newAttrs).scrollIntoView())\n  return true\n})\n\nwithMeta(updateImageCommand, {\n  displayName: 'Command<updateImageCommand>',\n  group: 'Image',\n})\n\n/// This input rule will insert a image node.\n/// You can input `![alt](src \"title\")` to insert a image node.\n/// The `title` is optional.\nexport const insertImageInputRule = $inputRule(() => new InputRule(\n  /!\\[(?<alt>.*?)]\\((?<filename>.*?)\\s*(?=\"|\\))\"?(?<title>[^\"]+)?\"?\\)/,\n  (state, match, start, end) => {\n    const [matched, alt, src = '', title] = match\n    if (matched)\n      return state.tr.replaceWith(start, end, imageSchema.type().create({ src, alt, title }))\n\n    return null\n  },\n))\n\nwithMeta(insertImageInputRule, {\n  displayName: 'InputRule<insertImageInputRule>',\n  group: 'Image',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { Selection } from '@milkdown/prose/state'\nimport { $command, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the hardbreak node.\n///\n/// Default value:\n/// - `data-is-inline` - Whether the hardbreak is inline.\nexport const hardbreakAttr = $nodeAttr('hardbreak', (node) => {\n  return {\n    'data-is-inline': node.attrs.isInline,\n  }\n})\n\nwithMeta(hardbreakAttr, {\n  displayName: 'Attr<hardbreak>',\n  group: 'Hardbreak',\n})\n\n/// Hardbreak node schema.\nexport const hardbreakSchema = $nodeSchema('hardbreak', ctx => ({\n  inline: true,\n  group: 'inline',\n  attrs: {\n    isInline: {\n      default: false,\n    },\n  },\n  selectable: false,\n  parseDOM: [{ tag: 'br' }],\n  toDOM: node => ['br', ctx.get(hardbreakAttr.key)(node)],\n  parseMarkdown: {\n    match: ({ type }) => type === 'break',\n    runner: (state, node, type) => {\n      state.addNode(type, { isInline: Boolean(node.data?.isInline) })\n    },\n  },\n  leafText: () => '\\n',\n  toMarkdown: {\n    match: node => node.type.name === 'hardbreak',\n    runner: (state, node) => {\n      if (node.attrs.isInline)\n        state.addNode('text', undefined, '\\n')\n\n      else\n        state.addNode('break')\n    },\n  },\n}))\n\nwithMeta(hardbreakSchema.node, {\n  displayName: 'NodeSchema<hardbreak>',\n  group: 'Hardbreak',\n})\n\nwithMeta(hardbreakSchema.ctx, {\n  displayName: 'NodeSchemaCtx<hardbreak>',\n  group: 'Hardbreak',\n})\n\n/// Command to insert a hardbreak.\nexport const insertHardbreakCommand = $command('InsertHardbreak', () => () => (state, dispatch) => {\n  const { selection, tr } = state\n  if (selection.empty) {\n    // Transform two successive hardbreak into a new line\n    const node = selection.$from.node()\n    if (node.childCount > 0 && node.lastChild?.type.name === 'hardbreak') {\n      dispatch?.(\n        tr\n          .replaceRangeWith(selection.to - 1, selection.to, state.schema.node('paragraph'))\n          .setSelection(Selection.near(tr.doc.resolve(selection.to)))\n          .scrollIntoView(),\n      )\n      return true\n    }\n  }\n  dispatch?.(tr.setMeta('hardbreak', true).replaceSelectionWith(hardbreakSchema.type().create()).scrollIntoView())\n  return true\n})\n\nwithMeta(insertHardbreakCommand, {\n  displayName: 'Command<insertHardbreakCommand>',\n  group: 'Hardbreak',\n})\n\n/// Keymap for the hardbreak node.\n/// - `Shift-Enter` - Insert a hardbreak.\nexport const hardbreakKeymap = $useKeymap('hardbreakKeymap', {\n  InsertHardbreak: {\n    shortcuts: 'Shift-Enter',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(insertHardbreakCommand.key)\n    },\n  },\n})\n\nwithMeta(hardbreakKeymap.ctx, {\n  displayName: 'KeymapCtx<hardbreak>',\n  group: 'Hardbreak',\n})\n\nwithMeta(hardbreakKeymap.shortcuts, {\n  displayName: 'Keymap<hardbreak>',\n  group: 'Hardbreak',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { Selection } from '@milkdown/prose/state'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\nimport { paragraphSchema } from './paragraph'\n\n/// HTML attributes for the hr node.\nexport const hrAttr = $nodeAttr('hr')\n\nwithMeta(hrAttr, {\n  displayName: 'Attr<hr>',\n  group: 'Hr',\n})\n\n/// Hr node schema.\nexport const hrSchema = $nodeSchema('hr', ctx => ({\n  group: 'block',\n  parseDOM: [{ tag: 'hr' }],\n  toDOM: node => ['hr', ctx.get(hrAttr.key)(node)],\n  parseMarkdown: {\n    match: ({ type }) => type === 'thematicBreak',\n    runner: (state, _, type) => {\n      state.addNode(type)\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'hr',\n    runner: (state) => {\n      state.addNode('thematicBreak')\n    },\n  },\n}))\n\nwithMeta(hrSchema.node, {\n  displayName: 'NodeSchema<hr>',\n  group: 'Hr',\n})\n\nwithMeta(hrSchema.ctx, {\n  displayName: 'NodeSchemaCtx<hr>',\n  group: 'Hr',\n})\n\n/// Input rule to insert a hr.\n/// For example, `---` will be converted to a hr.\nexport const insertHrInputRule = $inputRule(() => new InputRule(\n  /^(?:---|___\\s|\\*\\*\\*\\s)$/, (state, match, start, end) => {\n    const { tr } = state\n\n    if (match[0])\n      tr.replaceWith(start - 1, end, hrSchema.type().create())\n\n    return tr\n  },\n))\n\nwithMeta(insertHrInputRule, {\n  displayName: 'InputRule<insertHrInputRule>',\n  group: 'Hr',\n})\n\n/// Command to insert a hr.\nexport const insertHrCommand = $command('InsertHr', () => () => (state, dispatch) => {\n  if (!dispatch)\n    return true\n\n  const paragraph = paragraphSchema.node.type().create()\n  const { tr, selection } = state\n  const { from } = selection\n  const node = hrSchema.type().create()\n  if (!node)\n    return true\n\n  const _tr = tr.replaceSelectionWith(node).insert(from, paragraph)\n  const sel = Selection.findFrom(_tr.doc.resolve(from), 1, true)\n  if (!sel)\n    return true\n\n  dispatch(_tr.setSelection(sel).scrollIntoView())\n  return true\n})\n\nwithMeta(insertHrCommand, {\n  displayName: 'Command<insertHrCommand>',\n  group: 'Hr',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { wrapIn } from '@milkdown/prose/commands'\nimport { wrappingInputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for bullet list node.\nexport const bulletListAttr = $nodeAttr('bulletList')\n\nwithMeta(bulletListAttr, {\n  displayName: 'Attr<bulletList>',\n  group: 'BulletList',\n})\n\n/// Schema for bullet list node.\nexport const bulletListSchema = $nodeSchema('bullet_list', (ctx) => {\n  return {\n    content: 'listItem+',\n    group: 'block',\n    attrs: {\n      spread: {\n        default: false,\n      },\n    },\n    parseDOM: [\n      {\n        tag: 'ul',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            spread: dom.dataset.spread,\n          }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      return [\n        'ul',\n        {\n          ...ctx.get(bulletListAttr.key)(node),\n          'data-spread': node.attrs.spread,\n        },\n        0,\n      ]\n    },\n    parseMarkdown: {\n      match: ({ type, ordered }) => type === 'list' && !ordered,\n      runner: (state, node, type) => {\n        const spread = node.spread != null ? `${node.spread}` : 'false'\n        state.openNode(type, { spread }).next(node.children).closeNode()\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'bullet_list',\n      runner: (state, node) => {\n        state\n          .openNode('list', undefined, { ordered: false, spread: node.attrs.spread === 'true' })\n          .next(node.content)\n          .closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(bulletListSchema.node, {\n  displayName: 'NodeSchema<bulletList>',\n  group: 'BulletList',\n})\n\nwithMeta(bulletListSchema.ctx, {\n  displayName: 'NodeSchemaCtx<bulletList>',\n  group: 'BulletList',\n})\n\n/// Input rule for wrapping a block in bullet list node.\nexport const wrapInBulletListInputRule = $inputRule(() => wrappingInputRule(/^\\s*([-+*])\\s$/, bulletListSchema.type()))\n\nwithMeta(wrapInBulletListInputRule, {\n  displayName: 'InputRule<wrapInBulletListInputRule>',\n  group: 'BulletList',\n})\n\n/// Command for creating bullet list node.\nexport const wrapInBulletListCommand = $command('WrapInBulletList', () => () => wrapIn(bulletListSchema.type()))\n\nwithMeta(wrapInBulletListCommand, {\n  displayName: 'Command<wrapInBulletListCommand>',\n  group: 'BulletList',\n})\n\n/// Keymap for bullet list node.\n/// - `Mod-Alt-8`: Wrap a block in bullet list.\nexport const bulletListKeymap = $useKeymap('bulletListKeymap', {\n  WrapInBulletList: {\n    shortcuts: 'Mod-Alt-8',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInBulletListCommand.key)\n    },\n  },\n})\n\nwithMeta(bulletListKeymap.ctx, {\n  displayName: 'KeymapCtx<bulletListKeymap>',\n  group: 'BulletList',\n})\n\nwithMeta(bulletListKeymap.shortcuts, {\n  displayName: 'Keymap<bulletListKeymap>',\n  group: 'BulletList',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { wrapIn } from '@milkdown/prose/commands'\nimport { wrappingInputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for ordered list node.\nexport const orderedListAttr = $nodeAttr('orderedList')\n\nwithMeta(orderedListAttr, {\n  displayName: 'Attr<orderedList>',\n  group: 'OrderedList',\n})\n\n/// Schema for ordered list node.\nexport const orderedListSchema = $nodeSchema('ordered_list', ctx => ({\n  content: 'listItem+',\n  group: 'block',\n  attrs: {\n    order: {\n      default: 1,\n    },\n    spread: {\n      default: false,\n    },\n  },\n  parseDOM: [\n    {\n      tag: 'ol',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement))\n          throw expectDomTypeError(dom)\n\n        return {\n          spread: dom.dataset.spread,\n          order: dom.hasAttribute('start') ? Number(dom.getAttribute('start')) : 1,\n        }\n      },\n    },\n  ],\n  toDOM: node => [\n    'ol',\n    {\n      ...ctx.get(orderedListAttr.key)(node),\n      ...(node.attrs.order === 1 ? {} : node.attrs.order),\n      'data-spread': node.attrs.spread,\n    },\n    0,\n  ],\n  parseMarkdown: {\n    match: ({ type, ordered }) => type === 'list' && !!ordered,\n    runner: (state, node, type) => {\n      const spread = node.spread != null ? `${node.spread}` : 'true'\n      state.openNode(type, { spread }).next(node.children).closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'ordered_list',\n    runner: (state, node) => {\n      state.openNode('list', undefined, { ordered: true, start: 1, spread: node.attrs.spread === 'true' })\n      state.next(node.content)\n      state.closeNode()\n    },\n  },\n}))\n\nwithMeta(orderedListSchema.node, {\n  displayName: 'NodeSchema<orderedList>',\n  group: 'OrderedList',\n})\n\nwithMeta(orderedListSchema.ctx, {\n  displayName: 'NodeSchemaCtx<orderedList>',\n  group: 'OrderedList',\n})\n\n/// Input rule for wrapping a block in ordered list node.\nexport const wrapInOrderedListInputRule = $inputRule(() => wrappingInputRule(\n  /^\\s*(\\d+)\\.\\s$/,\n  orderedListSchema.type(),\n  match => ({ order: Number(match[1]) }),\n  (match, node) => node.childCount + node.attrs.order === Number(match[1]),\n))\n\nwithMeta(wrapInOrderedListInputRule, {\n  displayName: 'InputRule<wrapInOrderedListInputRule>',\n  group: 'OrderedList',\n})\n\n/// Command for wrapping a block in ordered list node.\nexport const wrapInOrderedListCommand = $command('WrapInOrderedList', () => () => wrapIn(orderedListSchema.type()))\n\nwithMeta(wrapInOrderedListCommand, {\n  displayName: 'Command<wrapInOrderedListCommand>',\n  group: 'OrderedList',\n})\n\n/// Keymap for ordered list node.\n/// - `Mod-Alt-7`: Wrap a block in ordered list.\nexport const orderedListKeymap = $useKeymap('orderedListKeymap', {\n  WrapInOrderedList: {\n    shortcuts: 'Mod-Alt-7',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInOrderedListCommand.key)\n    },\n  },\n})\n\nwithMeta(orderedListKeymap.ctx, {\n  displayName: 'KeymapCtx<orderedList>',\n  group: 'OrderedList',\n})\n\nwithMeta(orderedListKeymap.shortcuts, {\n  displayName: 'Keymap<orderedList>',\n  group: 'OrderedList',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { liftListItem, sinkListItem, splitListItem } from '@milkdown/prose/schema-list'\nimport { $command, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { type Command, TextSelection } from '@milkdown/prose/state'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for list item node.\nexport const listItemAttr = $nodeAttr('listItem')\n\nwithMeta(listItemAttr, {\n  displayName: 'Attr<listItem>',\n  group: 'ListItem',\n})\n\n/// Schema for list item node.\nexport const listItemSchema = $nodeSchema('list_item', ctx => ({\n  group: 'listItem',\n  content: 'paragraph block*',\n  attrs: {\n    label: {\n      default: '•',\n    },\n    listType: {\n      default: 'bullet',\n    },\n    spread: {\n      default: 'true',\n    },\n  },\n  defining: true,\n  parseDOM: [\n    {\n      tag: 'li',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement))\n          throw expectDomTypeError(dom)\n\n        return {\n          label: dom.dataset.label,\n          listType: dom.dataset['list-type'],\n          spread: dom.dataset.spread,\n        }\n      },\n    },\n  ],\n  toDOM: node => [\n    'li',\n    {\n      ...ctx.get(listItemAttr.key)(node),\n      'data-label': node.attrs.label,\n      'data-list-type': node.attrs.listType,\n      'data-spread': node.attrs.spread,\n    },\n    0,\n  ],\n  parseMarkdown: {\n    match: ({ type }) => type === 'listItem',\n    runner: (state, node, type) => {\n      const label = node.label != null ? `${node.label}.` : '•'\n      const listType = node.label != null ? 'ordered' : 'bullet'\n      const spread = node.spread != null ? `${node.spread}` : 'true'\n      state.openNode(type, { label, listType, spread })\n      state.next(node.children)\n      state.closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'list_item',\n    runner: (state, node) => {\n      state.openNode('listItem', undefined, { spread: node.attrs.spread === 'true' })\n      state.next(node.content)\n      state.closeNode()\n    },\n  },\n}))\n\nwithMeta(listItemSchema.node, {\n  displayName: 'NodeSchema<listItem>',\n  group: 'ListItem',\n})\n\nwithMeta(listItemSchema.ctx, {\n  displayName: 'NodeSchemaCtx<listItem>',\n  group: 'ListItem',\n})\n\n/// The command to sink list item.\n///\n/// For example:\n/// ```md\n/// * List item 1\n/// * List item 2 <- cursor here\n/// ```\n/// Will get:\n/// ```md\n/// * List item 1\n///   * List item 2\n/// ```\nexport const sinkListItemCommand = $command('SinkListItem', () => () => sinkListItem(listItemSchema.type()))\n\nwithMeta(sinkListItemCommand, {\n  displayName: 'Command<sinkListItemCommand>',\n  group: 'ListItem',\n})\n\n/// The command to lift list item.\n///\n/// For example:\n/// ```md\n/// * List item 1\n///   * List item 2 <- cursor here\n/// ```\n/// Will get:\n/// ```md\n/// * List item 1\n/// * List item 2\n/// ```\nexport const liftListItemCommand = $command('SplitListItem', () => () => liftListItem(listItemSchema.type()))\n\nwithMeta(liftListItemCommand, {\n  displayName: 'Command<liftListItemCommand>',\n  group: 'ListItem',\n})\n\n/// The command to split a list item.\n///\n/// For example:\n/// ```md\n/// * List item 1\n/// * List item 2 <- cursor here\n/// ```\n/// Will get:\n/// ```md\n/// * List item 1\n/// * List item 2\n/// * <- cursor here\n/// ```\nexport const splitListItemCommand = $command('SplitListItem', () => () => splitListItem(listItemSchema.type()))\n\nwithMeta(splitListItemCommand, {\n  displayName: 'Command<splitListItemCommand>',\n  group: 'ListItem',\n})\n\nconst liftFirstListItem: Command = (state, dispatch, view) => {\n  const { selection } = state\n  if (!(selection instanceof TextSelection))\n    return false\n\n  const { empty, $from } = selection\n\n  // selection should be empty and at the start of the node\n  if (!empty || $from.parentOffset !== 0)\n    return false\n\n  const parentItem = $from.node(-1)\n  // selection should be in list item and list item should be the first child of the list\n  if (parentItem.type !== listItemSchema.type() || parentItem.firstChild !== $from.node())\n    return false\n\n  const list = $from.node(-2)\n  // list should have only one list item\n  if (list.childCount > 1)\n    return false\n\n  return liftListItem(listItemSchema.type())(state, dispatch, view)\n}\n\n/// The command to remove list item **only if**:\n///\n/// - Selection is at the start of the list item.\n/// - List item is the only child of the list.\n///\n/// Most of the time, you shouldn't use this command directly.\nexport const liftFirstListItemCommand = $command('LiftFirstListItem', () => () => liftFirstListItem)\n\nwithMeta(liftFirstListItemCommand, {\n  displayName: 'Command<liftFirstListItemCommand>',\n  group: 'ListItem',\n})\n\n/// Keymap for list item node.\n/// - `<Enter>`: Split the current list item.\n/// - `<Tab>/<Mod-]>`: Sink the current list item.\n/// - `<Shift-Tab>/<Mod-[>`: Lift the current list item.\nexport const listItemKeymap = $useKeymap('listItemKeymap', {\n  NextListItem: {\n    shortcuts: 'Enter',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(splitListItemCommand.key)\n    },\n  },\n  SinkListItem: {\n    shortcuts: ['Tab', 'Mod-]'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(sinkListItemCommand.key)\n    },\n  },\n  LiftListItem: {\n    shortcuts: ['Shift-Tab', 'Mod-['],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(liftListItemCommand.key)\n    },\n  },\n  LiftFirstListItem: {\n    shortcuts: ['Backspace', 'Delete'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(liftFirstListItemCommand.key)\n    },\n  },\n})\n\nwithMeta(listItemKeymap.ctx, {\n  displayName: 'KeymapCtx<listItem>',\n  group: 'ListItem',\n})\n\nwithMeta(listItemKeymap.shortcuts, {\n  displayName: 'Keymap<listItem>',\n  group: 'ListItem',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $node } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// The bottom-level node.\nexport const textSchema = $node('text', () => ({\n  group: 'inline',\n  parseMarkdown: {\n    match: ({ type }) => type === 'text',\n    runner: (state, node) => {\n      state.addText(node.value as string)\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'text',\n    runner: (state, node) => {\n      state.addNode('text', undefined, node.text as string)\n    },\n  },\n}))\n\nwithMeta(textSchema, {\n  displayName: 'NodeSchema<text>',\n  group: 'Text',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $nodeAttr, $nodeSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\nexport const htmlAttr = $nodeAttr('html')\n\nwithMeta(htmlAttr, {\n  displayName: 'Attr<html>',\n  group: 'Html',\n})\n\nexport const htmlSchema = $nodeSchema('html', (ctx) => {\n  return {\n    atom: true,\n    group: 'inline',\n    inline: true,\n    attrs: {\n      value: {\n        default: '',\n      },\n    },\n    toDOM: (node) => {\n      const span = document.createElement('span')\n      const attr = {\n        ...ctx.get(htmlAttr.key)(node),\n        'data-value': node.attrs.value,\n        'data-type': 'html',\n      }\n      span.textContent = node.attrs.value\n      return ['span', attr, node.attrs.value]\n    },\n    parseDOM: [{\n      tag: 'span[data-type=\"html\"]',\n      getAttrs: (dom) => {\n        return {\n          value: (dom as HTMLElement).dataset.value ?? '',\n        }\n      },\n    }],\n    parseMarkdown: {\n      match: ({ type }) => Boolean(type === 'html'),\n      runner: (state, node, type) => {\n        state.addNode(type, { value: node.value as string })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'html',\n      runner: (state, node) => {\n        state.addNode('html', undefined, node.attrs.value)\n      },\n    },\n  }\n})\n\nwithMeta(htmlSchema.node, {\n  displayName: 'NodeSchema<html>',\n  group: 'Html',\n})\n\nwithMeta(htmlSchema.ctx, {\n  displayName: 'NodeSchemaCtx<html>',\n  group: 'Html',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { emphasisAttr, emphasisSchema, inlineCodeAttr, inlineCodeSchema, linkAttr, linkSchema, strongAttr, strongSchema } from '../mark'\nimport {\n  blockquoteAttr,\n  blockquoteSchema,\n  bulletListAttr,\n  bulletListSchema,\n  codeBlockAttr,\n  codeBlockSchema,\n  docSchema,\n  hardbreakAttr,\n  hardbreakSchema,\n  headingAttr,\n  headingIdGenerator,\n  headingSchema,\n  hrAttr,\n  hrSchema, htmlAttr,\n  htmlSchema,\n  imageAttr,\n  imageSchema,\n  listItemAttr,\n  listItemSchema,\n  orderedListAttr,\n  orderedListSchema,\n  paragraphAttr,\n  paragraphSchema,\n  textSchema,\n} from '../node'\n\n/// @internal\nexport const schema: MilkdownPlugin[] = [\n  docSchema,\n\n  paragraphAttr,\n  paragraphSchema,\n\n  headingIdGenerator,\n  headingAttr,\n  headingSchema,\n\n  hardbreakAttr,\n  hardbreakSchema,\n\n  blockquoteAttr,\n  blockquoteSchema,\n\n  codeBlockAttr,\n  codeBlockSchema,\n\n  hrAttr,\n  hrSchema,\n\n  imageAttr,\n  imageSchema,\n\n  bulletListAttr,\n  bulletListSchema,\n\n  orderedListAttr,\n  orderedListSchema,\n\n  listItemAttr,\n  listItemSchema,\n\n  emphasisAttr,\n  emphasisSchema,\n\n  strongAttr,\n  strongSchema,\n\n  inlineCodeAttr,\n  inlineCodeSchema,\n\n  linkAttr,\n  linkSchema,\n\n  htmlAttr,\n  htmlSchema,\n\n  textSchema,\n].flat()\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { createCodeBlockInputRule, insertHrInputRule, wrapInBlockquoteInputRule, wrapInBulletListInputRule, wrapInHeadingInputRule, wrapInOrderedListInputRule } from '../node'\n\n/// @internal\nexport const inputrules: MilkdownPlugin[] = [\n  wrapInBlockquoteInputRule,\n  wrapInBulletListInputRule,\n  wrapInOrderedListInputRule,\n  createCodeBlockInputRule,\n  insertHrInputRule,\n  wrapInHeadingInputRule,\n].flat()\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { toggleEmphasisCommand, toggleInlineCodeCommand, toggleLinkCommand, toggleStrongCommand, updateLinkCommand } from '../mark'\nimport {\n  createCodeBlockCommand,\n  downgradeHeadingCommand,\n  insertHardbreakCommand,\n  insertHrCommand,\n  insertImageCommand,\n  liftFirstListItemCommand,\n  liftListItemCommand,\n  sinkListItemCommand,\n  splitListItemCommand,\n  turnIntoTextCommand,\n  updateImageCommand,\n  wrapInBlockquoteCommand,\n  wrapInBulletListCommand,\n  wrapInHeadingCommand,\n  wrapInOrderedListCommand,\n} from '../node'\n\n/// @internal\nexport const commands: MilkdownPlugin[] = [\n  turnIntoTextCommand,\n  wrapInBlockquoteCommand,\n  wrapInHeadingCommand,\n  downgradeHeadingCommand,\n  createCodeBlockCommand,\n  insertHardbreakCommand,\n  insertHrCommand,\n\n  insertImageCommand,\n  updateImageCommand,\n\n  wrapInOrderedListCommand,\n  wrapInBulletListCommand,\n  sinkListItemCommand,\n  splitListItemCommand,\n  liftListItemCommand,\n  liftFirstListItemCommand,\n\n  toggleEmphasisCommand,\n  toggleInlineCodeCommand,\n  toggleStrongCommand,\n\n  toggleLinkCommand,\n  updateLinkCommand,\n]\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { emphasisKeymap, inlineCodeKeymap, strongKeymap } from '../mark'\nimport { blockquoteKeymap, bulletListKeymap, codeBlockKeymap, hardbreakKeymap, headingKeymap, listItemKeymap, orderedListKeymap, paragraphKeymap } from '../node'\n\n/// @internal\nexport const keymap: MilkdownPlugin[] = [\n  blockquoteKeymap,\n  codeBlockKeymap,\n  hardbreakKeymap,\n  headingKeymap,\n  listItemKeymap,\n  orderedListKeymap,\n  bulletListKeymap,\n  paragraphKeymap,\n\n  emphasisKeymap,\n  inlineCodeKeymap,\n  strongKeymap,\n].flat()\n","/* Copyright 2021, Milkdown by Mirone. */\n\nexport const linkRegexp = /\\[([^\\]]+)]\\([^\\s\\]]+\\)/\n\nexport const keepLinkRegexp = /\\[(?<span>((www|https:\\/\\/|http:\\/\\/)[^\\s\\]]+))]\\((?<url>[^\\s\\]]+)\\)/\n\nexport const punctuationRegexp = (holePlaceholder: string) =>\n  new RegExp(`\\\\\\\\(?=[^\\\\w\\\\s${holePlaceholder}\\\\\\\\]|_)`, 'g')\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Node } from '@milkdown/prose/model'\n\nimport type { SyncNodePlaceholder } from './config'\nimport { keepLinkRegexp, punctuationRegexp } from './regexp'\n\nexport const keepLink = (str: string) => {\n  let text = str\n  let match = text.match(keepLinkRegexp)\n  while (match && match.groups) {\n    const { span } = match.groups\n    text = text.replace(keepLinkRegexp, span as string)\n\n    match = text.match(keepLinkRegexp)\n  }\n  return text\n}\n\nexport const swap = (text: string, first: number, last: number) => {\n  const arr = text.split('')\n  const temp = arr[first]\n  if (arr[first] && arr[last]) {\n    arr[first] = arr[last] as string\n    arr[last] = temp as string\n  }\n  return arr.join('').toString()\n}\n\nexport const replacePunctuation = (holePlaceholder: string) => (text: string) =>\n  text.replace(punctuationRegexp(holePlaceholder), '')\n\nexport const calculatePlaceholder = (placeholder: SyncNodePlaceholder) => (text: string) => {\n  const index = text.indexOf(placeholder.hole)\n  const left = text.charAt(index - 1)\n  const right = text.charAt(index + 1)\n  const notAWord = /[^\\w]|_/\n\n  // cursor on the right\n  if (!right)\n    return placeholder.punctuation\n\n  // cursor on the left\n  if (!left)\n    return placeholder.char\n\n  if (notAWord.test(left) && notAWord.test(right))\n    return placeholder.punctuation\n\n  return placeholder.char\n}\n\nexport const calcOffset = (node: Node, from: number, placeholder: string) => {\n  let offset = from\n  let find = false\n  node.descendants((n) => {\n    if (find)\n      return false\n    if (!n.textContent.includes(placeholder)) {\n      offset += n.nodeSize\n      return false\n    }\n    if (n.isText) {\n      const i = n.text?.indexOf(placeholder)\n      if (i != null && i >= 0) {\n        find = true\n        offset += i\n        return false\n      }\n    }\n\n    // enter the node\n    offset += 1\n    return true\n  })\n  return offset\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport type { Node, NodeType } from '@milkdown/prose/model'\nimport type { Transaction } from '@milkdown/prose/state'\nimport { $ctx } from '@milkdown/utils'\n\nimport { withMeta } from '../../__internal__'\nimport { swap } from './utils'\n\n/// @internal\nexport type ShouldSyncNode = (context: {\n  prevNode: Node\n  nextNode: Node\n  ctx: Ctx\n  tr: Transaction\n  text: string\n}) => boolean\n\n/// @internal\nexport interface SyncNodePlaceholder {\n  hole: string\n  punctuation: string\n  char: string\n}\n\n/// @internal\nexport interface InlineSyncConfig {\n  placeholderConfig: SyncNodePlaceholder\n  shouldSyncNode: ShouldSyncNode\n  globalNodes: Array<NodeType | string>\n  movePlaceholder: (placeholderToMove: string, text: string) => string\n}\n\n/// @internal\nexport const defaultConfig: InlineSyncConfig = {\n  placeholderConfig: {\n    hole: '∅',\n    punctuation: '⁂',\n    char: '∴',\n  },\n  globalNodes: ['footnote_definition'],\n  shouldSyncNode: ({ prevNode, nextNode }) =>\n    prevNode.inlineContent\n        && nextNode\n        // if node type changes, do not sync\n        && prevNode.type === nextNode.type\n        // if two node fully equal, we don't modify them\n        && !prevNode.eq(nextNode),\n  movePlaceholder: (placeholderToMove: string, text: string) => {\n    const symbolsNeedToMove = ['*', '_']\n\n    let index = text.indexOf(placeholderToMove)\n    while (symbolsNeedToMove.includes(text[index - 1] || '') && symbolsNeedToMove.includes(text[index + 1] || '')) {\n      text = swap(text, index, index + 1)\n      index = index + 1\n    }\n\n    return text\n  },\n}\n\n/// A slice that contains the inline sync config.\n/// You can set value to this slice to change the config.\n///\n/// ```typescript\n/// ctx.update(inlineSyncConfigCtx, (prevCfg) => ({\n///   ...prevCfg,\n///   // your config\n/// }));\n/// ```\n///\n/// You can find the default config [here](https://github.com/Milkdown/milkdown/blob/main/packages/preset-commonmark/src/plugin/inline-sync-plugin/config.ts).\nexport const inlineSyncConfig = $ctx<InlineSyncConfig, 'inlineSyncConfig'>(defaultConfig, 'inlineSyncConfig')\n\nwithMeta(inlineSyncConfig, {\n  displayName: 'Ctx<inlineSyncConfig>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { parserCtx, serializerCtx } from '@milkdown/core'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { pipe } from '@milkdown/utils'\n\nimport { inlineSyncConfig } from './config'\nimport { calculatePlaceholder, keepLink, replacePunctuation } from './utils'\n\nexport interface InlineSyncContext {\n  text: string\n  prevNode: Node\n  nextNode: Node\n  placeholder: string\n}\n\nconst getNodeFromSelection = (state: EditorState) => {\n  return state.selection.$from.node()\n}\n\nconst getMarkdown = (ctx: Ctx, state: EditorState, node: Node, globalNode: Node[]) => {\n  const serializer = ctx.get(serializerCtx)\n  const doc = state.schema.topNodeType.create(undefined, [node, ...globalNode])\n\n  const markdown = serializer(doc)\n\n  return markdown\n}\n\nconst addPlaceholder = (ctx: Ctx, markdown: string) => {\n  const config = ctx.get(inlineSyncConfig.key)\n  const holePlaceholder = config.placeholderConfig.hole\n\n  const [firstLine = '', ...rest] = markdown.split('\\n\\n')\n\n  const movePlaceholder = (text: string) => config.movePlaceholder(holePlaceholder, text)\n\n  const handleText = pipe(replacePunctuation(holePlaceholder), movePlaceholder, keepLink)\n\n  let text = handleText(firstLine)\n  const placeholder = calculatePlaceholder(config.placeholderConfig)(text)\n\n  text = text.replace(holePlaceholder, placeholder)\n\n  text = [text, ...rest].join('\\n\\n')\n\n  return [text, placeholder] as [markdown: string, placeholder: string]\n}\n\nconst getNewNode = (ctx: Ctx, text: string) => {\n  const parser = ctx.get(parserCtx)\n  const parsed = parser(text)\n\n  if (!parsed)\n    return null\n\n  return parsed.firstChild\n}\n\nconst collectGlobalNodes = (ctx: Ctx, state: EditorState) => {\n  const { globalNodes } = ctx.get(inlineSyncConfig.key)\n  const nodes: Node[] = []\n\n  state.doc.descendants((node) => {\n    if (globalNodes.includes(node.type.name) || globalNodes.includes(node.type)) {\n      nodes.push(node)\n      return false\n    }\n\n    return undefined\n  })\n\n  return nodes\n}\n\nconst removeGlobalFromText = (text: string) => text.split('\\n\\n')[0] || ''\n\nconst onlyHTML = (node: Node) => {\n  return node.childCount === 1 && node.child(0).type.name === 'html'\n}\n\nexport const getContextByState = (ctx: Ctx, state: EditorState): InlineSyncContext | null => {\n  try {\n    const globalNode = collectGlobalNodes(ctx, state)\n    const node = getNodeFromSelection(state)\n\n    const markdown = getMarkdown(ctx, state, node, globalNode)\n    const [text, placeholder] = addPlaceholder(ctx, markdown)\n\n    const newNode = getNewNode(ctx, text)\n\n    if (!newNode || node.type !== newNode.type || onlyHTML(newNode))\n      return null\n\n    // @ts-expect-error hijack the node attribute\n    newNode.attrs = { ...node.attrs }\n\n    newNode.descendants((node) => {\n      const marks = node.marks\n      const link = marks.find(mark => mark.type.name === 'link')\n      if (link && node.text?.includes(placeholder) && link.attrs.href.includes(placeholder)) {\n        // @ts-expect-error hijack the mark attribute\n        link.attrs.href = link.attrs.href.replace(placeholder, '')\n      }\n    })\n\n    return {\n      text: removeGlobalFromText(text),\n      prevNode: node,\n      nextNode: newNode,\n      placeholder,\n    }\n  }\n  catch {\n    return null\n  }\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport type { Attrs } from '@milkdown/prose/model'\nimport type { EditorState, PluginKey, Transaction } from '@milkdown/prose/state'\nimport { TextSelection } from '@milkdown/prose/state'\n\nimport { inlineSyncConfig } from './config'\nimport { getContextByState } from './context'\nimport { calcOffset } from './utils'\nimport { linkRegexp } from './regexp'\n\nexport const runReplacer = (\n  ctx: Ctx,\n  key: PluginKey,\n  state: EditorState,\n  dispatch: (tr: Transaction) => void,\n  attrs: Attrs,\n) => {\n  const { placeholderConfig } = ctx.get(inlineSyncConfig.key)\n  const holePlaceholder = placeholderConfig.hole\n  // insert a placeholder to restore the selection\n  let tr = state.tr.setMeta(key, true).insertText(holePlaceholder, state.selection.from)\n\n  const nextState = state.apply(tr)\n  const context = getContextByState(ctx, nextState)\n\n  if (!context)\n    return\n\n  const lastUserInput = context.text.slice(0, context.text.indexOf(context.placeholder))\n\n  const { $from } = nextState.selection\n  const from = $from.before()\n  const to = $from.after()\n\n  const offset = calcOffset(context.nextNode, from, context.placeholder)\n\n  tr = tr\n    .replaceWith(from, to, context.nextNode)\n    .setNodeMarkup(from, undefined, attrs)\n    // delete the placeholder\n    .delete(offset + 1, offset + 2)\n\n  // restore the selection\n  tr = tr.setSelection(TextSelection.near(tr.doc.resolve(offset + 1)))\n\n  const needsRestoreMark = linkRegexp.test(lastUserInput) || ['*', '_', '~'].includes(lastUserInput.at(-1) || '')\n  if (needsRestoreMark && tr.selection instanceof TextSelection) {\n    const marks = tr.selection.$cursor?.marks() ?? []\n    marks.forEach((mark) => {\n      tr = tr.removeStoredMark(mark.type)\n    })\n  }\n\n  dispatch(tr)\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\nimport { withMeta } from '../../__internal__'\nimport { inlineSyncConfig } from './config'\nimport { getContextByState } from './context'\nimport { runReplacer } from './replacer'\n\n/// This plugin is used to sync the inline mark.\n/// It will create and remove marks automatically according to the user input.\n///\n/// When users type something, the plugin will transform the line (for better performance) to real markdown AST by serializer\n/// and render the AST to dom by parser, thus the input texts can be displayed correctly.\nexport const inlineSyncPlugin = $prose((ctx: Ctx) => {\n  let requestId: number | null = null\n  const inlineSyncPluginKey = new PluginKey('MILKDOWN_INLINE_SYNC')\n\n  return new Plugin<null>({\n    key: inlineSyncPluginKey,\n    state: {\n      init: () => {\n        return null\n      },\n      apply: (tr, _value, _oldState, newState) => {\n        const view = ctx.get(editorViewCtx)\n        if (!view.hasFocus?.() || !view.editable)\n          return null\n\n        if (!tr.docChanged)\n          return null\n\n        const meta = tr.getMeta(inlineSyncPluginKey)\n        if (meta)\n          return null\n\n        const context = getContextByState(ctx, newState)\n        if (!context)\n          return null\n\n        if (requestId) {\n          cancelAnimationFrame(requestId)\n          requestId = null\n        }\n\n        const { prevNode, nextNode, text } = context\n\n        const { shouldSyncNode } = ctx.get(inlineSyncConfig.key)\n\n        if (!shouldSyncNode({ prevNode, nextNode, ctx, tr, text }))\n          return null\n\n        requestId = requestAnimationFrame(() => {\n          requestId = null\n\n          const { dispatch, state } = ctx.get(editorViewCtx)\n\n          runReplacer(ctx, inlineSyncPluginKey, state, dispatch, prevNode.attrs)\n        })\n\n        return null\n      },\n    },\n  })\n})\n\nwithMeta(inlineSyncPlugin, {\n  displayName: 'Prose<inlineSyncPlugin>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Node, Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to add order in list for remark AST.\nexport const remarkAddOrderInListPlugin = $remark(() => () => (tree: Node) => {\n  visit(tree, 'list', (node: Parent & { ordered?: boolean; start?: number }) => {\n    if (node.ordered) {\n      const start = node.start ?? 1\n      node.children.forEach((child, index) => {\n        (child as Node & { label: number }).label = index + start\n      })\n    }\n  })\n})\n\nwithMeta(remarkAddOrderInListPlugin, {\n  displayName: 'Remark<remarkAddOrderInListPlugin>',\n  group: 'Remark',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Literal, Node, Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to add inline line break for remark AST.\n/// The inline line break should be treated as a `space`.\n/// And the normal line break should be treated as a `LF`.\nexport const remarkLineBreak = $remark(() => () => (tree: Node) => {\n  const find = /[\\t ]*(?:\\r?\\n|\\r)/g\n  visit(tree, 'text', (node: Literal, index: number, parent: Parent) => {\n    if (!node.value || typeof node.value !== 'string')\n      return\n\n    const result = []\n    let start = 0\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n\n      if (start !== position)\n        result.push({ type: 'text', value: node.value.slice(start, position) })\n\n      result.push({ type: 'break', data: { isInline: true } })\n      start = position + match[0].length\n      match = find.exec(node.value)\n    }\n\n    const hasResultAndIndex = result.length > 0 && parent && typeof index === 'number'\n\n    if (!hasResultAndIndex)\n      return\n\n    if (start < node.value.length)\n      result.push({ type: 'text', value: node.value.slice(start) })\n\n    parent.children.splice(index, 1, ...result)\n    return index + result.length\n  })\n})\n\nwithMeta(remarkLineBreak, {\n  displayName: 'Remark<remarkLineBreak>',\n  group: 'Remark',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport remarkInlineLinks from 'remark-inline-links'\nimport { withMeta } from '../__internal__'\n\n/// This plugin wraps [remark-inline-links](https://github.com/remarkjs/remark-inline-links).\nexport const remarkInlineLinkPlugin = $remark(() => remarkInlineLinks)\n\nwithMeta(remarkInlineLinkPlugin, {\n  displayName: 'Remark<remarkInlineLinkPlugin>',\n  group: 'Remark',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Literal, Node, Parent } from 'unist'\nimport { withMeta } from '../__internal__'\n\nconst isParent = (node: Node): node is Parent => !!(node as Parent).children\nconst isHTML = (node: Node): node is Literal<string> => node.type === 'html'\n\nfunction flatMapWithDepth(ast: Node, fn: (node: Node, index: number, parent: Node | null) => Node[]) {\n  return transform(ast, 0, null)[0]\n\n  function transform(node: Node, index: number, parent: Node | null) {\n    if (isParent(node)) {\n      const out = []\n      for (let i = 0, n = node.children.length; i < n; i++) {\n        const nthChild = node.children[i]\n        if (nthChild) {\n          const xs = transform(nthChild, i, node)\n          if (xs) {\n            for (let j = 0, m = xs.length; j < m; j++) {\n              const item = xs[j]\n              if (item)\n                out.push(item)\n            }\n          }\n        }\n      }\n      node.children = out\n    }\n\n    return fn(node, index, parent)\n  }\n}\n\n/// @internal\n/// This plugin should be deprecated after we support HTML.\nexport const remarkHtmlTransformer = $remark(() => () => (tree: Node) => {\n  flatMapWithDepth(tree, (node, _index, parent) => {\n    if (!isHTML(node))\n      return [node]\n\n    if (parent?.type === 'root') {\n      (node as Literal & { children: Literal[] }).children = [{ ...node }]\n      delete (node as Literal).value\n      node.type = 'paragraph'\n    }\n\n    return [node]\n  })\n})\n\nwithMeta(remarkHtmlTransformer, {\n  displayName: 'Remark<remarkHtmlTransformer>',\n  group: 'Remark',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Node } from 'unist'\nimport type { VFile } from 'vfile'\nimport { visit } from 'unist-util-visit'\nimport { withMeta } from '../__internal__'\n\nexport const remarkMarker = $remark(() => () => (tree: Node, file: VFile) => {\n  const getMarker = (node: Node) => {\n    return (file.value as string).charAt(node.position!.start.offset!)\n  }\n  visit(tree, node => ['strong', 'emphasis'].includes(node.type), (node: Node) => {\n    (node as Node & { marker: string }).marker = getMarker(node)\n  })\n})\n\nwithMeta(remarkMarker, {\n  displayName: 'Remark<remarkMarker>',\n  group: 'Remark',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { Decoration, DecorationSet } from '@milkdown/prose/view'\nimport { $prose } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is to solve the [chrome 98 bug](https://discuss.prosemirror.net/t/cursor-jumps-at-the-end-of-line-when-it-betweens-two-inline-nodes/4641).\nexport const inlineNodesCursorPlugin = $prose(() => {\n  let lock = false\n  const inlineNodesCursorPluginKey = new PluginKey('MILKDOWN_INLINE_NODES_CURSOR')\n  const inlineNodesCursorPlugin: Plugin = new Plugin({\n    key: inlineNodesCursorPluginKey,\n    state: {\n      init() {\n        return false\n      },\n      apply(tr) {\n        if (!tr.selection.empty)\n          return false\n\n        const pos = tr.selection.$from\n        const left = pos.nodeBefore\n        const right = pos.nodeAfter\n        if (left && right && left.isInline && !left.isText && right.isInline && !right.isText)\n          return true\n\n        return false\n      },\n    },\n    props: {\n      handleDOMEvents: {\n        compositionend: (view, e) => {\n          if (lock) {\n            lock = false\n            requestAnimationFrame(() => {\n              const active = inlineNodesCursorPlugin.getState(view.state)\n              if (active) {\n                const from = view.state.selection.from\n                e.preventDefault()\n                view.dispatch(view.state.tr.insertText(e.data || '', from))\n              }\n            })\n\n            return true\n          }\n          return false\n        },\n        compositionstart: (view) => {\n          const active = inlineNodesCursorPlugin.getState(view.state)\n          if (active)\n            lock = true\n\n          return false\n        },\n        beforeinput: (view, e) => {\n          const active = inlineNodesCursorPlugin.getState(view.state)\n          if (active && e instanceof InputEvent && e.data && !lock) {\n            const from = view.state.selection.from\n            e.preventDefault()\n            view.dispatch(view.state.tr.insertText(e.data || '', from))\n\n            return true\n          }\n\n          return false\n        },\n      },\n      decorations(state) {\n        const active = inlineNodesCursorPlugin.getState(state)\n        if (active) {\n          const pos = state.selection.$from\n          const position = pos.pos\n          const left = document.createElement('span')\n          const leftDec = Decoration.widget(position, left, {\n            side: -1,\n          })\n          const right = document.createElement('span')\n          const rightDec = Decoration.widget(position, right)\n          setTimeout(() => {\n            left.contentEditable = 'true'\n            right.contentEditable = 'true'\n          })\n          return DecorationSet.create(state.doc, [leftDec, rightDec])\n        }\n        return DecorationSet.empty\n      },\n    },\n  })\n\n  return inlineNodesCursorPlugin\n})\n\nwithMeta(inlineNodesCursorPlugin, {\n  displayName: 'Prose<inlineNodesCursorPlugin>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { AddMarkStep, ReplaceStep } from '@milkdown/prose/transform'\nimport { $prose } from '@milkdown/utils'\nimport { hardbreakSchema } from '../node'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to clear the marks around the hardbreak node.\nexport const hardbreakClearMarkPlugin = $prose(() => {\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_HARDBREAK_MARKS'),\n    appendTransaction: (trs, _oldState, newState) => {\n      if (!trs.length)\n        return\n\n      const [tr] = trs\n      if (!tr)\n        return\n\n      const [step] = tr.steps\n\n      const isInsertHr = tr.getMeta('hardbreak')\n      if (isInsertHr) {\n        if (!(step instanceof ReplaceStep))\n          return\n\n        const { from } = step as unknown as { from: number }\n        return newState.tr.setNodeMarkup(from, hardbreakSchema.type(), undefined, [])\n      }\n\n      const isAddMarkStep = step instanceof AddMarkStep\n      if (isAddMarkStep) {\n        let _tr = newState.tr\n        const { from, to } = step as unknown as { from: number; to: number }\n        newState.doc.nodesBetween(from, to, (node, pos) => {\n          if (node.type === hardbreakSchema.type())\n            _tr = _tr.setNodeMarkup(pos, hardbreakSchema.type(), undefined, [])\n        })\n\n        return _tr\n      }\n\n      return undefined\n    },\n  })\n})\n\nwithMeta(hardbreakClearMarkPlugin, {\n  displayName: 'Prose<hardbreakClearMarkPlugin>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// This slice contains the nodes that within which the hardbreak will be ignored.\nexport const hardbreakFilterNodes = $ctx(['table', 'code_block'], 'hardbreakFilterNodes')\n\nwithMeta(hardbreakFilterNodes, {\n  displayName: 'Ctx<hardbreakFilterNodes>',\n  group: 'Prose',\n})\n\n/// This plugin is used to filter the hardbreak node.\n/// If the hardbreak is going to be inserted within a node that is in the `hardbreakFilterNodes`, ignore it.\nexport const hardbreakFilterPlugin = $prose((ctx) => {\n  const notIn = ctx.get(hardbreakFilterNodes.key)\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_HARDBREAK_FILTER'),\n    filterTransaction: (tr, state) => {\n      const isInsertHr = tr.getMeta('hardbreak')\n      const [step] = tr.steps\n      if (isInsertHr && step) {\n        const { from } = step as unknown as { from: number }\n        const $from = state.doc.resolve(from)\n        let curDepth = $from.depth\n        let canApply = true\n        while (curDepth > 0) {\n          if (notIn.includes($from.node(curDepth).type.name))\n            canApply = false\n\n          curDepth--\n        }\n        return canApply\n      }\n      return true\n    },\n  })\n})\n\nwithMeta(hardbreakFilterPlugin, {\n  displayName: 'Prose<hardbreakFilterPlugin>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { $prose } from '@milkdown/utils'\nimport { headingIdGenerator, headingSchema } from '../node/heading'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to sync the heading id when the heading content changes.\n/// It will use the `headingIdGenerator` to generate the id.\nexport const syncHeadingIdPlugin = $prose((ctx) => {\n  const headingIdPluginKey = new PluginKey('MILKDOWN_HEADING_ID')\n\n  const updateId = (view: EditorView) => {\n    if (view.composing || !view.editable)\n      return\n\n    const getId = ctx.get(headingIdGenerator.key)\n    const tr = view.state.tr.setMeta('addToHistory', false)\n\n    let found = false\n\n    view.state.doc.descendants((node, pos) => {\n      if (node.type === headingSchema.type()) {\n        if (node.textContent.trim().length === 0)\n          return\n\n        const attrs = node.attrs\n        const id = getId(node)\n\n        if (attrs.id !== id) {\n          found = true\n          tr.setMeta(headingIdPluginKey, true).setNodeMarkup(pos, undefined, {\n            ...attrs,\n            id,\n          })\n        }\n      }\n    })\n\n    if (found)\n      view.dispatch(tr)\n  }\n\n  return new Plugin({\n    key: headingIdPluginKey,\n    view: (view) => {\n      updateId(view)\n\n      return {\n        update: (view) => {\n          updateId(view)\n        },\n      }\n    },\n  })\n})\n\nwithMeta(syncHeadingIdPlugin, {\n  displayName: 'Prose<syncHeadingIdPlugin>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { listItemSchema } from '../node/list-item'\n\nimport { orderedListSchema } from '../node/ordered-list'\nimport { bulletListSchema } from '../node'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to keep the label of list item up to date in ordered list.\nexport const syncListOrderPlugin = $prose(() => {\n  const syncOrderLabel = (view: EditorView) => {\n    if (view.composing || !view.editable)\n      return\n\n    const orderedListType = orderedListSchema.type()\n    const bulletListType = bulletListSchema.type()\n    const listItemType = listItemSchema.type()\n    const state = view.state\n    const handleNodeItem = (attrs: Record<string, any>, index: number): boolean => {\n      let changed = false\n      const expectedLabel = `${index + 1}.`\n      if (attrs.label !== expectedLabel) {\n        attrs.label = expectedLabel\n        changed = true\n      }\n\n      return changed\n    }\n\n    let tr = state.tr\n    let needDispatch = false\n    state.doc.descendants((node, pos, parent, index) => {\n      if (node.type === bulletListType) {\n        const base = node.maybeChild(0)\n        if (base?.type === listItemType && base.attrs.listType === 'ordered') {\n          needDispatch = true\n          tr.setNodeMarkup(pos, orderedListType, { spread: 'true' })\n\n          node.descendants((child, pos, _parent, index) => {\n            if (child.type === listItemType) {\n              const attrs = { ...child.attrs }\n              const changed = handleNodeItem(attrs, index)\n              if (changed)\n                tr = tr.setNodeMarkup(pos, undefined, attrs)\n            }\n            return false\n          })\n        }\n      }\n      else if (node.type === listItemType && parent?.type === orderedListType) {\n        const attrs = { ...node.attrs }\n        let changed = false\n        if (attrs.listType !== 'ordered') {\n          attrs.listType = 'ordered'\n          changed = true\n        }\n\n        const base = parent?.maybeChild(0)\n        if (base)\n          changed = handleNodeItem(attrs, index)\n\n        if (changed) {\n          tr = tr.setNodeMarkup(pos, undefined, attrs)\n          needDispatch = true\n        }\n      }\n    })\n\n    if (needDispatch)\n      view.dispatch(tr.setMeta('addToHistory', false))\n  }\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_KEEP_LIST_ORDER'),\n    view: (view) => {\n      syncOrderLabel(view)\n      return {\n        update: (view) => {\n          syncOrderLabel(view)\n        },\n      }\n    },\n  })\n})\n\nwithMeta(syncListOrderPlugin, {\n  displayName: 'Prose<syncListOrderPlugin>',\n  group: 'Prose',\n})\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  hardbreakClearMarkPlugin,\n  hardbreakFilterNodes,\n  hardbreakFilterPlugin,\n  inlineNodesCursorPlugin,\n  inlineSyncConfig,\n  inlineSyncPlugin,\n  remarkAddOrderInListPlugin,\n  remarkHtmlTransformer,\n  remarkInlineLinkPlugin,\n  remarkLineBreak, remarkMarker,\n  syncHeadingIdPlugin,\n  syncListOrderPlugin,\n} from '../plugin'\n\n/// @internal\nexport const plugins: MilkdownPlugin[] = [\n  inlineSyncConfig,\n  inlineSyncPlugin,\n\n  hardbreakClearMarkPlugin,\n  hardbreakFilterNodes,\n  hardbreakFilterPlugin,\n\n  inlineNodesCursorPlugin,\n\n  remarkAddOrderInListPlugin,\n  remarkInlineLinkPlugin,\n  remarkLineBreak,\n  remarkHtmlTransformer,\n  remarkMarker,\n\n  syncHeadingIdPlugin,\n  syncListOrderPlugin,\n]\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { commands, inputrules, keymap, plugins, schema } from './composed'\n\nexport * from './node'\nexport * from './mark'\nexport * from './plugin'\nexport * from './composed'\n\n/// The commonmark preset, includes all the plugins.\nexport const commonmark = [schema, inputrules, commands, keymap, plugins].flat()\n"],"names":["serializeText","state","node","_a","contentArr","n","_","i","Fragment","withMeta","plugin","meta","emphasisAttr","$markAttr","emphasisSchema","$markSchema","ctx","remarkStringifyOptionsCtx","value","mark","markType","toggleEmphasisCommand","$command","toggleMarkdownMark","emphasisKeymap","$useKeymap","commands","commandsCtx","strongAttr","strongSchema","toggleStrongCommand","markSymbol","strongKeymap","inlineCodeAttr","inlineCodeSchema","toggleInlineCodeCommand","dispatch","selection","tr","from","to","x","name","t","inlineCodeKeymap","linkAttr","linkSchema","dom","expectDomTypeError","url","title","toggleLinkCommand","payload","toggleMark","updateLinkCommand","pos","p","type","start","end","linkMark","TextSelection","docSchema","$node","paragraphAttr","$nodeAttr","paragraphSchema","$nodeSchema","turnIntoTextCommand","setBlockType","paragraphKeymap","headingIndex","defaultHeadingIdGenerator","slugify","headingIdGenerator","$ctx","headingAttr","headingSchema","getId","depth","wrapInHeadingInputRule","$inputRule","textblockTypeInputRule","match","_b","view","editorViewCtx","$from","level","wrapInHeadingCommand","downgradeHeadingCommand","headingKeymap","blockquoteAttr","blockquoteSchema","wrapInBlockquoteInputRule","wrappingInputRule","wrapInBlockquoteCommand","wrapIn","blockquoteKeymap","codeBlockAttr","codeBlockSchema","attr","language","createCodeBlockInputRule","createCodeBlockCommand","updateCodeBlockLanguageCommand","codeBlockKeymap","imageAttr","imageSchema","alt","insertImageCommand","src","updateImageCommand","nodeWithPos","findSelectedNodeOfType","newAttrs","insertImageInputRule","InputRule","matched","hardbreakAttr","hardbreakSchema","insertHardbreakCommand","Selection","hardbreakKeymap","hrAttr","hrSchema","insertHrInputRule","insertHrCommand","paragraph","_tr","sel","bulletListAttr","bulletListSchema","ordered","spread","wrapInBulletListInputRule","wrapInBulletListCommand","bulletListKeymap","orderedListAttr","orderedListSchema","wrapInOrderedListInputRule","wrapInOrderedListCommand","orderedListKeymap","listItemAttr","listItemSchema","label","listType","sinkListItemCommand","sinkListItem","liftListItemCommand","liftListItem","splitListItemCommand","splitListItem","liftFirstListItem","empty","parentItem","liftFirstListItemCommand","listItemKeymap","textSchema","htmlAttr","htmlSchema","span","schema","inputrules","keymap","linkRegexp","keepLinkRegexp","punctuationRegexp","holePlaceholder","keepLink","str","text","swap","first","last","arr","temp","replacePunctuation","calculatePlaceholder","placeholder","index","left","right","notAWord","calcOffset","offset","find","defaultConfig","prevNode","nextNode","placeholderToMove","symbolsNeedToMove","inlineSyncConfig","getNodeFromSelection","getMarkdown","globalNode","serializer","serializerCtx","doc","addPlaceholder","markdown","config","firstLine","rest","movePlaceholder","pipe","getNewNode","parsed","parserCtx","collectGlobalNodes","globalNodes","nodes","removeGlobalFromText","onlyHTML","getContextByState","newNode","link","runReplacer","key","attrs","placeholderConfig","nextState","context","lastUserInput","inlineSyncPlugin","$prose","requestId","inlineSyncPluginKey","PluginKey","Plugin","_value","_oldState","newState","shouldSyncNode","remarkAddOrderInListPlugin","$remark","tree","visit","child","remarkLineBreak","parent","result","position","remarkInlineLinkPlugin","remarkInlineLinks","isParent","isHTML","flatMapWithDepth","ast","fn","transform","out","nthChild","xs","j","m","item","remarkHtmlTransformer","_index","remarkMarker","file","getMarker","inlineNodesCursorPlugin","lock","inlineNodesCursorPluginKey","e","leftDec","Decoration","rightDec","DecorationSet","hardbreakClearMarkPlugin","trs","step","ReplaceStep","AddMarkStep","hardbreakFilterNodes","hardbreakFilterPlugin","notIn","isInsertHr","curDepth","canApply","syncHeadingIdPlugin","headingIdPluginKey","updateId","found","id","syncListOrderPlugin","syncOrderLabel","orderedListType","bulletListType","listItemType","handleNodeItem","changed","expectedLabel","needDispatch","base","_parent","plugins","commonmark"],"mappings":"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"}