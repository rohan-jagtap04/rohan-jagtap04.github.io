{
  "version": 3,
  "sources": ["../../.pnpm/@sindresorhus+transliterate@1.6.0/node_modules/@sindresorhus/transliterate/replacements.js", "../../.pnpm/@sindresorhus+transliterate@1.6.0/node_modules/@sindresorhus/transliterate/index.js", "../../.pnpm/@sindresorhus+slugify@2.2.1/node_modules/@sindresorhus/slugify/overridable-replacements.js", "../../.pnpm/@sindresorhus+slugify@2.2.1/node_modules/@sindresorhus/slugify/index.js", "../../.pnpm/prosemirror-schema-list@1.3.0/node_modules/prosemirror-schema-list/dist/index.js", "../../.pnpm/remark-inline-links@6.0.1/node_modules/remark-inline-links/index.js", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/__internal__/serialize-text.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/__internal__/with-meta.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/mark/emphasis.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/mark/strong.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/mark/inline-code.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/mark/link.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/doc.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/paragraph.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/heading.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/blockquote.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/code-block.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/image.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/hardbreak.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/hr.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/bullet-list.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/ordered-list.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/list-item.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/text.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/node/html.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/composed/schema.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/composed/inputrules.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/composed/commands.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/composed/keymap.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-sync-plugin/regexp.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-sync-plugin/utils.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-sync-plugin/config.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-sync-plugin/context.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-sync-plugin/replacer.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-sync-plugin/inline-sync-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/remark-add-order-in-list-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/remark-line-break.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/remark-inline-link-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/remark-html-transformer.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/remark-marker-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/inline-nodes-cursor-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/hardbreak-clear-mark-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/hardbreak-filter-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/sync-heading-id-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/plugin/sync-list-order-plugin.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/composed/plugins.ts", "../../.pnpm/@milkdown+preset-commonmark@7.2.3_@milkdown+core@7.2.3_@milkdown+ctx@7.2.3_@milkdown+prose@7._up2z2z4kmuhoqw2bdx3rr3ofly/node_modules/@milkdown/preset-commonmark/src/index.ts"],
  "sourcesContent": ["const replacements = [\n\t// German umlauts\n\t['ß', 'ss'],\n\t['ẞ', 'Ss'],\n\t['ä', 'ae'],\n\t['Ä', 'Ae'],\n\t['ö', 'oe'],\n\t['Ö', 'Oe'],\n\t['ü', 'ue'],\n\t['Ü', 'Ue'],\n\n\t// Latin\n\t['À', 'A'],\n\t['Á', 'A'],\n\t['Â', 'A'],\n\t['Ã', 'A'],\n\t['Ä', 'Ae'],\n\t['Å', 'A'],\n\t['Æ', 'AE'],\n\t['Ç', 'C'],\n\t['È', 'E'],\n\t['É', 'E'],\n\t['Ê', 'E'],\n\t['Ë', 'E'],\n\t['Ì', 'I'],\n\t['Í', 'I'],\n\t['Î', 'I'],\n\t['Ï', 'I'],\n\t['Ð', 'D'],\n\t['Ñ', 'N'],\n\t['Ò', 'O'],\n\t['Ó', 'O'],\n\t['Ô', 'O'],\n\t['Õ', 'O'],\n\t['Ö', 'Oe'],\n\t['Ő', 'O'],\n\t['Ø', 'O'],\n\t['Ù', 'U'],\n\t['Ú', 'U'],\n\t['Û', 'U'],\n\t['Ü', 'Ue'],\n\t['Ű', 'U'],\n\t['Ý', 'Y'],\n\t['Þ', 'TH'],\n\t['ß', 'ss'],\n\t['à', 'a'],\n\t['á', 'a'],\n\t['â', 'a'],\n\t['ã', 'a'],\n\t['ä', 'ae'],\n\t['å', 'a'],\n\t['æ', 'ae'],\n\t['ç', 'c'],\n\t['è', 'e'],\n\t['é', 'e'],\n\t['ê', 'e'],\n\t['ë', 'e'],\n\t['ì', 'i'],\n\t['í', 'i'],\n\t['î', 'i'],\n\t['ï', 'i'],\n\t['ð', 'd'],\n\t['ñ', 'n'],\n\t['ò', 'o'],\n\t['ó', 'o'],\n\t['ô', 'o'],\n\t['õ', 'o'],\n\t['ö', 'oe'],\n\t['ő', 'o'],\n\t['ø', 'o'],\n\t['ù', 'u'],\n\t['ú', 'u'],\n\t['û', 'u'],\n\t['ü', 'ue'],\n\t['ű', 'u'],\n\t['ý', 'y'],\n\t['þ', 'th'],\n\t['ÿ', 'y'],\n\t['ẞ', 'SS'],\n\n\t// Vietnamese\n\t['à', 'a'],\n\t['À', 'A'],\n\t['á', 'a'],\n\t['Á', 'A'],\n\t['â', 'a'],\n\t['Â', 'A'],\n\t['ã', 'a'],\n\t['Ã', 'A'],\n\t['è', 'e'],\n\t['È', 'E'],\n\t['é', 'e'],\n\t['É', 'E'],\n\t['ê', 'e'],\n\t['Ê', 'E'],\n\t['ì', 'i'],\n\t['Ì', 'I'],\n\t['í', 'i'],\n\t['Í', 'I'],\n\t['ò', 'o'],\n\t['Ò', 'O'],\n\t['ó', 'o'],\n\t['Ó', 'O'],\n\t['ô', 'o'],\n\t['Ô', 'O'],\n\t['õ', 'o'],\n\t['Õ', 'O'],\n\t['ù', 'u'],\n\t['Ù', 'U'],\n\t['ú', 'u'],\n\t['Ú', 'U'],\n\t['ý', 'y'],\n\t['Ý', 'Y'],\n\t['ă', 'a'],\n\t['Ă', 'A'],\n\t['Đ', 'D'],\n\t['đ', 'd'],\n\t['ĩ', 'i'],\n\t['Ĩ', 'I'],\n\t['ũ', 'u'],\n\t['Ũ', 'U'],\n\t['ơ', 'o'],\n\t['Ơ', 'O'],\n\t['ư', 'u'],\n\t['Ư', 'U'],\n\t['ạ', 'a'],\n\t['Ạ', 'A'],\n\t['ả', 'a'],\n\t['Ả', 'A'],\n\t['ấ', 'a'],\n\t['Ấ', 'A'],\n\t['ầ', 'a'],\n\t['Ầ', 'A'],\n\t['ẩ', 'a'],\n\t['Ẩ', 'A'],\n\t['ẫ', 'a'],\n\t['Ẫ', 'A'],\n\t['ậ', 'a'],\n\t['Ậ', 'A'],\n\t['ắ', 'a'],\n\t['Ắ', 'A'],\n\t['ằ', 'a'],\n\t['Ằ', 'A'],\n\t['ẳ', 'a'],\n\t['Ẳ', 'A'],\n\t['ẵ', 'a'],\n\t['Ẵ', 'A'],\n\t['ặ', 'a'],\n\t['Ặ', 'A'],\n\t['ẹ', 'e'],\n\t['Ẹ', 'E'],\n\t['ẻ', 'e'],\n\t['Ẻ', 'E'],\n\t['ẽ', 'e'],\n\t['Ẽ', 'E'],\n\t['ế', 'e'],\n\t['Ế', 'E'],\n\t['ề', 'e'],\n\t['Ề', 'E'],\n\t['ể', 'e'],\n\t['Ể', 'E'],\n\t['ễ', 'e'],\n\t['Ễ', 'E'],\n\t['ệ', 'e'],\n\t['Ệ', 'E'],\n\t['ỉ', 'i'],\n\t['Ỉ', 'I'],\n\t['ị', 'i'],\n\t['Ị', 'I'],\n\t['ọ', 'o'],\n\t['Ọ', 'O'],\n\t['ỏ', 'o'],\n\t['Ỏ', 'O'],\n\t['ố', 'o'],\n\t['Ố', 'O'],\n\t['ồ', 'o'],\n\t['Ồ', 'O'],\n\t['ổ', 'o'],\n\t['Ổ', 'O'],\n\t['ỗ', 'o'],\n\t['Ỗ', 'O'],\n\t['ộ', 'o'],\n\t['Ộ', 'O'],\n\t['ớ', 'o'],\n\t['Ớ', 'O'],\n\t['ờ', 'o'],\n\t['Ờ', 'O'],\n\t['ở', 'o'],\n\t['Ở', 'O'],\n\t['ỡ', 'o'],\n\t['Ỡ', 'O'],\n\t['ợ', 'o'],\n\t['Ợ', 'O'],\n\t['ụ', 'u'],\n\t['Ụ', 'U'],\n\t['ủ', 'u'],\n\t['Ủ', 'U'],\n\t['ứ', 'u'],\n\t['Ứ', 'U'],\n\t['ừ', 'u'],\n\t['Ừ', 'U'],\n\t['ử', 'u'],\n\t['Ử', 'U'],\n\t['ữ', 'u'],\n\t['Ữ', 'U'],\n\t['ự', 'u'],\n\t['Ự', 'U'],\n\t['ỳ', 'y'],\n\t['Ỳ', 'Y'],\n\t['ỵ', 'y'],\n\t['Ỵ', 'Y'],\n\t['ỷ', 'y'],\n\t['Ỷ', 'Y'],\n\t['ỹ', 'y'],\n\t['Ỹ', 'Y'],\n\n\t// Arabic\n\t['ء', 'e'],\n\t['آ', 'a'],\n\t['أ', 'a'],\n\t['ؤ', 'w'],\n\t['إ', 'i'],\n\t['ئ', 'y'],\n\t['ا', 'a'],\n\t['ب', 'b'],\n\t['ة', 't'],\n\t['ت', 't'],\n\t['ث', 'th'],\n\t['ج', 'j'],\n\t['ح', 'h'],\n\t['خ', 'kh'],\n\t['د', 'd'],\n\t['ذ', 'dh'],\n\t['ر', 'r'],\n\t['ز', 'z'],\n\t['س', 's'],\n\t['ش', 'sh'],\n\t['ص', 's'],\n\t['ض', 'd'],\n\t['ط', 't'],\n\t['ظ', 'z'],\n\t['ع', 'e'],\n\t['غ', 'gh'],\n\t['ـ', '_'],\n\t['ف', 'f'],\n\t['ق', 'q'],\n\t['ك', 'k'],\n\t['ل', 'l'],\n\t['م', 'm'],\n\t['ن', 'n'],\n\t['ه', 'h'],\n\t['و', 'w'],\n\t['ى', 'a'],\n\t['ي', 'y'],\n\t['َ‎', 'a'],\n\t['ُ', 'u'],\n\t['ِ‎', 'i'],\n\t['٠', '0'],\n\t['١', '1'],\n\t['٢', '2'],\n\t['٣', '3'],\n\t['٤', '4'],\n\t['٥', '5'],\n\t['٦', '6'],\n\t['٧', '7'],\n\t['٨', '8'],\n\t['٩', '9'],\n\n\t// Persian / Farsi\n\t['چ', 'ch'],\n\t['ک', 'k'],\n\t['گ', 'g'],\n\t['پ', 'p'],\n\t['ژ', 'zh'],\n\t['ی', 'y'],\n\t['۰', '0'],\n\t['۱', '1'],\n\t['۲', '2'],\n\t['۳', '3'],\n\t['۴', '4'],\n\t['۵', '5'],\n\t['۶', '6'],\n\t['۷', '7'],\n\t['۸', '8'],\n\t['۹', '9'],\n\n\t// Pashto\n\t['ټ', 'p'],\n\t['ځ', 'z'],\n\t['څ', 'c'],\n\t['ډ', 'd'],\n\t['ﺫ', 'd'],\n\t['ﺭ', 'r'],\n\t['ړ', 'r'],\n\t['ﺯ', 'z'],\n\t['ږ', 'g'],\n\t['ښ', 'x'],\n\t['ګ', 'g'],\n\t['ڼ', 'n'],\n\t['ۀ', 'e'],\n\t['ې', 'e'],\n\t['ۍ', 'ai'],\n\n\t// Urdu\n\t['ٹ', 't'],\n\t['ڈ', 'd'],\n\t['ڑ', 'r'],\n\t['ں', 'n'],\n\t['ہ', 'h'],\n\t['ھ', 'h'],\n\t['ے', 'e'],\n\n\t// Russian\n\t['А', 'A'],\n\t['а', 'a'],\n\t['Б', 'B'],\n\t['б', 'b'],\n\t['В', 'V'],\n\t['в', 'v'],\n\t['Г', 'G'],\n\t['г', 'g'],\n\t['Д', 'D'],\n\t['д', 'd'],\n\t['ъе', 'ye'],\n\t['Ъе', 'Ye'],\n\t['ъЕ', 'yE'],\n\t['ЪЕ', 'YE'],\n\t['Е', 'E'],\n\t['е', 'e'],\n\t['Ё', 'Yo'],\n\t['ё', 'yo'],\n\t['Ж', 'Zh'],\n\t['ж', 'zh'],\n\t['З', 'Z'],\n\t['з', 'z'],\n\t['И', 'I'],\n\t['и', 'i'],\n\t['ый', 'iy'],\n\t['Ый', 'Iy'],\n\t['ЫЙ', 'IY'],\n\t['ыЙ', 'iY'],\n\t['Й', 'Y'],\n\t['й', 'y'],\n\t['К', 'K'],\n\t['к', 'k'],\n\t['Л', 'L'],\n\t['л', 'l'],\n\t['М', 'M'],\n\t['м', 'm'],\n\t['Н', 'N'],\n\t['н', 'n'],\n\t['О', 'O'],\n\t['о', 'o'],\n\t['П', 'P'],\n\t['п', 'p'],\n\t['Р', 'R'],\n\t['р', 'r'],\n\t['С', 'S'],\n\t['с', 's'],\n\t['Т', 'T'],\n\t['т', 't'],\n\t['У', 'U'],\n\t['у', 'u'],\n\t['Ф', 'F'],\n\t['ф', 'f'],\n\t['Х', 'Kh'],\n\t['х', 'kh'],\n\t['Ц', 'Ts'],\n\t['ц', 'ts'],\n\t['Ч', 'Ch'],\n\t['ч', 'ch'],\n\t['Ш', 'Sh'],\n\t['ш', 'sh'],\n\t['Щ', 'Sch'],\n\t['щ', 'sch'],\n\t['Ъ', ''],\n\t['ъ', ''],\n\t['Ы', 'Y'],\n\t['ы', 'y'],\n\t['Ь', ''],\n\t['ь', ''],\n\t['Э', 'E'],\n\t['э', 'e'],\n\t['Ю', 'Yu'],\n\t['ю', 'yu'],\n\t['Я', 'Ya'],\n\t['я', 'ya'],\n\n\t// Romanian\n\t['ă', 'a'],\n\t['Ă', 'A'],\n\t['ș', 's'],\n\t['Ș', 'S'],\n\t['ț', 't'],\n\t['Ț', 'T'],\n\t['ţ', 't'],\n\t['Ţ', 'T'],\n\n\t// Turkish\n\t['ş', 's'],\n\t['Ş', 'S'],\n\t['ç', 'c'],\n\t['Ç', 'C'],\n\t['ğ', 'g'],\n\t['Ğ', 'G'],\n\t['ı', 'i'],\n\t['İ', 'I'],\n\n\t// Armenian\n\t['ա', 'a'],\n\t['Ա', 'A'],\n\t['բ', 'b'],\n\t['Բ', 'B'],\n\t['գ', 'g'],\n\t['Գ', 'G'],\n\t['դ', 'd'],\n\t['Դ', 'D'],\n\t['ե', 'ye'],\n\t['Ե', 'Ye'],\n\t['զ', 'z'],\n\t['Զ', 'Z'],\n\t['է', 'e'],\n\t['Է', 'E'],\n\t['ը', 'y'],\n\t['Ը', 'Y'],\n\t['թ', 't'],\n\t['Թ', 'T'],\n\t['ժ', 'zh'],\n\t['Ժ', 'Zh'],\n\t['ի', 'i'],\n\t['Ի', 'I'],\n\t['լ', 'l'],\n\t['Լ', 'L'],\n\t['խ', 'kh'],\n\t['Խ', 'Kh'],\n\t['ծ', 'ts'],\n\t['Ծ', 'Ts'],\n\t['կ', 'k'],\n\t['Կ', 'K'],\n\t['հ', 'h'],\n\t['Հ', 'H'],\n\t['ձ', 'dz'],\n\t['Ձ', 'Dz'],\n\t['ղ', 'gh'],\n\t['Ղ', 'Gh'],\n\t['ճ', 'tch'],\n\t['Ճ', 'Tch'],\n\t['մ', 'm'],\n\t['Մ', 'M'],\n\t['յ', 'y'],\n\t['Յ', 'Y'],\n\t['ն', 'n'],\n\t['Ն', 'N'],\n\t['շ', 'sh'],\n\t['Շ', 'Sh'],\n\t['ո', 'vo'],\n\t['Ո', 'Vo'],\n\t['չ', 'ch'],\n\t['Չ', 'Ch'],\n\t['պ', 'p'],\n\t['Պ', 'P'],\n\t['ջ', 'j'],\n\t['Ջ', 'J'],\n\t['ռ', 'r'],\n\t['Ռ', 'R'],\n\t['ս', 's'],\n\t['Ս', 'S'],\n\t['վ', 'v'],\n\t['Վ', 'V'],\n\t['տ', 't'],\n\t['Տ', 'T'],\n\t['ր', 'r'],\n\t['Ր', 'R'],\n\t['ց', 'c'],\n\t['Ց', 'C'],\n\t['ու', 'u'],\n\t['ՈՒ', 'U'],\n\t['Ու', 'U'],\n\t['փ', 'p'],\n\t['Փ', 'P'],\n\t['ք', 'q'],\n\t['Ք', 'Q'],\n\t['օ', 'o'],\n\t['Օ', 'O'],\n\t['ֆ', 'f'],\n\t['Ֆ', 'F'],\n\t['և', 'yev'],\n\n\t// Georgian\n\t['ა', 'a'],\n\t['ბ', 'b'],\n\t['გ', 'g'],\n\t['დ', 'd'],\n\t['ე', 'e'],\n\t['ვ', 'v'],\n\t['ზ', 'z'],\n\t['თ', 't'],\n\t['ი', 'i'],\n\t['კ', 'k'],\n\t['ლ', 'l'],\n\t['მ', 'm'],\n\t['ნ', 'n'],\n\t['ო', 'o'],\n\t['პ', 'p'],\n\t['ჟ', 'zh'],\n\t['რ', 'r'],\n\t['ს', 's'],\n\t['ტ', 't'],\n\t['უ', 'u'],\n\t['ფ', 'ph'],\n\t['ქ', 'q'],\n\t['ღ', 'gh'],\n\t['ყ', 'k'],\n\t['შ', 'sh'],\n\t['ჩ', 'ch'],\n\t['ც', 'ts'],\n\t['ძ', 'dz'],\n\t['წ', 'ts'],\n\t['ჭ', 'tch'],\n\t['ხ', 'kh'],\n\t['ჯ', 'j'],\n\t['ჰ', 'h'],\n\n\t// Czech\n\t['č', 'c'],\n\t['ď', 'd'],\n\t['ě', 'e'],\n\t['ň', 'n'],\n\t['ř', 'r'],\n\t['š', 's'],\n\t['ť', 't'],\n\t['ů', 'u'],\n\t['ž', 'z'],\n\t['Č', 'C'],\n\t['Ď', 'D'],\n\t['Ě', 'E'],\n\t['Ň', 'N'],\n\t['Ř', 'R'],\n\t['Š', 'S'],\n\t['Ť', 'T'],\n\t['Ů', 'U'],\n\t['Ž', 'Z'],\n\n\t// Dhivehi\n\t['ހ', 'h'],\n\t['ށ', 'sh'],\n\t['ނ', 'n'],\n\t['ރ', 'r'],\n\t['ބ', 'b'],\n\t['ޅ', 'lh'],\n\t['ކ', 'k'],\n\t['އ', 'a'],\n\t['ވ', 'v'],\n\t['މ', 'm'],\n\t['ފ', 'f'],\n\t['ދ', 'dh'],\n\t['ތ', 'th'],\n\t['ލ', 'l'],\n\t['ގ', 'g'],\n\t['ޏ', 'gn'],\n\t['ސ', 's'],\n\t['ޑ', 'd'],\n\t['ޒ', 'z'],\n\t['ޓ', 't'],\n\t['ޔ', 'y'],\n\t['ޕ', 'p'],\n\t['ޖ', 'j'],\n\t['ޗ', 'ch'],\n\t['ޘ', 'tt'],\n\t['ޙ', 'hh'],\n\t['ޚ', 'kh'],\n\t['ޛ', 'th'],\n\t['ޜ', 'z'],\n\t['ޝ', 'sh'],\n\t['ޞ', 's'],\n\t['ޟ', 'd'],\n\t['ޠ', 't'],\n\t['ޡ', 'z'],\n\t['ޢ', 'a'],\n\t['ޣ', 'gh'],\n\t['ޤ', 'q'],\n\t['ޥ', 'w'],\n\t['ަ', 'a'],\n\t['ާ', 'aa'],\n\t['ި', 'i'],\n\t['ީ', 'ee'],\n\t['ު', 'u'],\n\t['ޫ', 'oo'],\n\t['ެ', 'e'],\n\t['ޭ', 'ey'],\n\t['ޮ', 'o'],\n\t['ޯ', 'oa'],\n\t['ް', ''],\n\n\t// Greek\n\t['α', 'a'],\n\t['β', 'v'],\n\t['γ', 'g'],\n\t['δ', 'd'],\n\t['ε', 'e'],\n\t['ζ', 'z'],\n\t['η', 'i'],\n\t['θ', 'th'],\n\t['ι', 'i'],\n\t['κ', 'k'],\n\t['λ', 'l'],\n\t['μ', 'm'],\n\t['ν', 'n'],\n\t['ξ', 'ks'],\n\t['ο', 'o'],\n\t['π', 'p'],\n\t['ρ', 'r'],\n\t['σ', 's'],\n\t['τ', 't'],\n\t['υ', 'y'],\n\t['φ', 'f'],\n\t['χ', 'x'],\n\t['ψ', 'ps'],\n\t['ω', 'o'],\n\t['ά', 'a'],\n\t['έ', 'e'],\n\t['ί', 'i'],\n\t['ό', 'o'],\n\t['ύ', 'y'],\n\t['ή', 'i'],\n\t['ώ', 'o'],\n\t['ς', 's'],\n\t['ϊ', 'i'],\n\t['ΰ', 'y'],\n\t['ϋ', 'y'],\n\t['ΐ', 'i'],\n\t['Α', 'A'],\n\t['Β', 'B'],\n\t['Γ', 'G'],\n\t['Δ', 'D'],\n\t['Ε', 'E'],\n\t['Ζ', 'Z'],\n\t['Η', 'I'],\n\t['Θ', 'TH'],\n\t['Ι', 'I'],\n\t['Κ', 'K'],\n\t['Λ', 'L'],\n\t['Μ', 'M'],\n\t['Ν', 'N'],\n\t['Ξ', 'KS'],\n\t['Ο', 'O'],\n\t['Π', 'P'],\n\t['Ρ', 'R'],\n\t['Σ', 'S'],\n\t['Τ', 'T'],\n\t['Υ', 'Y'],\n\t['Φ', 'F'],\n\t['Χ', 'X'],\n\t['Ψ', 'PS'],\n\t['Ω', 'O'],\n\t['Ά', 'A'],\n\t['Έ', 'E'],\n\t['Ί', 'I'],\n\t['Ό', 'O'],\n\t['Ύ', 'Y'],\n\t['Ή', 'I'],\n\t['Ώ', 'O'],\n\t['Ϊ', 'I'],\n\t['Ϋ', 'Y'],\n\n\t// Disabled as it conflicts with German and Latin.\n\t// Hungarian\n\t// ['ä', 'a'],\n\t// ['Ä', 'A'],\n\t// ['ö', 'o'],\n\t// ['Ö', 'O'],\n\t// ['ü', 'u'],\n\t// ['Ü', 'U'],\n\t// ['ű', 'u'],\n\t// ['Ű', 'U'],\n\n\t// Latvian\n\t['ā', 'a'],\n\t['ē', 'e'],\n\t['ģ', 'g'],\n\t['ī', 'i'],\n\t['ķ', 'k'],\n\t['ļ', 'l'],\n\t['ņ', 'n'],\n\t['ū', 'u'],\n\t['Ā', 'A'],\n\t['Ē', 'E'],\n\t['Ģ', 'G'],\n\t['Ī', 'I'],\n\t['Ķ', 'K'],\n\t['Ļ', 'L'],\n\t['Ņ', 'N'],\n\t['Ū', 'U'],\n\t['č', 'c'],\n\t['š', 's'],\n\t['ž', 'z'],\n\t['Č', 'C'],\n\t['Š', 'S'],\n\t['Ž', 'Z'],\n\n\t// Lithuanian\n\t['ą', 'a'],\n\t['č', 'c'],\n\t['ę', 'e'],\n\t['ė', 'e'],\n\t['į', 'i'],\n\t['š', 's'],\n\t['ų', 'u'],\n\t['ū', 'u'],\n\t['ž', 'z'],\n\t['Ą', 'A'],\n\t['Č', 'C'],\n\t['Ę', 'E'],\n\t['Ė', 'E'],\n\t['Į', 'I'],\n\t['Š', 'S'],\n\t['Ų', 'U'],\n\t['Ū', 'U'],\n\n\t// Macedonian\n\t['Ќ', 'Kj'],\n\t['ќ', 'kj'],\n\t['Љ', 'Lj'],\n\t['љ', 'lj'],\n\t['Њ', 'Nj'],\n\t['њ', 'nj'],\n\t['Тс', 'Ts'],\n\t['тс', 'ts'],\n\n\t// Polish\n\t['ą', 'a'],\n\t['ć', 'c'],\n\t['ę', 'e'],\n\t['ł', 'l'],\n\t['ń', 'n'],\n\t['ś', 's'],\n\t['ź', 'z'],\n\t['ż', 'z'],\n\t['Ą', 'A'],\n\t['Ć', 'C'],\n\t['Ę', 'E'],\n\t['Ł', 'L'],\n\t['Ń', 'N'],\n\t['Ś', 'S'],\n\t['Ź', 'Z'],\n\t['Ż', 'Z'],\n\n\t// Disabled as it conflicts with Vietnamese.\n\t// Serbian\n\t// ['љ', 'lj'],\n\t// ['њ', 'nj'],\n\t// ['Љ', 'Lj'],\n\t// ['Њ', 'Nj'],\n\t// ['đ', 'dj'],\n\t// ['Đ', 'Dj'],\n\t// ['ђ', 'dj'],\n\t// ['ј', 'j'],\n\t// ['ћ', 'c'],\n\t// ['џ', 'dz'],\n\t// ['Ђ', 'Dj'],\n\t// ['Ј', 'j'],\n\t// ['Ћ', 'C'],\n\t// ['Џ', 'Dz'],\n\n\t// Disabled as it conflicts with German and Latin.\n\t// Slovak\n\t// ['ä', 'a'],\n\t// ['Ä', 'A'],\n\t// ['ľ', 'l'],\n\t// ['ĺ', 'l'],\n\t// ['ŕ', 'r'],\n\t// ['Ľ', 'L'],\n\t// ['Ĺ', 'L'],\n\t// ['Ŕ', 'R'],\n\n\t// Disabled as it conflicts with German and Latin.\n\t// Swedish\n\t// ['å', 'o'],\n\t// ['Å', 'o'],\n\t// ['ä', 'a'],\n\t// ['Ä', 'A'],\n\t// ['ë', 'e'],\n\t// ['Ë', 'E'],\n\t// ['ö', 'o'],\n\t// ['Ö', 'O'],\n\n\t// Ukrainian\n\t['Є', 'Ye'],\n\t['І', 'I'],\n\t['Ї', 'Yi'],\n\t['Ґ', 'G'],\n\t['є', 'ye'],\n\t['і', 'i'],\n\t['ї', 'yi'],\n\t['ґ', 'g'],\n\n\t// Dutch\n\t['Ĳ', 'IJ'],\n\t['ĳ', 'ij'],\n\n\t// Danish\n\t// ['Æ', 'Ae'],\n\t// ['Ø', 'Oe'],\n\t// ['Å', 'Aa'],\n\t// ['æ', 'ae'],\n\t// ['ø', 'oe'],\n\t// ['å', 'aa']\n\n\t// Currencies\n\t['¢', 'c'],\n\t['¥', 'Y'],\n\t['߿', 'b'],\n\t['৳', 't'],\n\t['૱', 'Bo'],\n\t['฿', 'B'],\n\t['₠', 'CE'],\n\t['₡', 'C'],\n\t['₢', 'Cr'],\n\t['₣', 'F'],\n\t['₥', 'm'],\n\t['₦', 'N'],\n\t['₧', 'Pt'],\n\t['₨', 'Rs'],\n\t['₩', 'W'],\n\t['₫', 's'],\n\t['€', 'E'],\n\t['₭', 'K'],\n\t['₮', 'T'],\n\t['₯', 'Dp'],\n\t['₰', 'S'],\n\t['₱', 'P'],\n\t['₲', 'G'],\n\t['₳', 'A'],\n\t['₴', 'S'],\n\t['₵', 'C'],\n\t['₶', 'tt'],\n\t['₷', 'S'],\n\t['₸', 'T'],\n\t['₹', 'R'],\n\t['₺', 'L'],\n\t['₽', 'P'],\n\t['₿', 'B'],\n\t['﹩', '$'],\n\t['￠', 'c'],\n\t['￥', 'Y'],\n\t['￦', 'W'],\n\n\t// Latin\n\t['𝐀', 'A'],\n\t['𝐁', 'B'],\n\t['𝐂', 'C'],\n\t['𝐃', 'D'],\n\t['𝐄', 'E'],\n\t['𝐅', 'F'],\n\t['𝐆', 'G'],\n\t['𝐇', 'H'],\n\t['𝐈', 'I'],\n\t['𝐉', 'J'],\n\t['𝐊', 'K'],\n\t['𝐋', 'L'],\n\t['𝐌', 'M'],\n\t['𝐍', 'N'],\n\t['𝐎', 'O'],\n\t['𝐏', 'P'],\n\t['𝐐', 'Q'],\n\t['𝐑', 'R'],\n\t['𝐒', 'S'],\n\t['𝐓', 'T'],\n\t['𝐔', 'U'],\n\t['𝐕', 'V'],\n\t['𝐖', 'W'],\n\t['𝐗', 'X'],\n\t['𝐘', 'Y'],\n\t['𝐙', 'Z'],\n\t['𝐚', 'a'],\n\t['𝐛', 'b'],\n\t['𝐜', 'c'],\n\t['𝐝', 'd'],\n\t['𝐞', 'e'],\n\t['𝐟', 'f'],\n\t['𝐠', 'g'],\n\t['𝐡', 'h'],\n\t['𝐢', 'i'],\n\t['𝐣', 'j'],\n\t['𝐤', 'k'],\n\t['𝐥', 'l'],\n\t['𝐦', 'm'],\n\t['𝐧', 'n'],\n\t['𝐨', 'o'],\n\t['𝐩', 'p'],\n\t['𝐪', 'q'],\n\t['𝐫', 'r'],\n\t['𝐬', 's'],\n\t['𝐭', 't'],\n\t['𝐮', 'u'],\n\t['𝐯', 'v'],\n\t['𝐰', 'w'],\n\t['𝐱', 'x'],\n\t['𝐲', 'y'],\n\t['𝐳', 'z'],\n\t['𝐴', 'A'],\n\t['𝐵', 'B'],\n\t['𝐶', 'C'],\n\t['𝐷', 'D'],\n\t['𝐸', 'E'],\n\t['𝐹', 'F'],\n\t['𝐺', 'G'],\n\t['𝐻', 'H'],\n\t['𝐼', 'I'],\n\t['𝐽', 'J'],\n\t['𝐾', 'K'],\n\t['𝐿', 'L'],\n\t['𝑀', 'M'],\n\t['𝑁', 'N'],\n\t['𝑂', 'O'],\n\t['𝑃', 'P'],\n\t['𝑄', 'Q'],\n\t['𝑅', 'R'],\n\t['𝑆', 'S'],\n\t['𝑇', 'T'],\n\t['𝑈', 'U'],\n\t['𝑉', 'V'],\n\t['𝑊', 'W'],\n\t['𝑋', 'X'],\n\t['𝑌', 'Y'],\n\t['𝑍', 'Z'],\n\t['𝑎', 'a'],\n\t['𝑏', 'b'],\n\t['𝑐', 'c'],\n\t['𝑑', 'd'],\n\t['𝑒', 'e'],\n\t['𝑓', 'f'],\n\t['𝑔', 'g'],\n\t['𝑖', 'i'],\n\t['𝑗', 'j'],\n\t['𝑘', 'k'],\n\t['𝑙', 'l'],\n\t['𝑚', 'm'],\n\t['𝑛', 'n'],\n\t['𝑜', 'o'],\n\t['𝑝', 'p'],\n\t['𝑞', 'q'],\n\t['𝑟', 'r'],\n\t['𝑠', 's'],\n\t['𝑡', 't'],\n\t['𝑢', 'u'],\n\t['𝑣', 'v'],\n\t['𝑤', 'w'],\n\t['𝑥', 'x'],\n\t['𝑦', 'y'],\n\t['𝑧', 'z'],\n\t['𝑨', 'A'],\n\t['𝑩', 'B'],\n\t['𝑪', 'C'],\n\t['𝑫', 'D'],\n\t['𝑬', 'E'],\n\t['𝑭', 'F'],\n\t['𝑮', 'G'],\n\t['𝑯', 'H'],\n\t['𝑰', 'I'],\n\t['𝑱', 'J'],\n\t['𝑲', 'K'],\n\t['𝑳', 'L'],\n\t['𝑴', 'M'],\n\t['𝑵', 'N'],\n\t['𝑶', 'O'],\n\t['𝑷', 'P'],\n\t['𝑸', 'Q'],\n\t['𝑹', 'R'],\n\t['𝑺', 'S'],\n\t['𝑻', 'T'],\n\t['𝑼', 'U'],\n\t['𝑽', 'V'],\n\t['𝑾', 'W'],\n\t['𝑿', 'X'],\n\t['𝒀', 'Y'],\n\t['𝒁', 'Z'],\n\t['𝒂', 'a'],\n\t['𝒃', 'b'],\n\t['𝒄', 'c'],\n\t['𝒅', 'd'],\n\t['𝒆', 'e'],\n\t['𝒇', 'f'],\n\t['𝒈', 'g'],\n\t['𝒉', 'h'],\n\t['𝒊', 'i'],\n\t['𝒋', 'j'],\n\t['𝒌', 'k'],\n\t['𝒍', 'l'],\n\t['𝒎', 'm'],\n\t['𝒏', 'n'],\n\t['𝒐', 'o'],\n\t['𝒑', 'p'],\n\t['𝒒', 'q'],\n\t['𝒓', 'r'],\n\t['𝒔', 's'],\n\t['𝒕', 't'],\n\t['𝒖', 'u'],\n\t['𝒗', 'v'],\n\t['𝒘', 'w'],\n\t['𝒙', 'x'],\n\t['𝒚', 'y'],\n\t['𝒛', 'z'],\n\t['𝒜', 'A'],\n\t['𝒞', 'C'],\n\t['𝒟', 'D'],\n\t['𝒢', 'g'],\n\t['𝒥', 'J'],\n\t['𝒦', 'K'],\n\t['𝒩', 'N'],\n\t['𝒪', 'O'],\n\t['𝒫', 'P'],\n\t['𝒬', 'Q'],\n\t['𝒮', 'S'],\n\t['𝒯', 'T'],\n\t['𝒰', 'U'],\n\t['𝒱', 'V'],\n\t['𝒲', 'W'],\n\t['𝒳', 'X'],\n\t['𝒴', 'Y'],\n\t['𝒵', 'Z'],\n\t['𝒶', 'a'],\n\t['𝒷', 'b'],\n\t['𝒸', 'c'],\n\t['𝒹', 'd'],\n\t['𝒻', 'f'],\n\t['𝒽', 'h'],\n\t['𝒾', 'i'],\n\t['𝒿', 'j'],\n\t['𝓀', 'h'],\n\t['𝓁', 'l'],\n\t['𝓂', 'm'],\n\t['𝓃', 'n'],\n\t['𝓅', 'p'],\n\t['𝓆', 'q'],\n\t['𝓇', 'r'],\n\t['𝓈', 's'],\n\t['𝓉', 't'],\n\t['𝓊', 'u'],\n\t['𝓋', 'v'],\n\t['𝓌', 'w'],\n\t['𝓍', 'x'],\n\t['𝓎', 'y'],\n\t['𝓏', 'z'],\n\t['𝓐', 'A'],\n\t['𝓑', 'B'],\n\t['𝓒', 'C'],\n\t['𝓓', 'D'],\n\t['𝓔', 'E'],\n\t['𝓕', 'F'],\n\t['𝓖', 'G'],\n\t['𝓗', 'H'],\n\t['𝓘', 'I'],\n\t['𝓙', 'J'],\n\t['𝓚', 'K'],\n\t['𝓛', 'L'],\n\t['𝓜', 'M'],\n\t['𝓝', 'N'],\n\t['𝓞', 'O'],\n\t['𝓟', 'P'],\n\t['𝓠', 'Q'],\n\t['𝓡', 'R'],\n\t['𝓢', 'S'],\n\t['𝓣', 'T'],\n\t['𝓤', 'U'],\n\t['𝓥', 'V'],\n\t['𝓦', 'W'],\n\t['𝓧', 'X'],\n\t['𝓨', 'Y'],\n\t['𝓩', 'Z'],\n\t['𝓪', 'a'],\n\t['𝓫', 'b'],\n\t['𝓬', 'c'],\n\t['𝓭', 'd'],\n\t['𝓮', 'e'],\n\t['𝓯', 'f'],\n\t['𝓰', 'g'],\n\t['𝓱', 'h'],\n\t['𝓲', 'i'],\n\t['𝓳', 'j'],\n\t['𝓴', 'k'],\n\t['𝓵', 'l'],\n\t['𝓶', 'm'],\n\t['𝓷', 'n'],\n\t['𝓸', 'o'],\n\t['𝓹', 'p'],\n\t['𝓺', 'q'],\n\t['𝓻', 'r'],\n\t['𝓼', 's'],\n\t['𝓽', 't'],\n\t['𝓾', 'u'],\n\t['𝓿', 'v'],\n\t['𝔀', 'w'],\n\t['𝔁', 'x'],\n\t['𝔂', 'y'],\n\t['𝔃', 'z'],\n\t['𝔄', 'A'],\n\t['𝔅', 'B'],\n\t['𝔇', 'D'],\n\t['𝔈', 'E'],\n\t['𝔉', 'F'],\n\t['𝔊', 'G'],\n\t['𝔍', 'J'],\n\t['𝔎', 'K'],\n\t['𝔏', 'L'],\n\t['𝔐', 'M'],\n\t['𝔑', 'N'],\n\t['𝔒', 'O'],\n\t['𝔓', 'P'],\n\t['𝔔', 'Q'],\n\t['𝔖', 'S'],\n\t['𝔗', 'T'],\n\t['𝔘', 'U'],\n\t['𝔙', 'V'],\n\t['𝔚', 'W'],\n\t['𝔛', 'X'],\n\t['𝔜', 'Y'],\n\t['𝔞', 'a'],\n\t['𝔟', 'b'],\n\t['𝔠', 'c'],\n\t['𝔡', 'd'],\n\t['𝔢', 'e'],\n\t['𝔣', 'f'],\n\t['𝔤', 'g'],\n\t['𝔥', 'h'],\n\t['𝔦', 'i'],\n\t['𝔧', 'j'],\n\t['𝔨', 'k'],\n\t['𝔩', 'l'],\n\t['𝔪', 'm'],\n\t['𝔫', 'n'],\n\t['𝔬', 'o'],\n\t['𝔭', 'p'],\n\t['𝔮', 'q'],\n\t['𝔯', 'r'],\n\t['𝔰', 's'],\n\t['𝔱', 't'],\n\t['𝔲', 'u'],\n\t['𝔳', 'v'],\n\t['𝔴', 'w'],\n\t['𝔵', 'x'],\n\t['𝔶', 'y'],\n\t['𝔷', 'z'],\n\t['𝔸', 'A'],\n\t['𝔹', 'B'],\n\t['𝔻', 'D'],\n\t['𝔼', 'E'],\n\t['𝔽', 'F'],\n\t['𝔾', 'G'],\n\t['𝕀', 'I'],\n\t['𝕁', 'J'],\n\t['𝕂', 'K'],\n\t['𝕃', 'L'],\n\t['𝕄', 'M'],\n\t['𝕆', 'N'],\n\t['𝕊', 'S'],\n\t['𝕋', 'T'],\n\t['𝕌', 'U'],\n\t['𝕍', 'V'],\n\t['𝕎', 'W'],\n\t['𝕏', 'X'],\n\t['𝕐', 'Y'],\n\t['𝕒', 'a'],\n\t['𝕓', 'b'],\n\t['𝕔', 'c'],\n\t['𝕕', 'd'],\n\t['𝕖', 'e'],\n\t['𝕗', 'f'],\n\t['𝕘', 'g'],\n\t['𝕙', 'h'],\n\t['𝕚', 'i'],\n\t['𝕛', 'j'],\n\t['𝕜', 'k'],\n\t['𝕝', 'l'],\n\t['𝕞', 'm'],\n\t['𝕟', 'n'],\n\t['𝕠', 'o'],\n\t['𝕡', 'p'],\n\t['𝕢', 'q'],\n\t['𝕣', 'r'],\n\t['𝕤', 's'],\n\t['𝕥', 't'],\n\t['𝕦', 'u'],\n\t['𝕧', 'v'],\n\t['𝕨', 'w'],\n\t['𝕩', 'x'],\n\t['𝕪', 'y'],\n\t['𝕫', 'z'],\n\t['𝕬', 'A'],\n\t['𝕭', 'B'],\n\t['𝕮', 'C'],\n\t['𝕯', 'D'],\n\t['𝕰', 'E'],\n\t['𝕱', 'F'],\n\t['𝕲', 'G'],\n\t['𝕳', 'H'],\n\t['𝕴', 'I'],\n\t['𝕵', 'J'],\n\t['𝕶', 'K'],\n\t['𝕷', 'L'],\n\t['𝕸', 'M'],\n\t['𝕹', 'N'],\n\t['𝕺', 'O'],\n\t['𝕻', 'P'],\n\t['𝕼', 'Q'],\n\t['𝕽', 'R'],\n\t['𝕾', 'S'],\n\t['𝕿', 'T'],\n\t['𝖀', 'U'],\n\t['𝖁', 'V'],\n\t['𝖂', 'W'],\n\t['𝖃', 'X'],\n\t['𝖄', 'Y'],\n\t['𝖅', 'Z'],\n\t['𝖆', 'a'],\n\t['𝖇', 'b'],\n\t['𝖈', 'c'],\n\t['𝖉', 'd'],\n\t['𝖊', 'e'],\n\t['𝖋', 'f'],\n\t['𝖌', 'g'],\n\t['𝖍', 'h'],\n\t['𝖎', 'i'],\n\t['𝖏', 'j'],\n\t['𝖐', 'k'],\n\t['𝖑', 'l'],\n\t['𝖒', 'm'],\n\t['𝖓', 'n'],\n\t['𝖔', 'o'],\n\t['𝖕', 'p'],\n\t['𝖖', 'q'],\n\t['𝖗', 'r'],\n\t['𝖘', 's'],\n\t['𝖙', 't'],\n\t['𝖚', 'u'],\n\t['𝖛', 'v'],\n\t['𝖜', 'w'],\n\t['𝖝', 'x'],\n\t['𝖞', 'y'],\n\t['𝖟', 'z'],\n\t['𝖠', 'A'],\n\t['𝖡', 'B'],\n\t['𝖢', 'C'],\n\t['𝖣', 'D'],\n\t['𝖤', 'E'],\n\t['𝖥', 'F'],\n\t['𝖦', 'G'],\n\t['𝖧', 'H'],\n\t['𝖨', 'I'],\n\t['𝖩', 'J'],\n\t['𝖪', 'K'],\n\t['𝖫', 'L'],\n\t['𝖬', 'M'],\n\t['𝖭', 'N'],\n\t['𝖮', 'O'],\n\t['𝖯', 'P'],\n\t['𝖰', 'Q'],\n\t['𝖱', 'R'],\n\t['𝖲', 'S'],\n\t['𝖳', 'T'],\n\t['𝖴', 'U'],\n\t['𝖵', 'V'],\n\t['𝖶', 'W'],\n\t['𝖷', 'X'],\n\t['𝖸', 'Y'],\n\t['𝖹', 'Z'],\n\t['𝖺', 'a'],\n\t['𝖻', 'b'],\n\t['𝖼', 'c'],\n\t['𝖽', 'd'],\n\t['𝖾', 'e'],\n\t['𝖿', 'f'],\n\t['𝗀', 'g'],\n\t['𝗁', 'h'],\n\t['𝗂', 'i'],\n\t['𝗃', 'j'],\n\t['𝗄', 'k'],\n\t['𝗅', 'l'],\n\t['𝗆', 'm'],\n\t['𝗇', 'n'],\n\t['𝗈', 'o'],\n\t['𝗉', 'p'],\n\t['𝗊', 'q'],\n\t['𝗋', 'r'],\n\t['𝗌', 's'],\n\t['𝗍', 't'],\n\t['𝗎', 'u'],\n\t['𝗏', 'v'],\n\t['𝗐', 'w'],\n\t['𝗑', 'x'],\n\t['𝗒', 'y'],\n\t['𝗓', 'z'],\n\t['𝗔', 'A'],\n\t['𝗕', 'B'],\n\t['𝗖', 'C'],\n\t['𝗗', 'D'],\n\t['𝗘', 'E'],\n\t['𝗙', 'F'],\n\t['𝗚', 'G'],\n\t['𝗛', 'H'],\n\t['𝗜', 'I'],\n\t['𝗝', 'J'],\n\t['𝗞', 'K'],\n\t['𝗟', 'L'],\n\t['𝗠', 'M'],\n\t['𝗡', 'N'],\n\t['𝗢', 'O'],\n\t['𝗣', 'P'],\n\t['𝗤', 'Q'],\n\t['𝗥', 'R'],\n\t['𝗦', 'S'],\n\t['𝗧', 'T'],\n\t['𝗨', 'U'],\n\t['𝗩', 'V'],\n\t['𝗪', 'W'],\n\t['𝗫', 'X'],\n\t['𝗬', 'Y'],\n\t['𝗭', 'Z'],\n\t['𝗮', 'a'],\n\t['𝗯', 'b'],\n\t['𝗰', 'c'],\n\t['𝗱', 'd'],\n\t['𝗲', 'e'],\n\t['𝗳', 'f'],\n\t['𝗴', 'g'],\n\t['𝗵', 'h'],\n\t['𝗶', 'i'],\n\t['𝗷', 'j'],\n\t['𝗸', 'k'],\n\t['𝗹', 'l'],\n\t['𝗺', 'm'],\n\t['𝗻', 'n'],\n\t['𝗼', 'o'],\n\t['𝗽', 'p'],\n\t['𝗾', 'q'],\n\t['𝗿', 'r'],\n\t['𝘀', 's'],\n\t['𝘁', 't'],\n\t['𝘂', 'u'],\n\t['𝘃', 'v'],\n\t['𝘄', 'w'],\n\t['𝘅', 'x'],\n\t['𝘆', 'y'],\n\t['𝘇', 'z'],\n\t['𝘈', 'A'],\n\t['𝘉', 'B'],\n\t['𝘊', 'C'],\n\t['𝘋', 'D'],\n\t['𝘌', 'E'],\n\t['𝘍', 'F'],\n\t['𝘎', 'G'],\n\t['𝘏', 'H'],\n\t['𝘐', 'I'],\n\t['𝘑', 'J'],\n\t['𝘒', 'K'],\n\t['𝘓', 'L'],\n\t['𝘔', 'M'],\n\t['𝘕', 'N'],\n\t['𝘖', 'O'],\n\t['𝘗', 'P'],\n\t['𝘘', 'Q'],\n\t['𝘙', 'R'],\n\t['𝘚', 'S'],\n\t['𝘛', 'T'],\n\t['𝘜', 'U'],\n\t['𝘝', 'V'],\n\t['𝘞', 'W'],\n\t['𝘟', 'X'],\n\t['𝘠', 'Y'],\n\t['𝘡', 'Z'],\n\t['𝘢', 'a'],\n\t['𝘣', 'b'],\n\t['𝘤', 'c'],\n\t['𝘥', 'd'],\n\t['𝘦', 'e'],\n\t['𝘧', 'f'],\n\t['𝘨', 'g'],\n\t['𝘩', 'h'],\n\t['𝘪', 'i'],\n\t['𝘫', 'j'],\n\t['𝘬', 'k'],\n\t['𝘭', 'l'],\n\t['𝘮', 'm'],\n\t['𝘯', 'n'],\n\t['𝘰', 'o'],\n\t['𝘱', 'p'],\n\t['𝘲', 'q'],\n\t['𝘳', 'r'],\n\t['𝘴', 's'],\n\t['𝘵', 't'],\n\t['𝘶', 'u'],\n\t['𝘷', 'v'],\n\t['𝘸', 'w'],\n\t['𝘹', 'x'],\n\t['𝘺', 'y'],\n\t['𝘻', 'z'],\n\t['𝘼', 'A'],\n\t['𝘽', 'B'],\n\t['𝘾', 'C'],\n\t['𝘿', 'D'],\n\t['𝙀', 'E'],\n\t['𝙁', 'F'],\n\t['𝙂', 'G'],\n\t['𝙃', 'H'],\n\t['𝙄', 'I'],\n\t['𝙅', 'J'],\n\t['𝙆', 'K'],\n\t['𝙇', 'L'],\n\t['𝙈', 'M'],\n\t['𝙉', 'N'],\n\t['𝙊', 'O'],\n\t['𝙋', 'P'],\n\t['𝙌', 'Q'],\n\t['𝙍', 'R'],\n\t['𝙎', 'S'],\n\t['𝙏', 'T'],\n\t['𝙐', 'U'],\n\t['𝙑', 'V'],\n\t['𝙒', 'W'],\n\t['𝙓', 'X'],\n\t['𝙔', 'Y'],\n\t['𝙕', 'Z'],\n\t['𝙖', 'a'],\n\t['𝙗', 'b'],\n\t['𝙘', 'c'],\n\t['𝙙', 'd'],\n\t['𝙚', 'e'],\n\t['𝙛', 'f'],\n\t['𝙜', 'g'],\n\t['𝙝', 'h'],\n\t['𝙞', 'i'],\n\t['𝙟', 'j'],\n\t['𝙠', 'k'],\n\t['𝙡', 'l'],\n\t['𝙢', 'm'],\n\t['𝙣', 'n'],\n\t['𝙤', 'o'],\n\t['𝙥', 'p'],\n\t['𝙦', 'q'],\n\t['𝙧', 'r'],\n\t['𝙨', 's'],\n\t['𝙩', 't'],\n\t['𝙪', 'u'],\n\t['𝙫', 'v'],\n\t['𝙬', 'w'],\n\t['𝙭', 'x'],\n\t['𝙮', 'y'],\n\t['𝙯', 'z'],\n\t['𝙰', 'A'],\n\t['𝙱', 'B'],\n\t['𝙲', 'C'],\n\t['𝙳', 'D'],\n\t['𝙴', 'E'],\n\t['𝙵', 'F'],\n\t['𝙶', 'G'],\n\t['𝙷', 'H'],\n\t['𝙸', 'I'],\n\t['𝙹', 'J'],\n\t['𝙺', 'K'],\n\t['𝙻', 'L'],\n\t['𝙼', 'M'],\n\t['𝙽', 'N'],\n\t['𝙾', 'O'],\n\t['𝙿', 'P'],\n\t['𝚀', 'Q'],\n\t['𝚁', 'R'],\n\t['𝚂', 'S'],\n\t['𝚃', 'T'],\n\t['𝚄', 'U'],\n\t['𝚅', 'V'],\n\t['𝚆', 'W'],\n\t['𝚇', 'X'],\n\t['𝚈', 'Y'],\n\t['𝚉', 'Z'],\n\t['𝚊', 'a'],\n\t['𝚋', 'b'],\n\t['𝚌', 'c'],\n\t['𝚍', 'd'],\n\t['𝚎', 'e'],\n\t['𝚏', 'f'],\n\t['𝚐', 'g'],\n\t['𝚑', 'h'],\n\t['𝚒', 'i'],\n\t['𝚓', 'j'],\n\t['𝚔', 'k'],\n\t['𝚕', 'l'],\n\t['𝚖', 'm'],\n\t['𝚗', 'n'],\n\t['𝚘', 'o'],\n\t['𝚙', 'p'],\n\t['𝚚', 'q'],\n\t['𝚛', 'r'],\n\t['𝚜', 's'],\n\t['𝚝', 't'],\n\t['𝚞', 'u'],\n\t['𝚟', 'v'],\n\t['𝚠', 'w'],\n\t['𝚡', 'x'],\n\t['𝚢', 'y'],\n\t['𝚣', 'z'],\n\n\t// Dotless letters\n\t['𝚤', 'l'],\n\t['𝚥', 'j'],\n\n\t// Greek\n\t['𝛢', 'A'],\n\t['𝛣', 'B'],\n\t['𝛤', 'G'],\n\t['𝛥', 'D'],\n\t['𝛦', 'E'],\n\t['𝛧', 'Z'],\n\t['𝛨', 'I'],\n\t['𝛩', 'TH'],\n\t['𝛪', 'I'],\n\t['𝛫', 'K'],\n\t['𝛬', 'L'],\n\t['𝛭', 'M'],\n\t['𝛮', 'N'],\n\t['𝛯', 'KS'],\n\t['𝛰', 'O'],\n\t['𝛱', 'P'],\n\t['𝛲', 'R'],\n\t['𝛳', 'TH'],\n\t['𝛴', 'S'],\n\t['𝛵', 'T'],\n\t['𝛶', 'Y'],\n\t['𝛷', 'F'],\n\t['𝛸', 'x'],\n\t['𝛹', 'PS'],\n\t['𝛺', 'O'],\n\t['𝛻', 'D'],\n\t['𝛼', 'a'],\n\t['𝛽', 'b'],\n\t['𝛾', 'g'],\n\t['𝛿', 'd'],\n\t['𝜀', 'e'],\n\t['𝜁', 'z'],\n\t['𝜂', 'i'],\n\t['𝜃', 'th'],\n\t['𝜄', 'i'],\n\t['𝜅', 'k'],\n\t['𝜆', 'l'],\n\t['𝜇', 'm'],\n\t['𝜈', 'n'],\n\t['𝜉', 'ks'],\n\t['𝜊', 'o'],\n\t['𝜋', 'p'],\n\t['𝜌', 'r'],\n\t['𝜍', 's'],\n\t['𝜎', 's'],\n\t['𝜏', 't'],\n\t['𝜐', 'y'],\n\t['𝜑', 'f'],\n\t['𝜒', 'x'],\n\t['𝜓', 'ps'],\n\t['𝜔', 'o'],\n\t['𝜕', 'd'],\n\t['𝜖', 'E'],\n\t['𝜗', 'TH'],\n\t['𝜘', 'K'],\n\t['𝜙', 'f'],\n\t['𝜚', 'r'],\n\t['𝜛', 'p'],\n\t['𝜜', 'A'],\n\t['𝜝', 'V'],\n\t['𝜞', 'G'],\n\t['𝜟', 'D'],\n\t['𝜠', 'E'],\n\t['𝜡', 'Z'],\n\t['𝜢', 'I'],\n\t['𝜣', 'TH'],\n\t['𝜤', 'I'],\n\t['𝜥', 'K'],\n\t['𝜦', 'L'],\n\t['𝜧', 'M'],\n\t['𝜨', 'N'],\n\t['𝜩', 'KS'],\n\t['𝜪', 'O'],\n\t['𝜫', 'P'],\n\t['𝜬', 'S'],\n\t['𝜭', 'TH'],\n\t['𝜮', 'S'],\n\t['𝜯', 'T'],\n\t['𝜰', 'Y'],\n\t['𝜱', 'F'],\n\t['𝜲', 'X'],\n\t['𝜳', 'PS'],\n\t['𝜴', 'O'],\n\t['𝜵', 'D'],\n\t['𝜶', 'a'],\n\t['𝜷', 'v'],\n\t['𝜸', 'g'],\n\t['𝜹', 'd'],\n\t['𝜺', 'e'],\n\t['𝜻', 'z'],\n\t['𝜼', 'i'],\n\t['𝜽', 'th'],\n\t['𝜾', 'i'],\n\t['𝜿', 'k'],\n\t['𝝀', 'l'],\n\t['𝝁', 'm'],\n\t['𝝂', 'n'],\n\t['𝝃', 'ks'],\n\t['𝝄', 'o'],\n\t['𝝅', 'p'],\n\t['𝝆', 'r'],\n\t['𝝇', 's'],\n\t['𝝈', 's'],\n\t['𝝉', 't'],\n\t['𝝊', 'y'],\n\t['𝝋', 'f'],\n\t['𝝌', 'x'],\n\t['𝝍', 'ps'],\n\t['𝝎', 'o'],\n\t['𝝏', 'a'],\n\t['𝝐', 'e'],\n\t['𝝑', 'i'],\n\t['𝝒', 'k'],\n\t['𝝓', 'f'],\n\t['𝝔', 'r'],\n\t['𝝕', 'p'],\n\t['𝝖', 'A'],\n\t['𝝗', 'B'],\n\t['𝝘', 'G'],\n\t['𝝙', 'D'],\n\t['𝝚', 'E'],\n\t['𝝛', 'Z'],\n\t['𝝜', 'I'],\n\t['𝝝', 'TH'],\n\t['𝝞', 'I'],\n\t['𝝟', 'K'],\n\t['𝝠', 'L'],\n\t['𝝡', 'M'],\n\t['𝝢', 'N'],\n\t['𝝣', 'KS'],\n\t['𝝤', 'O'],\n\t['𝝥', 'P'],\n\t['𝝦', 'R'],\n\t['𝝧', 'TH'],\n\t['𝝨', 'S'],\n\t['𝝩', 'T'],\n\t['𝝪', 'Y'],\n\t['𝝫', 'F'],\n\t['𝝬', 'X'],\n\t['𝝭', 'PS'],\n\t['𝝮', 'O'],\n\t['𝝯', 'D'],\n\t['𝝰', 'a'],\n\t['𝝱', 'v'],\n\t['𝝲', 'g'],\n\t['𝝳', 'd'],\n\t['𝝴', 'e'],\n\t['𝝵', 'z'],\n\t['𝝶', 'i'],\n\t['𝝷', 'th'],\n\t['𝝸', 'i'],\n\t['𝝹', 'k'],\n\t['𝝺', 'l'],\n\t['𝝻', 'm'],\n\t['𝝼', 'n'],\n\t['𝝽', 'ks'],\n\t['𝝾', 'o'],\n\t['𝝿', 'p'],\n\t['𝞀', 'r'],\n\t['𝞁', 's'],\n\t['𝞂', 's'],\n\t['𝞃', 't'],\n\t['𝞄', 'y'],\n\t['𝞅', 'f'],\n\t['𝞆', 'x'],\n\t['𝞇', 'ps'],\n\t['𝞈', 'o'],\n\t['𝞉', 'a'],\n\t['𝞊', 'e'],\n\t['𝞋', 'i'],\n\t['𝞌', 'k'],\n\t['𝞍', 'f'],\n\t['𝞎', 'r'],\n\t['𝞏', 'p'],\n\t['𝞐', 'A'],\n\t['𝞑', 'V'],\n\t['𝞒', 'G'],\n\t['𝞓', 'D'],\n\t['𝞔', 'E'],\n\t['𝞕', 'Z'],\n\t['𝞖', 'I'],\n\t['𝞗', 'TH'],\n\t['𝞘', 'I'],\n\t['𝞙', 'K'],\n\t['𝞚', 'L'],\n\t['𝞛', 'M'],\n\t['𝞜', 'N'],\n\t['𝞝', 'KS'],\n\t['𝞞', 'O'],\n\t['𝞟', 'P'],\n\t['𝞠', 'S'],\n\t['𝞡', 'TH'],\n\t['𝞢', 'S'],\n\t['𝞣', 'T'],\n\t['𝞤', 'Y'],\n\t['𝞥', 'F'],\n\t['𝞦', 'X'],\n\t['𝞧', 'PS'],\n\t['𝞨', 'O'],\n\t['𝞩', 'D'],\n\t['𝞪', 'av'],\n\t['𝞫', 'g'],\n\t['𝞬', 'd'],\n\t['𝞭', 'e'],\n\t['𝞮', 'z'],\n\t['𝞯', 'i'],\n\t['𝞰', 'i'],\n\t['𝞱', 'th'],\n\t['𝞲', 'i'],\n\t['𝞳', 'k'],\n\t['𝞴', 'l'],\n\t['𝞵', 'm'],\n\t['𝞶', 'n'],\n\t['𝞷', 'ks'],\n\t['𝞸', 'o'],\n\t['𝞹', 'p'],\n\t['𝞺', 'r'],\n\t['𝞻', 's'],\n\t['𝞼', 's'],\n\t['𝞽', 't'],\n\t['𝞾', 'y'],\n\t['𝞿', 'f'],\n\t['𝟀', 'x'],\n\t['𝟁', 'ps'],\n\t['𝟂', 'o'],\n\t['𝟃', 'a'],\n\t['𝟄', 'e'],\n\t['𝟅', 'i'],\n\t['𝟆', 'k'],\n\t['𝟇', 'f'],\n\t['𝟈', 'r'],\n\t['𝟉', 'p'],\n\t['𝟊', 'F'],\n\t['𝟋', 'f'],\n\t['⒜', '(a)'],\n\t['⒝', '(b)'],\n\t['⒞', '(c)'],\n\t['⒟', '(d)'],\n\t['⒠', '(e)'],\n\t['⒡', '(f)'],\n\t['⒢', '(g)'],\n\t['⒣', '(h)'],\n\t['⒤', '(i)'],\n\t['⒥', '(j)'],\n\t['⒦', '(k)'],\n\t['⒧', '(l)'],\n\t['⒨', '(m)'],\n\t['⒩', '(n)'],\n\t['⒪', '(o)'],\n\t['⒫', '(p)'],\n\t['⒬', '(q)'],\n\t['⒭', '(r)'],\n\t['⒮', '(s)'],\n\t['⒯', '(t)'],\n\t['⒰', '(u)'],\n\t['⒱', '(v)'],\n\t['⒲', '(w)'],\n\t['⒳', '(x)'],\n\t['⒴', '(y)'],\n\t['⒵', '(z)'],\n\t['Ⓐ', '(A)'],\n\t['Ⓑ', '(B)'],\n\t['Ⓒ', '(C)'],\n\t['Ⓓ', '(D)'],\n\t['Ⓔ', '(E)'],\n\t['Ⓕ', '(F)'],\n\t['Ⓖ', '(G)'],\n\t['Ⓗ', '(H)'],\n\t['Ⓘ', '(I)'],\n\t['Ⓙ', '(J)'],\n\t['Ⓚ', '(K)'],\n\t['Ⓛ', '(L)'],\n\t['Ⓝ', '(N)'],\n\t['Ⓞ', '(O)'],\n\t['Ⓟ', '(P)'],\n\t['Ⓠ', '(Q)'],\n\t['Ⓡ', '(R)'],\n\t['Ⓢ', '(S)'],\n\t['Ⓣ', '(T)'],\n\t['Ⓤ', '(U)'],\n\t['Ⓥ', '(V)'],\n\t['Ⓦ', '(W)'],\n\t['Ⓧ', '(X)'],\n\t['Ⓨ', '(Y)'],\n\t['Ⓩ', '(Z)'],\n\t['ⓐ', '(a)'],\n\t['ⓑ', '(b)'],\n\t['ⓒ', '(b)'],\n\t['ⓓ', '(c)'],\n\t['ⓔ', '(e)'],\n\t['ⓕ', '(f)'],\n\t['ⓖ', '(g)'],\n\t['ⓗ', '(h)'],\n\t['ⓘ', '(i)'],\n\t['ⓙ', '(j)'],\n\t['ⓚ', '(k)'],\n\t['ⓛ', '(l)'],\n\t['ⓜ', '(m)'],\n\t['ⓝ', '(n)'],\n\t['ⓞ', '(o)'],\n\t['ⓟ', '(p)'],\n\t['ⓠ', '(q)'],\n\t['ⓡ', '(r)'],\n\t['ⓢ', '(s)'],\n\t['ⓣ', '(t)'],\n\t['ⓤ', '(u)'],\n\t['ⓥ', '(v)'],\n\t['ⓦ', '(w)'],\n\t['ⓧ', '(x)'],\n\t['ⓨ', '(y)'],\n\t['ⓩ', '(z)'],\n\n\t// Maltese\n\t['Ċ', 'C'],\n\t['ċ', 'c'],\n\t['Ġ', 'G'],\n\t['ġ', 'g'],\n\t['Ħ', 'H'],\n\t['ħ', 'h'],\n\t['Ż', 'Z'],\n\t['ż', 'z'],\n\n\t// Numbers\n\t['𝟎', '0'],\n\t['𝟏', '1'],\n\t['𝟐', '2'],\n\t['𝟑', '3'],\n\t['𝟒', '4'],\n\t['𝟓', '5'],\n\t['𝟔', '6'],\n\t['𝟕', '7'],\n\t['𝟖', '8'],\n\t['𝟗', '9'],\n\t['𝟘', '0'],\n\t['𝟙', '1'],\n\t['𝟚', '2'],\n\t['𝟛', '3'],\n\t['𝟜', '4'],\n\t['𝟝', '5'],\n\t['𝟞', '6'],\n\t['𝟟', '7'],\n\t['𝟠', '8'],\n\t['𝟡', '9'],\n\t['𝟢', '0'],\n\t['𝟣', '1'],\n\t['𝟤', '2'],\n\t['𝟥', '3'],\n\t['𝟦', '4'],\n\t['𝟧', '5'],\n\t['𝟨', '6'],\n\t['𝟩', '7'],\n\t['𝟪', '8'],\n\t['𝟫', '9'],\n\t['𝟬', '0'],\n\t['𝟭', '1'],\n\t['𝟮', '2'],\n\t['𝟯', '3'],\n\t['𝟰', '4'],\n\t['𝟱', '5'],\n\t['𝟲', '6'],\n\t['𝟳', '7'],\n\t['𝟴', '8'],\n\t['𝟵', '9'],\n\t['𝟶', '0'],\n\t['𝟷', '1'],\n\t['𝟸', '2'],\n\t['𝟹', '3'],\n\t['𝟺', '4'],\n\t['𝟻', '5'],\n\t['𝟼', '6'],\n\t['𝟽', '7'],\n\t['𝟾', '8'],\n\t['𝟿', '9'],\n\t['①', '1'],\n\t['②', '2'],\n\t['③', '3'],\n\t['④', '4'],\n\t['⑤', '5'],\n\t['⑥', '6'],\n\t['⑦', '7'],\n\t['⑧', '8'],\n\t['⑨', '9'],\n\t['⑩', '10'],\n\t['⑪', '11'],\n\t['⑫', '12'],\n\t['⑬', '13'],\n\t['⑭', '14'],\n\t['⑮', '15'],\n\t['⑯', '16'],\n\t['⑰', '17'],\n\t['⑱', '18'],\n\t['⑲', '19'],\n\t['⑳', '20'],\n\t['⑴', '1'],\n\t['⑵', '2'],\n\t['⑶', '3'],\n\t['⑷', '4'],\n\t['⑸', '5'],\n\t['⑹', '6'],\n\t['⑺', '7'],\n\t['⑻', '8'],\n\t['⑼', '9'],\n\t['⑽', '10'],\n\t['⑾', '11'],\n\t['⑿', '12'],\n\t['⒀', '13'],\n\t['⒁', '14'],\n\t['⒂', '15'],\n\t['⒃', '16'],\n\t['⒄', '17'],\n\t['⒅', '18'],\n\t['⒆', '19'],\n\t['⒇', '20'],\n\t['⒈', '1.'],\n\t['⒉', '2.'],\n\t['⒊', '3.'],\n\t['⒋', '4.'],\n\t['⒌', '5.'],\n\t['⒍', '6.'],\n\t['⒎', '7.'],\n\t['⒏', '8.'],\n\t['⒐', '9.'],\n\t['⒑', '10.'],\n\t['⒒', '11.'],\n\t['⒓', '12.'],\n\t['⒔', '13.'],\n\t['⒕', '14.'],\n\t['⒖', '15.'],\n\t['⒗', '16.'],\n\t['⒘', '17.'],\n\t['⒙', '18.'],\n\t['⒚', '19.'],\n\t['⒛', '20.'],\n\t['⓪', '0'],\n\t['⓫', '11'],\n\t['⓬', '12'],\n\t['⓭', '13'],\n\t['⓮', '14'],\n\t['⓯', '15'],\n\t['⓰', '16'],\n\t['⓱', '17'],\n\t['⓲', '18'],\n\t['⓳', '19'],\n\t['⓴', '20'],\n\t['⓵', '1'],\n\t['⓶', '2'],\n\t['⓷', '3'],\n\t['⓸', '4'],\n\t['⓹', '5'],\n\t['⓺', '6'],\n\t['⓻', '7'],\n\t['⓼', '8'],\n\t['⓽', '9'],\n\t['⓾', '10'],\n\t['⓿', '0'],\n\n\t// Punctuation\n\t['🙰', '&'],\n\t['🙱', '&'],\n\t['🙲', '&'],\n\t['🙳', '&'],\n\t['🙴', '&'],\n\t['🙵', '&'],\n\t['🙶', '\"'],\n\t['🙷', '\"'],\n\t['🙸', '\"'],\n\t['‽', '?!'],\n\t['🙹', '?!'],\n\t['🙺', '?!'],\n\t['🙻', '?!'],\n\t['🙼', '/'],\n\t['🙽', '\\\\'],\n\n\t// Alchemy\n\t['🜇', 'AR'],\n\t['🜈', 'V'],\n\t['🜉', 'V'],\n\t['🜆', 'VR'],\n\t['🜅', 'VF'],\n\t['🜩', '2'],\n\t['🜪', '5'],\n\t['🝡', 'f'],\n\t['🝢', 'W'],\n\t['🝣', 'U'],\n\t['🝧', 'V'],\n\t['🝨', 'T'],\n\t['🝪', 'V'],\n\t['🝫', 'MB'],\n\t['🝬', 'VB'],\n\t['🝲', '3B'],\n\t['🝳', '3B'],\n\n\t// Emojis\n\t['💯', '100'],\n\t['🔙', 'BACK'],\n\t['🔚', 'END'],\n\t['🔛', 'ON!'],\n\t['🔜', 'SOON'],\n\t['🔝', 'TOP'],\n\t['🔞', '18'],\n\t['🔤', 'abc'],\n\t['🔠', 'ABCD'],\n\t['🔡', 'abcd'],\n\t['🔢', '1234'],\n\t['🔣', 'T&@%'],\n\t['#️⃣', '#'],\n\t['*️⃣', '*'],\n\t['0️⃣', '0'],\n\t['1️⃣', '1'],\n\t['2️⃣', '2'],\n\t['3️⃣', '3'],\n\t['4️⃣', '4'],\n\t['5️⃣', '5'],\n\t['6️⃣', '6'],\n\t['7️⃣', '7'],\n\t['8️⃣', '8'],\n\t['9️⃣', '9'],\n\t['🔟', '10'],\n\t['🅰️', 'A'],\n\t['🅱️', 'B'],\n\t['🆎', 'AB'],\n\t['🆑', 'CL'],\n\t['🅾️', 'O'],\n\t['🅿', 'P'],\n\t['🆘', 'SOS'],\n\t['🅲', 'C'],\n\t['🅳', 'D'],\n\t['🅴', 'E'],\n\t['🅵', 'F'],\n\t['🅶', 'G'],\n\t['🅷', 'H'],\n\t['🅸', 'I'],\n\t['🅹', 'J'],\n\t['🅺', 'K'],\n\t['🅻', 'L'],\n\t['🅼', 'M'],\n\t['🅽', 'N'],\n\t['🆀', 'Q'],\n\t['🆁', 'R'],\n\t['🆂', 'S'],\n\t['🆃', 'T'],\n\t['🆄', 'U'],\n\t['🆅', 'V'],\n\t['🆆', 'W'],\n\t['🆇', 'X'],\n\t['🆈', 'Y'],\n\t['🆉', 'Z']\n];\n\nexport default replacements;\n", "import escapeStringRegexp from 'escape-string-regexp';\nimport builtinReplacements from './replacements.js';\n\nconst doCustomReplacements = (string, replacements) => {\n\tfor (const [key, value] of replacements) {\n\t\t// TODO: Use `String#replaceAll()` when targeting Node.js 16.\n\t\tstring = string.replace(new RegExp(escapeStringRegexp(key), 'g'), value);\n\t}\n\n\treturn string;\n};\n\nexport default function transliterate(string, options) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got \\`${typeof string}\\``);\n\t}\n\n\toptions = {\n\t\tcustomReplacements: [],\n\t\t...options\n\t};\n\n\tconst customReplacements = new Map([\n\t\t...builtinReplacements,\n\t\t...options.customReplacements\n\t]);\n\n\tstring = string.normalize();\n\tstring = doCustomReplacements(string, customReplacements);\n\tstring = string.normalize('NFD').replace(/\\p{Diacritic}/gu, '').normalize();\n\n\treturn string;\n}\n", "const overridableReplacements = [\n\t['&', ' and '],\n\t['🦄', ' unicorn '],\n\t['♥', ' love ']\n];\n\nexport default overridableReplacements;\n", "import escapeStringRegexp from 'escape-string-regexp';\nimport transliterate from '@sindresorhus/transliterate';\nimport builtinOverridableReplacements from './overridable-replacements.js';\n\nconst decamelize = string => {\n\treturn string\n\t\t// Separate capitalized words.\n\t\t.replace(/([A-Z]{2,})(\\d+)/g, '$1 $2')\n\t\t.replace(/([a-z\\d]+)([A-Z]{2,})/g, '$1 $2')\n\n\t\t.replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n\t\t// `[a-rt-z]` matches all lowercase characters except `s`.\n\t\t// This avoids matching plural acronyms like `APIs`.\n\t\t.replace(/([A-Z]+)([A-Z][a-rt-z\\d]+)/g, '$1 $2');\n};\n\nconst removeMootSeparators = (string, separator) => {\n\tconst escapedSeparator = escapeStringRegexp(separator);\n\n\treturn string\n\t\t.replace(new RegExp(`${escapedSeparator}{2,}`, 'g'), separator)\n\t\t.replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, 'g'), '');\n};\n\nconst buildPatternSlug = options => {\n\tlet negationSetPattern = 'a-z\\\\d';\n\tnegationSetPattern += options.lowercase ? '' : 'A-Z';\n\n\tif (options.preserveCharacters.length > 0) {\n\t\tfor (const character of options.preserveCharacters) {\n\t\t\tif (character === options.separator) {\n\t\t\t\tthrow new Error(`The separator character \\`${options.separator}\\` cannot be included in preserved characters: ${options.preserveCharacters}`);\n\t\t\t}\n\n\t\t\tnegationSetPattern += escapeStringRegexp(character);\n\t\t}\n\t}\n\n\treturn new RegExp(`[^${negationSetPattern}]+`, 'g');\n};\n\nexport default function slugify(string, options) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got \\`${typeof string}\\``);\n\t}\n\n\toptions = {\n\t\tseparator: '-',\n\t\tlowercase: true,\n\t\tdecamelize: true,\n\t\tcustomReplacements: [],\n\t\tpreserveLeadingUnderscore: false,\n\t\tpreserveTrailingDash: false,\n\t\tpreserveCharacters: [],\n\t\t...options\n\t};\n\n\tconst shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith('_');\n\tconst shouldAppendDash = options.preserveTrailingDash && string.endsWith('-');\n\n\tconst customReplacements = new Map([\n\t\t...builtinOverridableReplacements,\n\t\t...options.customReplacements\n\t]);\n\n\tstring = transliterate(string, {customReplacements});\n\n\tif (options.decamelize) {\n\t\tstring = decamelize(string);\n\t}\n\n\tconst patternSlug = buildPatternSlug(options);\n\n\tif (options.lowercase) {\n\t\tstring = string.toLowerCase();\n\t}\n\n\t// Detect contractions/possessives by looking for any word followed by a `'t`\n\t// or `'s` in isolation and then remove it.\n\tstring = string.replace(/([a-zA-Z\\d]+)'([ts])(\\s|$)/g, '$1$2$3');\n\n\tstring = string.replace(patternSlug, options.separator);\n\tstring = string.replace(/\\\\/g, '');\n\n\tif (options.separator) {\n\t\tstring = removeMootSeparators(string, options.separator);\n\t}\n\n\tif (shouldPrependUnderscore) {\n\t\tstring = `_${string}`;\n\t}\n\n\tif (shouldAppendDash) {\n\t\tstring = `${string}-`;\n\t}\n\n\treturn string;\n}\n\nexport function slugifyWithCounter() {\n\tconst occurrences = new Map();\n\n\tconst countable = (string, options) => {\n\t\tstring = slugify(string, options);\n\n\t\tif (!string) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst stringLower = string.toLowerCase();\n\t\tconst numberless = occurrences.get(stringLower.replace(/(?:-\\d+?)+?$/, '')) || 0;\n\t\tconst counter = occurrences.get(stringLower);\n\t\toccurrences.set(stringLower, typeof counter === 'number' ? counter + 1 : 1);\n\t\tconst newCounter = occurrences.get(stringLower) || 2;\n\t\tif (newCounter >= 2 || numberless > 2) {\n\t\t\tstring = `${string}-${newCounter}`;\n\t\t}\n\n\t\treturn string;\n\t};\n\n\tcountable.reset = () => {\n\t\toccurrences.clear();\n\t};\n\n\treturn countable;\n}\n", "import { findWrapping, ReplaceAroundStep, canSplit, liftTarget, canJoin } from 'prosemirror-transform';\nimport { NodeRange, Fragment, Slice } from 'prosemirror-model';\nimport { Selection } from 'prosemirror-state';\n\nconst olDOM = [\"ol\", 0], ulDOM = [\"ul\", 0], liDOM = [\"li\", 0];\n/**\nAn ordered list [node spec](https://prosemirror.net/docs/ref/#model.NodeSpec). Has a single\nattribute, `order`, which determines the number at which the list\nstarts counting, and defaults to 1. Represented as an `<ol>`\nelement.\n*/\nconst orderedList = {\n    attrs: { order: { default: 1 } },\n    parseDOM: [{ tag: \"ol\", getAttrs(dom) {\n                return { order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1 };\n            } }],\n    toDOM(node) {\n        return node.attrs.order == 1 ? olDOM : [\"ol\", { start: node.attrs.order }, 0];\n    }\n};\n/**\nA bullet list node spec, represented in the DOM as `<ul>`.\n*/\nconst bulletList = {\n    parseDOM: [{ tag: \"ul\" }],\n    toDOM() { return ulDOM; }\n};\n/**\nA list item (`<li>`) spec.\n*/\nconst listItem = {\n    parseDOM: [{ tag: \"li\" }],\n    toDOM() { return liDOM; },\n    defining: true\n};\nfunction add(obj, props) {\n    let copy = {};\n    for (let prop in obj)\n        copy[prop] = obj[prop];\n    for (let prop in props)\n        copy[prop] = props[prop];\n    return copy;\n}\n/**\nConvenience function for adding list-related node types to a map\nspecifying the nodes for a schema. Adds\n[`orderedList`](https://prosemirror.net/docs/ref/#schema-list.orderedList) as `\"ordered_list\"`,\n[`bulletList`](https://prosemirror.net/docs/ref/#schema-list.bulletList) as `\"bullet_list\"`, and\n[`listItem`](https://prosemirror.net/docs/ref/#schema-list.listItem) as `\"list_item\"`.\n\n`itemContent` determines the content expression for the list items.\nIf you want the commands defined in this module to apply to your\nlist structure, it should have a shape like `\"paragraph block*\"` or\n`\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\ngiven to assign a group name to the list node types, for example\n`\"block\"`.\n*/\nfunction addListNodes(nodes, itemContent, listGroup) {\n    return nodes.append({\n        ordered_list: add(orderedList, { content: \"list_item+\", group: listGroup }),\n        bullet_list: add(bulletList, { content: \"list_item+\", group: listGroup }),\n        list_item: add(listItem, { content: itemContent })\n    });\n}\n/**\nReturns a command function that wraps the selection in a list with\nthe given type an attributes. If `dispatch` is null, only return a\nvalue to indicate whether this is possible, but don't actually\nperform the change.\n*/\nfunction wrapInList(listType, attrs = null) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to), doJoin = false, outerRange = range;\n        if (!range)\n            return false;\n        // This is at the top of an existing list item\n        if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n            // Don't do anything if this is the top of the list\n            if ($from.index(range.depth - 1) == 0)\n                return false;\n            let $insert = state.doc.resolve(range.start - 2);\n            outerRange = new NodeRange($insert, $insert, range.depth);\n            if (range.endIndex < range.parent.childCount)\n                range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);\n            doJoin = true;\n        }\n        let wrap = findWrapping(outerRange, listType, attrs, range);\n        if (!wrap)\n            return false;\n        if (dispatch)\n            dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());\n        return true;\n    };\n}\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n    let content = Fragment.empty;\n    for (let i = wrappers.length - 1; i >= 0; i--)\n        content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n    tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));\n    let found = 0;\n    for (let i = 0; i < wrappers.length; i++)\n        if (wrappers[i].type == listType)\n            found = i + 1;\n    let splitDepth = wrappers.length - found;\n    let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;\n    for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {\n        if (!first && canSplit(tr.doc, splitPos, splitDepth)) {\n            tr.split(splitPos, splitDepth);\n            splitPos += 2 * splitDepth;\n        }\n        splitPos += parent.child(i).nodeSize;\n    }\n    return tr;\n}\n/**\nBuild a command that splits a non-empty textblock at the top level\nof a list item by also splitting that list item.\n*/\nfunction splitListItem(itemType, itemAttrs) {\n    return function (state, dispatch) {\n        let { $from, $to, node } = state.selection;\n        if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to))\n            return false;\n        let grandParent = $from.node(-1);\n        if (grandParent.type != itemType)\n            return false;\n        if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n            // In an empty block. If this is a nested list, the wrapping\n            // list item should be split. Otherwise, bail out and let next\n            // command handle lifting.\n            if ($from.depth == 3 || $from.node(-3).type != itemType ||\n                $from.index(-2) != $from.node(-2).childCount - 1)\n                return false;\n            if (dispatch) {\n                let wrap = Fragment.empty;\n                let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n                // Build a fragment containing empty versions of the structure\n                // from the outer list item to the parent node of the cursor\n                for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)\n                    wrap = Fragment.from($from.node(d).copy(wrap));\n                let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1\n                    : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n                // Add a second list item with an empty default start node\n                wrap = wrap.append(Fragment.from(itemType.createAndFill()));\n                let start = $from.before($from.depth - (depthBefore - 1));\n                let tr = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));\n                let sel = -1;\n                tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {\n                    if (sel > -1)\n                        return false;\n                    if (node.isTextblock && node.content.size == 0)\n                        sel = pos + 1;\n                });\n                if (sel > -1)\n                    tr.setSelection(Selection.near(tr.doc.resolve(sel)));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n        let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n        let tr = state.tr.delete($from.pos, $to.pos);\n        let types = nextType ? [itemAttrs ? { type: itemType, attrs: itemAttrs } : null, { type: nextType }] : undefined;\n        if (!canSplit(tr.doc, $from.pos, 2, types))\n            return false;\n        if (dispatch)\n            dispatch(tr.split($from.pos, 2, types).scrollIntoView());\n        return true;\n    };\n}\n/**\nCreate a command to lift the list item around the selection up into\na wrapping list.\n*/\nfunction liftListItem(itemType) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);\n        if (!range)\n            return false;\n        if (!dispatch)\n            return true;\n        if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n            return liftToOuterList(state, dispatch, itemType, range);\n        else // Outer list node\n            return liftOutOfList(state, dispatch, range);\n    };\n}\nfunction liftToOuterList(state, dispatch, itemType, range) {\n    let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);\n    if (end < endOfList) {\n        // There are siblings after the lifted items, which must become\n        // children of the last item\n        tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));\n        range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);\n    }\n    const target = liftTarget(range);\n    if (target == null)\n        return false;\n    tr.lift(range, target);\n    let after = tr.mapping.map(end, -1) - 1;\n    if (canJoin(tr.doc, after))\n        tr.join(after);\n    dispatch(tr.scrollIntoView());\n    return true;\n}\nfunction liftOutOfList(state, dispatch, range) {\n    let tr = state.tr, list = range.parent;\n    // Merge the list items into a single big item\n    for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n        pos -= list.child(i).nodeSize;\n        tr.delete(pos - 1, pos + 1);\n    }\n    let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;\n    if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)\n        return false;\n    let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;\n    let parent = $start.node(-1), indexBefore = $start.index(-1);\n    if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))\n        return false;\n    let start = $start.pos, end = start + item.nodeSize;\n    // Strip off the surrounding list. At the sides where we're not at\n    // the end of the list, the existing list is closed. At sides where\n    // this is the end, it is overwritten to its end.\n    tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))\n        .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));\n    dispatch(tr.scrollIntoView());\n    return true;\n}\n/**\nCreate a command to sink the list item around the selection down\ninto an inner list.\n*/\nfunction sinkListItem(itemType) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);\n        if (!range)\n            return false;\n        let startIndex = range.startIndex;\n        if (startIndex == 0)\n            return false;\n        let parent = range.parent, nodeBefore = parent.child(startIndex - 1);\n        if (nodeBefore.type != itemType)\n            return false;\n        if (dispatch) {\n            let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;\n            let inner = Fragment.from(nestedBefore ? itemType.create() : null);\n            let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);\n            let before = range.start, after = range.end;\n            dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))\n                .scrollIntoView());\n        }\n        return true;\n    };\n}\n\nexport { addListNodes, bulletList, liftListItem, listItem, orderedList, sinkListItem, splitListItem, wrapInList };\n", "/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Link} Link\n */\n\nimport {visit, SKIP} from 'unist-util-visit'\nimport {definitions} from 'mdast-util-definitions'\n\n/**\n * Plugin to transform references and definitions into normal links and images.\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\nexport default function remarkInlineLinks() {\n  return (tree) => {\n    const definition = definitions(tree)\n\n    visit(tree, (node, index, parent) => {\n      if (\n        node.type === 'definition' &&\n        parent !== null &&\n        typeof index === 'number'\n      ) {\n        parent.children.splice(index, 1)\n        return [SKIP, index]\n      }\n\n      if (node.type === 'imageReference' || node.type === 'linkReference') {\n        const def = definition(node.identifier)\n\n        if (def && parent !== null && typeof index === 'number') {\n          /** @type {Image|Link} */\n          const replacement =\n            node.type === 'imageReference'\n              ? {type: 'image', url: def.url, title: def.title, alt: node.alt}\n              : {\n                  type: 'link',\n                  url: def.url,\n                  title: def.title,\n                  children: node.children\n                }\n\n          parent.children[index] = replacement\n          return [SKIP, index]\n        }\n      }\n    })\n  }\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { SerializerState } from '@milkdown/transformer'\nimport type { Node } from '@milkdown/prose/model'\nimport { Fragment } from '@milkdown/prose/model'\n\nexport const serializeText = (state: SerializerState, node: Node) => {\n  const lastIsHardBreak\n    = node.childCount >= 1 && node.lastChild?.type.name === 'hardbreak'\n  if (!lastIsHardBreak) {\n    state.next(node.content)\n    return\n  }\n\n  const contentArr: Node[] = []\n  node.content.forEach((n, _, i) => {\n    if (i === node.childCount - 1)\n      return\n\n    contentArr.push(n)\n  })\n  state.next(Fragment.fromArray(contentArr))\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport const withMeta = <T extends MilkdownPlugin>(\n  plugin: T,\n  meta: Partial<Meta> & Pick<Meta, 'displayName'>,\n): T => {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/preset-commonmark',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, remarkStringifyOptionsCtx } from '@milkdown/core'\nimport { $command, $markAttr, $markSchema, $useKeymap } from '@milkdown/utils'\nimport { toggleMarkdownMark } from '@milkdown/prose'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the emphasis mark.\nexport const emphasisAttr = $markAttr('emphasis')\n\nwithMeta(emphasisAttr, {\n  displayName: 'Attr<emphasis>',\n  group: 'Emphasis',\n})\n\n/// Emphasis mark schema.\nexport const emphasisSchema = $markSchema('emphasis', ctx => ({\n  attrs: {\n    marker: {\n      default: ctx.get(remarkStringifyOptionsCtx).emphasis || '*',\n    },\n  },\n  parseDOM: [\n    { tag: 'i' },\n    { tag: 'em' },\n    { style: 'font-style', getAttrs: value => (value === 'italic') as false },\n  ],\n  toDOM: mark => ['em', ctx.get(emphasisAttr.key)(mark)],\n  parseMarkdown: {\n    match: node => node.type === 'emphasis',\n    runner: (state, node, markType) => {\n      state.openMark(markType, { marker: node.marker })\n      state.next(node.children)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'emphasis',\n    runner: (state, mark) => {\n      state.withMark(mark, 'emphasis', undefined, {\n        marker: mark.attrs.marker,\n      })\n    },\n  },\n}))\n\nwithMeta(emphasisSchema.mark, {\n  displayName: 'MarkSchema<emphasis>',\n  group: 'Emphasis',\n})\n\nwithMeta(emphasisSchema.ctx, {\n  displayName: 'MarkSchemaCtx<emphasis>',\n  group: 'Emphasis',\n})\n\n/// A command to toggle the emphasis mark.\nexport const toggleEmphasisCommand = $command('ToggleEmphasis', ctx => () => {\n  const markType = emphasisSchema.type()\n  const mark = ctx.get(remarkStringifyOptionsCtx).emphasis || '*'\n  return toggleMarkdownMark(markType, mark)\n})\n\nwithMeta(toggleEmphasisCommand, {\n  displayName: 'Command<toggleEmphasisCommand>',\n  group: 'Emphasis',\n})\n\n/// Keymap for the emphasis mark.\n/// - `Mod-i` - Toggle the emphasis mark.\nexport const emphasisKeymap = $useKeymap('emphasisKeymap', {\n  ToggleEmphasis: {\n    shortcuts: 'Mod-i',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(toggleEmphasisCommand.key)\n    },\n  },\n})\n\nwithMeta(emphasisKeymap.ctx, {\n  displayName: 'KeymapCtx<emphasis>',\n  group: 'Emphasis',\n})\n\nwithMeta(emphasisKeymap.shortcuts, {\n  displayName: 'Keymap<emphasis>',\n  group: 'Emphasis',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, remarkStringifyOptionsCtx } from '@milkdown/core'\nimport { $command, $markAttr, $markSchema, $useKeymap } from '@milkdown/utils'\nimport { toggleMarkdownMark } from '@milkdown/prose'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the strong mark.\nexport const strongAttr = $markAttr('strong')\n\nwithMeta(strongAttr, {\n  displayName: 'Attr<strong>',\n  group: 'Strong',\n})\n\n/// Strong mark schema.\nexport const strongSchema = $markSchema('strong', ctx => ({\n  attrs: {\n    marker: {\n      default: ctx.get(remarkStringifyOptionsCtx).strong || '*',\n    },\n  },\n  parseDOM: [\n    { tag: 'b' },\n    { tag: 'strong' },\n    { style: 'font-style', getAttrs: value => (value === 'bold') as false },\n  ],\n  toDOM: mark => ['strong', ctx.get(strongAttr.key)(mark)],\n  parseMarkdown: {\n    match: node => node.type === 'strong',\n    runner: (state, node, markType) => {\n      state.openMark(markType, { marker: node.marker })\n      state.next(node.children)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'strong',\n    runner: (state, mark) => {\n      state.withMark(mark, 'strong', undefined, {\n        marker: mark.attrs.marker,\n      })\n    },\n  },\n}))\n\nwithMeta(strongSchema.mark, {\n  displayName: 'MarkSchema<strong>',\n  group: 'Strong',\n})\n\nwithMeta(strongSchema.ctx, {\n  displayName: 'MarkSchemaCtx<strong>',\n  group: 'Strong',\n})\n\n/// A command to toggle the strong mark.\nexport const toggleStrongCommand = $command('ToggleStrong', ctx => () => {\n  const markType = strongSchema.type()\n  const markSymbol = ctx.get(remarkStringifyOptionsCtx).strong || '*'\n  const mark = markSymbol + markSymbol\n  return toggleMarkdownMark(markType, mark)\n})\n\nwithMeta(toggleStrongCommand, {\n  displayName: 'Command<toggleStrongCommand>',\n  group: 'Strong',\n})\n\n/// Keymap for the strong mark.\n/// - `Mod-b` - Toggle the strong mark.\nexport const strongKeymap = $useKeymap('strongKeymap', {\n  ToggleBold: {\n    shortcuts: ['Mod-b'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(toggleStrongCommand.key)\n    },\n  },\n})\n\nwithMeta(strongKeymap.ctx, {\n  displayName: 'KeymapCtx<strong>',\n  group: 'Strong',\n})\n\nwithMeta(strongKeymap.shortcuts, {\n  displayName: 'Keymap<strong>',\n  group: 'Strong',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport type { MarkType } from '@milkdown/prose/model'\nimport { $command, $markAttr, $markSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the inlineCode mark.\nexport const inlineCodeAttr = $markAttr('inlineCode')\n\nwithMeta(inlineCodeAttr, {\n  displayName: 'Attr<inlineCode>',\n  group: 'InlineCode',\n})\n\n/// InlineCode mark schema.\nexport const inlineCodeSchema = $markSchema('inlineCode', ctx => ({\n  priority: 100,\n  code: true,\n  inclusive: false,\n  parseDOM: [{ tag: 'code' }],\n  toDOM: mark => ['code', ctx.get(inlineCodeAttr.key)(mark)],\n  parseMarkdown: {\n    match: node => node.type === 'inlineCode',\n    runner: (state, node, markType) => {\n      state.openMark(markType)\n      state.addText(node.value as string)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'inlineCode',\n    runner: (state, mark, node) => {\n      state.withMark(mark, 'inlineCode', node.text || '')\n    },\n  },\n}))\n\nwithMeta(inlineCodeSchema.mark, {\n  displayName: 'MarkSchema<inlineCode>',\n  group: 'InlineCode',\n})\n\nwithMeta(inlineCodeSchema.ctx, {\n  displayName: 'MarkSchemaCtx<inlineCode>',\n  group: 'InlineCode',\n})\n\n/// A command to toggle the inlineCode mark.\nexport const toggleInlineCodeCommand = $command('ToggleInlineCode', () => () => (state, dispatch) => {\n  const { selection, tr } = state\n  if (selection.empty)\n    return false\n  const { from, to } = selection\n\n  const has = state.doc.rangeHasMark(from, to, inlineCodeSchema.type())\n  // remove exists inlineCode mark if have\n  if (has) {\n    dispatch?.(tr.removeMark(from, to, inlineCodeSchema.type()))\n    return true\n  }\n\n  const restMarksName = Object.keys(state.schema.marks).filter(x => x !== inlineCodeSchema.type.name)\n\n  // remove other marks\n  restMarksName\n    .map(name => state.schema.marks[name] as MarkType)\n    .forEach((t) => {\n      tr.removeMark(from, to, t)\n    })\n\n  // add inlineCode mark\n  dispatch?.(tr.addMark(from, to, inlineCodeSchema.type().create()))\n  return true\n})\n\nwithMeta(toggleInlineCodeCommand, {\n  displayName: 'Command<toggleInlineCodeCommand>',\n  group: 'InlineCode',\n})\n\n/// Keymap for the inlineCode mark.\n/// - `Mod-e` - Toggle the inlineCode mark.\nexport const inlineCodeKeymap = $useKeymap('inlineCodeKeymap', {\n  ToggleInlineCode: {\n    shortcuts: 'Mod-e',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(toggleInlineCodeCommand.key)\n    },\n  },\n})\n\nwithMeta(inlineCodeKeymap.ctx, {\n  displayName: 'KeymapCtx<inlineCode>',\n  group: 'InlineCode',\n})\n\nwithMeta(inlineCodeKeymap.shortcuts, {\n  displayName: 'Keymap<inlineCode>',\n  group: 'InlineCode',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { toggleMark } from '@milkdown/prose/commands'\nimport type { Node as ProseNode } from '@milkdown/prose/model'\nimport { TextSelection } from '@milkdown/prose/state'\nimport { $command, $markAttr, $markSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the link mark.\nexport const linkAttr = $markAttr('link')\n\nwithMeta(linkAttr, {\n  displayName: 'Attr<link>',\n  group: 'Link',\n})\n\n/// Link mark schema.\nexport const linkSchema = $markSchema('link', ctx => ({\n  attrs: {\n    href: {},\n    title: { default: null },\n  },\n  parseDOM: [\n    {\n      tag: 'a[href]',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement))\n          throw expectDomTypeError(dom)\n\n        return { href: dom.getAttribute('href'), title: dom.getAttribute('title') }\n      },\n    },\n  ],\n  toDOM: mark => ['a', { ...ctx.get(linkAttr.key)(mark), ...mark.attrs }],\n  parseMarkdown: {\n    match: node => node.type === 'link',\n    runner: (state, node, markType) => {\n      const url = node.url as string\n      const title = node.title as string\n      state.openMark(markType, { href: url, title })\n      state.next(node.children)\n      state.closeMark(markType)\n    },\n  },\n  toMarkdown: {\n    match: mark => mark.type.name === 'link',\n    runner: (state, mark) => {\n      state.withMark(mark, 'link', undefined, {\n        title: mark.attrs.title,\n        url: mark.attrs.href,\n      })\n    },\n  },\n}))\n\nwithMeta(linkSchema.mark, {\n  displayName: 'MarkSchema<link>',\n  group: 'Link',\n})\n\n/// @internal\nexport type UpdateLinkCommandPayload = {\n  href?: string\n  title?: string\n}\n/// A command to toggle the link mark.\n/// You can pass the `href` and `title` to the link.\nexport const toggleLinkCommand = $command('ToggleLink', () => (payload: UpdateLinkCommandPayload = {}) => toggleMark(linkSchema.type(), payload))\n\nwithMeta(toggleLinkCommand, {\n  displayName: 'Command<toggleLinkCommand>',\n  group: 'Link',\n})\n\n/// A command to update the link mark.\n/// You can pass the `href` and `title` to update the link.\nexport const updateLinkCommand = $command('UpdateLink', () => (payload: UpdateLinkCommandPayload = {}) => (state, dispatch) => {\n  if (!dispatch)\n    return false\n\n  let node: ProseNode | undefined\n  let pos = -1\n  const { selection } = state\n  const { from, to } = selection\n  state.doc.nodesBetween(from, from === to ? to + 1 : to, (n, p) => {\n    if (linkSchema.type().isInSet(n.marks)) {\n      node = n\n      pos = p\n      return false\n    }\n\n    return undefined\n  })\n\n  if (!node)\n    return false\n\n  const mark = node.marks.find(({ type }) => type === linkSchema.type())\n  if (!mark)\n    return false\n\n  const start = pos\n  const end = pos + node.nodeSize\n  const { tr } = state\n  const linkMark = linkSchema.type().create({ ...mark.attrs, ...payload })\n  if (!linkMark)\n    return false\n\n  dispatch(\n    tr\n      .removeMark(start, end, mark)\n      .addMark(start, end, linkMark)\n      .setSelection(new TextSelection(tr.selection.$anchor))\n      .scrollIntoView(),\n  )\n\n  return true\n})\n\nwithMeta(updateLinkCommand, {\n  displayName: 'Command<updateLinkCommand>',\n  group: 'Link',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $node } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// The top-level document node.\nexport const docSchema = $node('doc', () => ({\n  content: 'block+',\n  parseMarkdown: {\n    match: ({ type }) => type === 'root',\n    runner: (state, node, type) => {\n      state.injectRoot(node, type)\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'doc',\n    runner: (state, node) => {\n      state.openNode('root')\n      state.next(node.content)\n    },\n  },\n}))\n\nwithMeta(docSchema, {\n  displayName: 'NodeSchema<doc>',\n  group: 'Doc',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { $command, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { serializeText, withMeta } from '../__internal__'\n\n/// HTML attributes for paragraph node.\nexport const paragraphAttr = $nodeAttr('paragraph')\n\nwithMeta(paragraphAttr, {\n  displayName: 'Attr<paragraph>',\n  group: 'Paragraph',\n})\n\n/// Schema for paragraph node.\nexport const paragraphSchema = $nodeSchema('paragraph', ctx => ({\n  content: 'inline*',\n  group: 'block',\n  parseDOM: [{ tag: 'p' }],\n  toDOM: node => ['p', ctx.get(paragraphAttr.key)(node), 0],\n  parseMarkdown: {\n    match: node => node.type === 'paragraph',\n    runner: (state, node, type) => {\n      state.openNode(type)\n      if (node.children)\n        state.next(node.children)\n\n      else\n        state.addText((node.value || '') as string)\n\n      state.closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'paragraph',\n    runner: (state, node) => {\n      state.openNode('paragraph')\n      serializeText(state, node)\n      state.closeNode()\n    },\n  },\n}))\n\nwithMeta(paragraphSchema.node, {\n  displayName: 'NodeSchema<paragraph>',\n  group: 'Paragraph',\n})\nwithMeta(paragraphSchema.ctx, {\n  displayName: 'NodeSchemaCtx<paragraph>',\n  group: 'Paragraph',\n})\n\n/// This command can turn the selected block into paragraph.\nexport const turnIntoTextCommand = $command('TurnIntoText', () => () => setBlockType(paragraphSchema.type()))\n\nwithMeta(turnIntoTextCommand, {\n  displayName: 'Command<turnIntoTextCommand>',\n  group: 'Paragraph',\n})\n\n/// Keymap for paragraph node.\n/// - `<Mod-Alt-0>`: Turn the selected block into paragraph.\nexport const paragraphKeymap = $useKeymap('paragraphKeymap', {\n  TurnIntoText: {\n    shortcuts: 'Mod-Alt-0',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(turnIntoTextCommand.key)\n    },\n  },\n})\n\nwithMeta(paragraphKeymap.ctx, {\n  displayName: 'KeymapCtx<paragraph>',\n  group: 'Paragraph',\n})\n\nwithMeta(paragraphKeymap.shortcuts, {\n  displayName: 'Keymap<paragraph>',\n  group: 'Paragraph',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx, editorViewCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { textblockTypeInputRule } from '@milkdown/prose/inputrules'\nimport type { Node } from '@milkdown/prose/model'\nimport { $command, $ctx, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport slugify from '@sindresorhus/slugify'\nimport { serializeText, withMeta } from '../__internal__'\nimport { paragraphSchema } from './paragraph'\n\nconst headingIndex = Array(6)\n  .fill(0)\n  .map((_, i) => i + 1)\n\nconst defaultHeadingIdGenerator = (node: Node) =>\n  slugify(node.textContent)\n\n/// This is a slice contains a function to generate heading id.\n/// You can configure it to generate id in your own way.\nexport const headingIdGenerator = $ctx(defaultHeadingIdGenerator, 'headingIdGenerator')\n\nwithMeta(headingIdGenerator, {\n  displayName: 'Ctx<HeadingIdGenerator>',\n  group: 'Heading',\n})\n\n/// HTML attributes for heading node.\nexport const headingAttr = $nodeAttr('heading')\n\nwithMeta(headingAttr, {\n  displayName: 'Attr<heading>',\n  group: 'Heading',\n})\n\n/// Schema for heading node.\nexport const headingSchema = $nodeSchema('heading', (ctx) => {\n  const getId = ctx.get(headingIdGenerator.key)\n  return {\n    content: 'inline*',\n    group: 'block',\n    defining: true,\n    attrs: {\n      id: {\n        default: '',\n      },\n      level: {\n        default: 1,\n      },\n    },\n    parseDOM: headingIndex.map(x => ({\n      tag: `h${x}`,\n      getAttrs: (node) => {\n        if (!(node instanceof HTMLElement))\n          throw expectDomTypeError(node)\n\n        return { level: x, id: node.id }\n      },\n    })),\n    toDOM: (node) => {\n      return [\n        `h${node.attrs.level}`,\n        {\n          ...ctx.get(headingAttr.key)(node),\n          id: node.attrs.id || getId(node),\n        },\n        0,\n      ]\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === 'heading',\n      runner: (state, node, type) => {\n        const depth = node.depth as number\n        state.openNode(type, { level: depth })\n        state.next(node.children)\n        state.closeNode()\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'heading',\n      runner: (state, node) => {\n        state.openNode('heading', undefined, { depth: node.attrs.level })\n        serializeText(state, node)\n        state.closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(headingSchema.node, {\n  displayName: 'NodeSchema<heading>',\n  group: 'Heading',\n})\n\nwithMeta(headingSchema.ctx, {\n  displayName: 'NodeSchemaCtx<heading>',\n  group: 'Heading',\n})\n\n/// This input rule can turn the selected block into heading.\n/// You can input numbers of `#` and a `space` to create heading.\nexport const wrapInHeadingInputRule = $inputRule((ctx) => {\n  return textblockTypeInputRule(/^(?<hashes>#+)\\s$/, headingSchema.type(), (match) => {\n    const x = match.groups?.hashes?.length || 0\n\n    const view = ctx.get(editorViewCtx)\n    const { $from } = view.state.selection\n    const node = $from.node()\n    if (node.type.name === 'heading') {\n      let level = Number(node.attrs.level) + Number(x)\n      if (level > 6)\n        level = 6\n\n      return { level }\n    }\n    return { level: x }\n  })\n})\n\nwithMeta(wrapInHeadingInputRule, {\n  displayName: 'InputRule<wrapInHeadingInputRule>',\n  group: 'Heading',\n})\n\n/// This command can turn the selected block into heading.\n/// You can pass the level of heading to this command.\n/// By default, the level is 1, which means it will create a `h1` element.\nexport const wrapInHeadingCommand = $command('WrapInHeading', () => {\n  return (level?: number) => {\n    level ??= 1\n\n    if (level < 1)\n      return setBlockType(paragraphSchema.type())\n\n    return setBlockType(headingSchema.type(), { level })\n  }\n})\n\nwithMeta(wrapInHeadingCommand, {\n  displayName: 'Command<wrapInHeadingCommand>',\n  group: 'Heading',\n})\n\n/// This command can downgrade the selected heading.\n/// For example, if you have a `h2` element, and you call this command, you will get a `h1` element.\n/// If the element is already a `h1` element, it will turn it into a `p` element.\nexport const downgradeHeadingCommand = $command('DowngradeHeading', () => () =>\n  (state, dispatch, view) => {\n    const { $from } = state.selection\n    const node = $from.node()\n    if (node.type !== headingSchema.type() || !state.selection.empty || $from.parentOffset !== 0)\n      return false\n\n    const level = node.attrs.level - 1\n    if (!level)\n      return setBlockType(paragraphSchema.type())(state, dispatch, view)\n\n    dispatch?.(\n      state.tr.setNodeMarkup(state.selection.$from.before(), undefined, {\n        ...node.attrs,\n        level,\n      }),\n    )\n    return true\n  })\n\nwithMeta(downgradeHeadingCommand, {\n  displayName: 'Command<downgradeHeadingCommand>',\n  group: 'Heading',\n})\n\n/// Keymap for heading node.\n/// - `<Mod-Alt-{1-6}>`: Turn the selected block into `h{1-6}` element.\n/// - `<Delete>/<Backspace>`: Downgrade the selected heading.\nexport const headingKeymap = $useKeymap('headingKeymap', {\n  TurnIntoH1: {\n    shortcuts: 'Mod-Alt-1',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 1)\n    },\n  },\n  TurnIntoH2: {\n    shortcuts: 'Mod-Alt-2',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 2)\n    },\n  },\n  TurnIntoH3: {\n    shortcuts: 'Mod-Alt-3',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  TurnIntoH4: {\n    shortcuts: 'Mod-Alt-4',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  TurnIntoH5: {\n    shortcuts: 'Mod-Alt-5',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  TurnIntoH6: {\n    shortcuts: 'Mod-Alt-6',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInHeadingCommand.key, 3)\n    },\n  },\n  DowngradeHeading: {\n    shortcuts: ['Delete', 'Backspace'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(downgradeHeadingCommand.key)\n    },\n  },\n})\n\nwithMeta(headingKeymap.ctx, {\n  displayName: 'KeymapCtx<heading>',\n  group: 'Heading',\n})\n\nwithMeta(headingKeymap.shortcuts, {\n  displayName: 'Keymap<heading>',\n  group: 'Heading',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { wrapIn } from '@milkdown/prose/commands'\nimport { wrappingInputRule } from '@milkdown/prose/inputrules'\nimport type { $NodeSchema } from '@milkdown/utils'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for blockquote node.\nexport const blockquoteAttr = $nodeAttr('blockquote')\n\nwithMeta(blockquoteAttr, {\n  displayName: 'Attr<blockquote>',\n  group: 'Blockquote',\n})\n\n/// Schema for blockquote node.\nexport const blockquoteSchema: $NodeSchema<'blockquote'> = $nodeSchema('blockquote', ctx => ({\n  content: 'block+',\n  group: 'block',\n  defining: true,\n  parseDOM: [{ tag: 'blockquote' }],\n  toDOM: node => ['blockquote', ctx.get(blockquoteAttr.key)(node), 0],\n  parseMarkdown: {\n    match: ({ type }) => type === 'blockquote',\n    runner: (state, node, type) => {\n      state.openNode(type).next(node.children).closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'blockquote',\n    runner: (state, node) => {\n      state.openNode('blockquote').next(node.content).closeNode()\n    },\n  },\n}))\n\nwithMeta(blockquoteSchema.node, {\n  displayName: 'NodeSchema<blockquote>',\n  group: 'Blockquote',\n})\n\nwithMeta(blockquoteSchema.ctx, {\n  displayName: 'NodeSchemaCtx<blockquote>',\n  group: 'Blockquote',\n})\n\n/// This input rule will convert a line that starts with `> ` into a blockquote.\n/// You can type `> ` at the start of a line to create a blockquote.\nexport const wrapInBlockquoteInputRule = $inputRule(() => wrappingInputRule(/^\\s*>\\s$/, blockquoteSchema.type()))\n\nwithMeta(wrapInBlockquoteInputRule, {\n  displayName: 'InputRule<wrapInBlockquoteInputRule>',\n  group: 'Blockquote',\n})\n\n/// This command will wrap the current selection in a blockquote.\nexport const wrapInBlockquoteCommand = $command('WrapInBlockquote', () => () => wrapIn(blockquoteSchema.type()))\n\nwithMeta(wrapInBlockquoteCommand, {\n  displayName: 'Command<wrapInBlockquoteCommand>',\n  group: 'Blockquote',\n})\n\n/// Keymap for blockquote.\n/// - `Mod-Shift-b`: Wrap selection in blockquote.\nexport const blockquoteKeymap = $useKeymap('blockquoteKeymap', {\n  WrapInBlockquote: {\n    shortcuts: 'Mod-Shift-b',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInBlockquoteCommand.key)\n    },\n  },\n})\n\nwithMeta(blockquoteKeymap.ctx, {\n  displayName: 'KeymapCtx<blockquote>',\n  group: 'Blockquote',\n})\n\nwithMeta(blockquoteKeymap.shortcuts, {\n  displayName: 'Keymap<blockquote>',\n  group: 'Blockquote',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { setBlockType } from '@milkdown/prose/commands'\nimport { textblockTypeInputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for code block node.\nexport const codeBlockAttr = $nodeAttr('codeBlock', () => ({\n  pre: {},\n  code: {},\n}))\n\nwithMeta(codeBlockAttr, {\n  displayName: 'Attr<codeBlock>',\n  group: 'CodeBlock',\n})\n\n/// Schema for code block node.\nexport const codeBlockSchema = $nodeSchema('code_block', (ctx) => {\n  return {\n    content: 'text*',\n    group: 'block',\n    marks: '',\n    defining: true,\n    code: true,\n    attrs: {\n      language: {\n        default: '',\n      },\n    },\n    parseDOM: [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return { language: dom.dataset.language }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      const attr = ctx.get(codeBlockAttr.key)(node)\n      return [\n        'pre',\n        {\n          ...attr.pre,\n          'data-language': node.attrs.language,\n        },\n        ['code', attr.code, 0],\n      ]\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === 'code',\n      runner: (state, node, type) => {\n        const language = node.lang as string\n        const value = node.value as string\n        state.openNode(type, { language })\n        if (value)\n          state.addText(value)\n\n        state.closeNode()\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'code_block',\n      runner: (state, node) => {\n        state.addNode('code', undefined, node.content.firstChild?.text || '', {\n          lang: node.attrs.language,\n        })\n      },\n    },\n  }\n})\n\nwithMeta(codeBlockSchema.node, {\n  displayName: 'NodeSchema<codeBlock>',\n  group: 'CodeBlock',\n})\n\nwithMeta(codeBlockSchema.ctx, {\n  displayName: 'NodeSchemaCtx<codeBlock>',\n  group: 'CodeBlock',\n})\n\n/// A input rule for creating code block.\n/// For example, ` ```javascript ` will create a code block with language javascript.\nexport const createCodeBlockInputRule = $inputRule(() => textblockTypeInputRule(/^```(?<language>[a-z]*)?[\\s\\n]$/, codeBlockSchema.type(), match => ({\n  language: match.groups?.language ?? '',\n})))\n\nwithMeta(createCodeBlockInputRule, {\n  displayName: 'InputRule<createCodeBlockInputRule>',\n  group: 'CodeBlock',\n})\n\n/// A command for creating code block.\n/// You can pass the language of the code block as the parameter.\nexport const createCodeBlockCommand = $command('CreateCodeBlock', () => (language = '') => setBlockType(codeBlockSchema.type(), { language }))\n\nwithMeta(createCodeBlockCommand, {\n  displayName: 'Command<createCodeBlockCommand>',\n  group: 'CodeBlock',\n})\n\n/// A command for updating the code block language of the target position.\nexport const updateCodeBlockLanguageCommand = $command('UpdateCodeBlockLanguage', () => ({ pos, language }: { pos: number; language: string } = { pos: -1, language: '' }) => (state, dispatch) => {\n  if (pos >= 0) {\n    dispatch?.(state.tr.setNodeAttribute(pos, 'language', language))\n    return true\n  }\n\n  return false\n})\n\nwithMeta(updateCodeBlockLanguageCommand, {\n  displayName: 'Command<updateCodeBlockLanguageCommand>',\n  group: 'CodeBlock',\n})\n\n/// Keymap for code block.\n/// - `Mod-Alt-c`: Create a code block.\nexport const codeBlockKeymap = $useKeymap('codeBlockKeymap', {\n  CreateCodeBlock: {\n    shortcuts: 'Mod-Alt-c',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(createCodeBlockCommand.key)\n    },\n  },\n})\n\nwithMeta(codeBlockKeymap.ctx, {\n  displayName: 'KeymapCtx<codeBlock>',\n  group: 'CodeBlock',\n})\n\nwithMeta(codeBlockKeymap.shortcuts, {\n  displayName: 'Keymap<codeBlock>',\n  group: 'CodeBlock',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { findSelectedNodeOfType } from '@milkdown/prose'\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for image node.\nexport const imageAttr = $nodeAttr('image')\n\nwithMeta(imageAttr, {\n  displayName: 'Attr<image>',\n  group: 'Image',\n})\n\n/// Schema for image node.\nexport const imageSchema = $nodeSchema('image', (ctx) => {\n  return {\n    inline: true,\n    group: 'inline',\n    selectable: true,\n    draggable: true,\n    marks: '',\n    atom: true,\n    defining: true,\n    isolating: true,\n    attrs: {\n      src: { default: '' },\n      alt: { default: '' },\n      title: { default: '' },\n    },\n    parseDOM: [\n      {\n        tag: 'img[src]',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            src: dom.getAttribute('src') || '',\n            alt: dom.getAttribute('alt') || '',\n            title: dom.getAttribute('title') || dom.getAttribute('alt') || '',\n          }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      return ['img', { ...ctx.get(imageAttr.key)(node), ...node.attrs }]\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === 'image',\n      runner: (state, node, type) => {\n        const url = node.url as string\n        const alt = node.alt as string\n        const title = node.title as string\n        state.addNode(type, {\n          src: url,\n          alt,\n          title,\n        })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'image',\n      runner: (state, node) => {\n        state.addNode('image', undefined, undefined, {\n          title: node.attrs.title,\n          url: node.attrs.src,\n          alt: node.attrs.alt,\n        })\n      },\n    },\n  }\n})\n\nwithMeta(imageSchema.node, {\n  displayName: 'NodeSchema<image>',\n  group: 'Image',\n})\n\nwithMeta(imageSchema.ctx, {\n  displayName: 'NodeSchemaCtx<image>',\n  group: 'Image',\n})\n\n/// @internal\nexport type UpdateImageCommandPayload = {\n  src?: string\n  title?: string\n  alt?: string\n}\n\n/// This command will insert a image node.\n/// You can pass a payload to set `src`, `alt` and `title` for the image node.\nexport const insertImageCommand = $command('InsertImage', () => (payload: UpdateImageCommandPayload = {}) =>\n  (state, dispatch) => {\n    if (!dispatch)\n      return true\n\n    const { src = '', alt = '', title = '' } = payload\n\n    const node = imageSchema.type().create({ src, alt, title })\n    if (!node)\n      return true\n\n    dispatch(state.tr.replaceSelectionWith(node).scrollIntoView())\n    return true\n  })\n\nwithMeta(insertImageCommand, {\n  displayName: 'Command<insertImageCommand>',\n  group: 'Image',\n})\n\n/// This command will update the selected image node.\n/// You can pass a payload to update `src`, `alt` and `title` for the image node.\nexport const updateImageCommand = $command('UpdateImage', () => (payload: UpdateImageCommandPayload = {}) => (state, dispatch) => {\n  const nodeWithPos = findSelectedNodeOfType(state.selection, imageSchema.type())\n  if (!nodeWithPos)\n    return false\n\n  const { node, pos } = nodeWithPos\n\n  const newAttrs = { ...node.attrs }\n  const { src, alt, title } = payload\n  if (src !== undefined)\n    newAttrs.src = src\n  if (alt !== undefined)\n    newAttrs.alt = alt\n  if (title !== undefined)\n    newAttrs.title = title\n\n  dispatch?.(state.tr.setNodeMarkup(pos, undefined, newAttrs).scrollIntoView())\n  return true\n})\n\nwithMeta(updateImageCommand, {\n  displayName: 'Command<updateImageCommand>',\n  group: 'Image',\n})\n\n/// This input rule will insert a image node.\n/// You can input `![alt](src \"title\")` to insert a image node.\n/// The `title` is optional.\nexport const insertImageInputRule = $inputRule(() => new InputRule(\n  /!\\[(?<alt>.*?)]\\((?<filename>.*?)\\s*(?=\"|\\))\"?(?<title>[^\"]+)?\"?\\)/,\n  (state, match, start, end) => {\n    const [matched, alt, src = '', title] = match\n    if (matched)\n      return state.tr.replaceWith(start, end, imageSchema.type().create({ src, alt, title }))\n\n    return null\n  },\n))\n\nwithMeta(insertImageInputRule, {\n  displayName: 'InputRule<insertImageInputRule>',\n  group: 'Image',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { Selection } from '@milkdown/prose/state'\nimport { $command, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for the hardbreak node.\n///\n/// Default value:\n/// - `data-is-inline` - Whether the hardbreak is inline.\nexport const hardbreakAttr = $nodeAttr('hardbreak', (node) => {\n  return {\n    'data-is-inline': node.attrs.isInline,\n  }\n})\n\nwithMeta(hardbreakAttr, {\n  displayName: 'Attr<hardbreak>',\n  group: 'Hardbreak',\n})\n\n/// Hardbreak node schema.\nexport const hardbreakSchema = $nodeSchema('hardbreak', ctx => ({\n  inline: true,\n  group: 'inline',\n  attrs: {\n    isInline: {\n      default: false,\n    },\n  },\n  selectable: false,\n  parseDOM: [{ tag: 'br' }],\n  toDOM: node => ['br', ctx.get(hardbreakAttr.key)(node)],\n  parseMarkdown: {\n    match: ({ type }) => type === 'break',\n    runner: (state, node, type) => {\n      state.addNode(type, { isInline: Boolean(node.data?.isInline) })\n    },\n  },\n  leafText: () => '\\n',\n  toMarkdown: {\n    match: node => node.type.name === 'hardbreak',\n    runner: (state, node) => {\n      if (node.attrs.isInline)\n        state.addNode('text', undefined, '\\n')\n\n      else\n        state.addNode('break')\n    },\n  },\n}))\n\nwithMeta(hardbreakSchema.node, {\n  displayName: 'NodeSchema<hardbreak>',\n  group: 'Hardbreak',\n})\n\nwithMeta(hardbreakSchema.ctx, {\n  displayName: 'NodeSchemaCtx<hardbreak>',\n  group: 'Hardbreak',\n})\n\n/// Command to insert a hardbreak.\nexport const insertHardbreakCommand = $command('InsertHardbreak', () => () => (state, dispatch) => {\n  const { selection, tr } = state\n  if (selection.empty) {\n    // Transform two successive hardbreak into a new line\n    const node = selection.$from.node()\n    if (node.childCount > 0 && node.lastChild?.type.name === 'hardbreak') {\n      dispatch?.(\n        tr\n          .replaceRangeWith(selection.to - 1, selection.to, state.schema.node('paragraph'))\n          .setSelection(Selection.near(tr.doc.resolve(selection.to)))\n          .scrollIntoView(),\n      )\n      return true\n    }\n  }\n  dispatch?.(tr.setMeta('hardbreak', true).replaceSelectionWith(hardbreakSchema.type().create()).scrollIntoView())\n  return true\n})\n\nwithMeta(insertHardbreakCommand, {\n  displayName: 'Command<insertHardbreakCommand>',\n  group: 'Hardbreak',\n})\n\n/// Keymap for the hardbreak node.\n/// - `Shift-Enter` - Insert a hardbreak.\nexport const hardbreakKeymap = $useKeymap('hardbreakKeymap', {\n  InsertHardbreak: {\n    shortcuts: 'Shift-Enter',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(insertHardbreakCommand.key)\n    },\n  },\n})\n\nwithMeta(hardbreakKeymap.ctx, {\n  displayName: 'KeymapCtx<hardbreak>',\n  group: 'Hardbreak',\n})\n\nwithMeta(hardbreakKeymap.shortcuts, {\n  displayName: 'Keymap<hardbreak>',\n  group: 'Hardbreak',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { InputRule } from '@milkdown/prose/inputrules'\nimport { Selection } from '@milkdown/prose/state'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\nimport { paragraphSchema } from './paragraph'\n\n/// HTML attributes for the hr node.\nexport const hrAttr = $nodeAttr('hr')\n\nwithMeta(hrAttr, {\n  displayName: 'Attr<hr>',\n  group: 'Hr',\n})\n\n/// Hr node schema.\nexport const hrSchema = $nodeSchema('hr', ctx => ({\n  group: 'block',\n  parseDOM: [{ tag: 'hr' }],\n  toDOM: node => ['hr', ctx.get(hrAttr.key)(node)],\n  parseMarkdown: {\n    match: ({ type }) => type === 'thematicBreak',\n    runner: (state, _, type) => {\n      state.addNode(type)\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'hr',\n    runner: (state) => {\n      state.addNode('thematicBreak')\n    },\n  },\n}))\n\nwithMeta(hrSchema.node, {\n  displayName: 'NodeSchema<hr>',\n  group: 'Hr',\n})\n\nwithMeta(hrSchema.ctx, {\n  displayName: 'NodeSchemaCtx<hr>',\n  group: 'Hr',\n})\n\n/// Input rule to insert a hr.\n/// For example, `---` will be converted to a hr.\nexport const insertHrInputRule = $inputRule(() => new InputRule(\n  /^(?:---|___\\s|\\*\\*\\*\\s)$/, (state, match, start, end) => {\n    const { tr } = state\n\n    if (match[0])\n      tr.replaceWith(start - 1, end, hrSchema.type().create())\n\n    return tr\n  },\n))\n\nwithMeta(insertHrInputRule, {\n  displayName: 'InputRule<insertHrInputRule>',\n  group: 'Hr',\n})\n\n/// Command to insert a hr.\nexport const insertHrCommand = $command('InsertHr', () => () => (state, dispatch) => {\n  if (!dispatch)\n    return true\n\n  const paragraph = paragraphSchema.node.type().create()\n  const { tr, selection } = state\n  const { from } = selection\n  const node = hrSchema.type().create()\n  if (!node)\n    return true\n\n  const _tr = tr.replaceSelectionWith(node).insert(from, paragraph)\n  const sel = Selection.findFrom(_tr.doc.resolve(from), 1, true)\n  if (!sel)\n    return true\n\n  dispatch(_tr.setSelection(sel).scrollIntoView())\n  return true\n})\n\nwithMeta(insertHrCommand, {\n  displayName: 'Command<insertHrCommand>',\n  group: 'Hr',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { wrapIn } from '@milkdown/prose/commands'\nimport { wrappingInputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for bullet list node.\nexport const bulletListAttr = $nodeAttr('bulletList')\n\nwithMeta(bulletListAttr, {\n  displayName: 'Attr<bulletList>',\n  group: 'BulletList',\n})\n\n/// Schema for bullet list node.\nexport const bulletListSchema = $nodeSchema('bullet_list', (ctx) => {\n  return {\n    content: 'listItem+',\n    group: 'block',\n    attrs: {\n      spread: {\n        default: false,\n      },\n    },\n    parseDOM: [\n      {\n        tag: 'ul',\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            spread: dom.dataset.spread,\n          }\n        },\n      },\n    ],\n    toDOM: (node) => {\n      return [\n        'ul',\n        {\n          ...ctx.get(bulletListAttr.key)(node),\n          'data-spread': node.attrs.spread,\n        },\n        0,\n      ]\n    },\n    parseMarkdown: {\n      match: ({ type, ordered }) => type === 'list' && !ordered,\n      runner: (state, node, type) => {\n        const spread = node.spread != null ? `${node.spread}` : 'false'\n        state.openNode(type, { spread }).next(node.children).closeNode()\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'bullet_list',\n      runner: (state, node) => {\n        state\n          .openNode('list', undefined, { ordered: false, spread: node.attrs.spread === 'true' })\n          .next(node.content)\n          .closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(bulletListSchema.node, {\n  displayName: 'NodeSchema<bulletList>',\n  group: 'BulletList',\n})\n\nwithMeta(bulletListSchema.ctx, {\n  displayName: 'NodeSchemaCtx<bulletList>',\n  group: 'BulletList',\n})\n\n/// Input rule for wrapping a block in bullet list node.\nexport const wrapInBulletListInputRule = $inputRule(() => wrappingInputRule(/^\\s*([-+*])\\s$/, bulletListSchema.type()))\n\nwithMeta(wrapInBulletListInputRule, {\n  displayName: 'InputRule<wrapInBulletListInputRule>',\n  group: 'BulletList',\n})\n\n/// Command for creating bullet list node.\nexport const wrapInBulletListCommand = $command('WrapInBulletList', () => () => wrapIn(bulletListSchema.type()))\n\nwithMeta(wrapInBulletListCommand, {\n  displayName: 'Command<wrapInBulletListCommand>',\n  group: 'BulletList',\n})\n\n/// Keymap for bullet list node.\n/// - `Mod-Alt-8`: Wrap a block in bullet list.\nexport const bulletListKeymap = $useKeymap('bulletListKeymap', {\n  WrapInBulletList: {\n    shortcuts: 'Mod-Alt-8',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInBulletListCommand.key)\n    },\n  },\n})\n\nwithMeta(bulletListKeymap.ctx, {\n  displayName: 'KeymapCtx<bulletListKeymap>',\n  group: 'BulletList',\n})\n\nwithMeta(bulletListKeymap.shortcuts, {\n  displayName: 'Keymap<bulletListKeymap>',\n  group: 'BulletList',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { wrapIn } from '@milkdown/prose/commands'\nimport { wrappingInputRule } from '@milkdown/prose/inputrules'\nimport { $command, $inputRule, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for ordered list node.\nexport const orderedListAttr = $nodeAttr('orderedList')\n\nwithMeta(orderedListAttr, {\n  displayName: 'Attr<orderedList>',\n  group: 'OrderedList',\n})\n\n/// Schema for ordered list node.\nexport const orderedListSchema = $nodeSchema('ordered_list', ctx => ({\n  content: 'listItem+',\n  group: 'block',\n  attrs: {\n    order: {\n      default: 1,\n    },\n    spread: {\n      default: false,\n    },\n  },\n  parseDOM: [\n    {\n      tag: 'ol',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement))\n          throw expectDomTypeError(dom)\n\n        return {\n          spread: dom.dataset.spread,\n          order: dom.hasAttribute('start') ? Number(dom.getAttribute('start')) : 1,\n        }\n      },\n    },\n  ],\n  toDOM: node => [\n    'ol',\n    {\n      ...ctx.get(orderedListAttr.key)(node),\n      ...(node.attrs.order === 1 ? {} : node.attrs.order),\n      'data-spread': node.attrs.spread,\n    },\n    0,\n  ],\n  parseMarkdown: {\n    match: ({ type, ordered }) => type === 'list' && !!ordered,\n    runner: (state, node, type) => {\n      const spread = node.spread != null ? `${node.spread}` : 'true'\n      state.openNode(type, { spread }).next(node.children).closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'ordered_list',\n    runner: (state, node) => {\n      state.openNode('list', undefined, { ordered: true, start: 1, spread: node.attrs.spread === 'true' })\n      state.next(node.content)\n      state.closeNode()\n    },\n  },\n}))\n\nwithMeta(orderedListSchema.node, {\n  displayName: 'NodeSchema<orderedList>',\n  group: 'OrderedList',\n})\n\nwithMeta(orderedListSchema.ctx, {\n  displayName: 'NodeSchemaCtx<orderedList>',\n  group: 'OrderedList',\n})\n\n/// Input rule for wrapping a block in ordered list node.\nexport const wrapInOrderedListInputRule = $inputRule(() => wrappingInputRule(\n  /^\\s*(\\d+)\\.\\s$/,\n  orderedListSchema.type(),\n  match => ({ order: Number(match[1]) }),\n  (match, node) => node.childCount + node.attrs.order === Number(match[1]),\n))\n\nwithMeta(wrapInOrderedListInputRule, {\n  displayName: 'InputRule<wrapInOrderedListInputRule>',\n  group: 'OrderedList',\n})\n\n/// Command for wrapping a block in ordered list node.\nexport const wrapInOrderedListCommand = $command('WrapInOrderedList', () => () => wrapIn(orderedListSchema.type()))\n\nwithMeta(wrapInOrderedListCommand, {\n  displayName: 'Command<wrapInOrderedListCommand>',\n  group: 'OrderedList',\n})\n\n/// Keymap for ordered list node.\n/// - `Mod-Alt-7`: Wrap a block in ordered list.\nexport const orderedListKeymap = $useKeymap('orderedListKeymap', {\n  WrapInOrderedList: {\n    shortcuts: 'Mod-Alt-7',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(wrapInOrderedListCommand.key)\n    },\n  },\n})\n\nwithMeta(orderedListKeymap.ctx, {\n  displayName: 'KeymapCtx<orderedList>',\n  group: 'OrderedList',\n})\n\nwithMeta(orderedListKeymap.shortcuts, {\n  displayName: 'Keymap<orderedList>',\n  group: 'OrderedList',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { commandsCtx } from '@milkdown/core'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { liftListItem, sinkListItem, splitListItem } from '@milkdown/prose/schema-list'\nimport { $command, $nodeAttr, $nodeSchema, $useKeymap } from '@milkdown/utils'\nimport { type Command, TextSelection } from '@milkdown/prose/state'\nimport { withMeta } from '../__internal__'\n\n/// HTML attributes for list item node.\nexport const listItemAttr = $nodeAttr('listItem')\n\nwithMeta(listItemAttr, {\n  displayName: 'Attr<listItem>',\n  group: 'ListItem',\n})\n\n/// Schema for list item node.\nexport const listItemSchema = $nodeSchema('list_item', ctx => ({\n  group: 'listItem',\n  content: 'paragraph block*',\n  attrs: {\n    label: {\n      default: '•',\n    },\n    listType: {\n      default: 'bullet',\n    },\n    spread: {\n      default: 'true',\n    },\n  },\n  defining: true,\n  parseDOM: [\n    {\n      tag: 'li',\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement))\n          throw expectDomTypeError(dom)\n\n        return {\n          label: dom.dataset.label,\n          listType: dom.dataset['list-type'],\n          spread: dom.dataset.spread,\n        }\n      },\n    },\n  ],\n  toDOM: node => [\n    'li',\n    {\n      ...ctx.get(listItemAttr.key)(node),\n      'data-label': node.attrs.label,\n      'data-list-type': node.attrs.listType,\n      'data-spread': node.attrs.spread,\n    },\n    0,\n  ],\n  parseMarkdown: {\n    match: ({ type }) => type === 'listItem',\n    runner: (state, node, type) => {\n      const label = node.label != null ? `${node.label}.` : '•'\n      const listType = node.label != null ? 'ordered' : 'bullet'\n      const spread = node.spread != null ? `${node.spread}` : 'true'\n      state.openNode(type, { label, listType, spread })\n      state.next(node.children)\n      state.closeNode()\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'list_item',\n    runner: (state, node) => {\n      state.openNode('listItem', undefined, { spread: node.attrs.spread === 'true' })\n      state.next(node.content)\n      state.closeNode()\n    },\n  },\n}))\n\nwithMeta(listItemSchema.node, {\n  displayName: 'NodeSchema<listItem>',\n  group: 'ListItem',\n})\n\nwithMeta(listItemSchema.ctx, {\n  displayName: 'NodeSchemaCtx<listItem>',\n  group: 'ListItem',\n})\n\n/// The command to sink list item.\n///\n/// For example:\n/// ```md\n/// * List item 1\n/// * List item 2 <- cursor here\n/// ```\n/// Will get:\n/// ```md\n/// * List item 1\n///   * List item 2\n/// ```\nexport const sinkListItemCommand = $command('SinkListItem', () => () => sinkListItem(listItemSchema.type()))\n\nwithMeta(sinkListItemCommand, {\n  displayName: 'Command<sinkListItemCommand>',\n  group: 'ListItem',\n})\n\n/// The command to lift list item.\n///\n/// For example:\n/// ```md\n/// * List item 1\n///   * List item 2 <- cursor here\n/// ```\n/// Will get:\n/// ```md\n/// * List item 1\n/// * List item 2\n/// ```\nexport const liftListItemCommand = $command('SplitListItem', () => () => liftListItem(listItemSchema.type()))\n\nwithMeta(liftListItemCommand, {\n  displayName: 'Command<liftListItemCommand>',\n  group: 'ListItem',\n})\n\n/// The command to split a list item.\n///\n/// For example:\n/// ```md\n/// * List item 1\n/// * List item 2 <- cursor here\n/// ```\n/// Will get:\n/// ```md\n/// * List item 1\n/// * List item 2\n/// * <- cursor here\n/// ```\nexport const splitListItemCommand = $command('SplitListItem', () => () => splitListItem(listItemSchema.type()))\n\nwithMeta(splitListItemCommand, {\n  displayName: 'Command<splitListItemCommand>',\n  group: 'ListItem',\n})\n\nconst liftFirstListItem: Command = (state, dispatch, view) => {\n  const { selection } = state\n  if (!(selection instanceof TextSelection))\n    return false\n\n  const { empty, $from } = selection\n\n  // selection should be empty and at the start of the node\n  if (!empty || $from.parentOffset !== 0)\n    return false\n\n  const parentItem = $from.node(-1)\n  // selection should be in list item and list item should be the first child of the list\n  if (parentItem.type !== listItemSchema.type() || parentItem.firstChild !== $from.node())\n    return false\n\n  const list = $from.node(-2)\n  // list should have only one list item\n  if (list.childCount > 1)\n    return false\n\n  return liftListItem(listItemSchema.type())(state, dispatch, view)\n}\n\n/// The command to remove list item **only if**:\n///\n/// - Selection is at the start of the list item.\n/// - List item is the only child of the list.\n///\n/// Most of the time, you shouldn't use this command directly.\nexport const liftFirstListItemCommand = $command('LiftFirstListItem', () => () => liftFirstListItem)\n\nwithMeta(liftFirstListItemCommand, {\n  displayName: 'Command<liftFirstListItemCommand>',\n  group: 'ListItem',\n})\n\n/// Keymap for list item node.\n/// - `<Enter>`: Split the current list item.\n/// - `<Tab>/<Mod-]>`: Sink the current list item.\n/// - `<Shift-Tab>/<Mod-[>`: Lift the current list item.\nexport const listItemKeymap = $useKeymap('listItemKeymap', {\n  NextListItem: {\n    shortcuts: 'Enter',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(splitListItemCommand.key)\n    },\n  },\n  SinkListItem: {\n    shortcuts: ['Tab', 'Mod-]'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(sinkListItemCommand.key)\n    },\n  },\n  LiftListItem: {\n    shortcuts: ['Shift-Tab', 'Mod-['],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(liftListItemCommand.key)\n    },\n  },\n  LiftFirstListItem: {\n    shortcuts: ['Backspace', 'Delete'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(liftFirstListItemCommand.key)\n    },\n  },\n})\n\nwithMeta(listItemKeymap.ctx, {\n  displayName: 'KeymapCtx<listItem>',\n  group: 'ListItem',\n})\n\nwithMeta(listItemKeymap.shortcuts, {\n  displayName: 'Keymap<listItem>',\n  group: 'ListItem',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $node } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// The bottom-level node.\nexport const textSchema = $node('text', () => ({\n  group: 'inline',\n  parseMarkdown: {\n    match: ({ type }) => type === 'text',\n    runner: (state, node) => {\n      state.addText(node.value as string)\n    },\n  },\n  toMarkdown: {\n    match: node => node.type.name === 'text',\n    runner: (state, node) => {\n      state.addNode('text', undefined, node.text as string)\n    },\n  },\n}))\n\nwithMeta(textSchema, {\n  displayName: 'NodeSchema<text>',\n  group: 'Text',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $nodeAttr, $nodeSchema } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\nexport const htmlAttr = $nodeAttr('html')\n\nwithMeta(htmlAttr, {\n  displayName: 'Attr<html>',\n  group: 'Html',\n})\n\nexport const htmlSchema = $nodeSchema('html', (ctx) => {\n  return {\n    atom: true,\n    group: 'inline',\n    inline: true,\n    attrs: {\n      value: {\n        default: '',\n      },\n    },\n    toDOM: (node) => {\n      const span = document.createElement('span')\n      const attr = {\n        ...ctx.get(htmlAttr.key)(node),\n        'data-value': node.attrs.value,\n        'data-type': 'html',\n      }\n      span.textContent = node.attrs.value\n      return ['span', attr, node.attrs.value]\n    },\n    parseDOM: [{\n      tag: 'span[data-type=\"html\"]',\n      getAttrs: (dom) => {\n        return {\n          value: (dom as HTMLElement).dataset.value ?? '',\n        }\n      },\n    }],\n    parseMarkdown: {\n      match: ({ type }) => Boolean(type === 'html'),\n      runner: (state, node, type) => {\n        state.addNode(type, { value: node.value as string })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'html',\n      runner: (state, node) => {\n        state.addNode('html', undefined, node.attrs.value)\n      },\n    },\n  }\n})\n\nwithMeta(htmlSchema.node, {\n  displayName: 'NodeSchema<html>',\n  group: 'Html',\n})\n\nwithMeta(htmlSchema.ctx, {\n  displayName: 'NodeSchemaCtx<html>',\n  group: 'Html',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { emphasisAttr, emphasisSchema, inlineCodeAttr, inlineCodeSchema, linkAttr, linkSchema, strongAttr, strongSchema } from '../mark'\nimport {\n  blockquoteAttr,\n  blockquoteSchema,\n  bulletListAttr,\n  bulletListSchema,\n  codeBlockAttr,\n  codeBlockSchema,\n  docSchema,\n  hardbreakAttr,\n  hardbreakSchema,\n  headingAttr,\n  headingIdGenerator,\n  headingSchema,\n  hrAttr,\n  hrSchema, htmlAttr,\n  htmlSchema,\n  imageAttr,\n  imageSchema,\n  listItemAttr,\n  listItemSchema,\n  orderedListAttr,\n  orderedListSchema,\n  paragraphAttr,\n  paragraphSchema,\n  textSchema,\n} from '../node'\n\n/// @internal\nexport const schema: MilkdownPlugin[] = [\n  docSchema,\n\n  paragraphAttr,\n  paragraphSchema,\n\n  headingIdGenerator,\n  headingAttr,\n  headingSchema,\n\n  hardbreakAttr,\n  hardbreakSchema,\n\n  blockquoteAttr,\n  blockquoteSchema,\n\n  codeBlockAttr,\n  codeBlockSchema,\n\n  hrAttr,\n  hrSchema,\n\n  imageAttr,\n  imageSchema,\n\n  bulletListAttr,\n  bulletListSchema,\n\n  orderedListAttr,\n  orderedListSchema,\n\n  listItemAttr,\n  listItemSchema,\n\n  emphasisAttr,\n  emphasisSchema,\n\n  strongAttr,\n  strongSchema,\n\n  inlineCodeAttr,\n  inlineCodeSchema,\n\n  linkAttr,\n  linkSchema,\n\n  htmlAttr,\n  htmlSchema,\n\n  textSchema,\n].flat()\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { createCodeBlockInputRule, insertHrInputRule, wrapInBlockquoteInputRule, wrapInBulletListInputRule, wrapInHeadingInputRule, wrapInOrderedListInputRule } from '../node'\n\n/// @internal\nexport const inputrules: MilkdownPlugin[] = [\n  wrapInBlockquoteInputRule,\n  wrapInBulletListInputRule,\n  wrapInOrderedListInputRule,\n  createCodeBlockInputRule,\n  insertHrInputRule,\n  wrapInHeadingInputRule,\n].flat()\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { toggleEmphasisCommand, toggleInlineCodeCommand, toggleLinkCommand, toggleStrongCommand, updateLinkCommand } from '../mark'\nimport {\n  createCodeBlockCommand,\n  downgradeHeadingCommand,\n  insertHardbreakCommand,\n  insertHrCommand,\n  insertImageCommand,\n  liftFirstListItemCommand,\n  liftListItemCommand,\n  sinkListItemCommand,\n  splitListItemCommand,\n  turnIntoTextCommand,\n  updateImageCommand,\n  wrapInBlockquoteCommand,\n  wrapInBulletListCommand,\n  wrapInHeadingCommand,\n  wrapInOrderedListCommand,\n} from '../node'\n\n/// @internal\nexport const commands: MilkdownPlugin[] = [\n  turnIntoTextCommand,\n  wrapInBlockquoteCommand,\n  wrapInHeadingCommand,\n  downgradeHeadingCommand,\n  createCodeBlockCommand,\n  insertHardbreakCommand,\n  insertHrCommand,\n\n  insertImageCommand,\n  updateImageCommand,\n\n  wrapInOrderedListCommand,\n  wrapInBulletListCommand,\n  sinkListItemCommand,\n  splitListItemCommand,\n  liftListItemCommand,\n  liftFirstListItemCommand,\n\n  toggleEmphasisCommand,\n  toggleInlineCodeCommand,\n  toggleStrongCommand,\n\n  toggleLinkCommand,\n  updateLinkCommand,\n]\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport { emphasisKeymap, inlineCodeKeymap, strongKeymap } from '../mark'\nimport { blockquoteKeymap, bulletListKeymap, codeBlockKeymap, hardbreakKeymap, headingKeymap, listItemKeymap, orderedListKeymap, paragraphKeymap } from '../node'\n\n/// @internal\nexport const keymap: MilkdownPlugin[] = [\n  blockquoteKeymap,\n  codeBlockKeymap,\n  hardbreakKeymap,\n  headingKeymap,\n  listItemKeymap,\n  orderedListKeymap,\n  bulletListKeymap,\n  paragraphKeymap,\n\n  emphasisKeymap,\n  inlineCodeKeymap,\n  strongKeymap,\n].flat()\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nexport const linkRegexp = /\\[([^\\]]+)]\\([^\\s\\]]+\\)/\n\nexport const keepLinkRegexp = /\\[(?<span>((www|https:\\/\\/|http:\\/\\/)[^\\s\\]]+))]\\((?<url>[^\\s\\]]+)\\)/\n\nexport const punctuationRegexp = (holePlaceholder: string) =>\n  new RegExp(`\\\\\\\\(?=[^\\\\w\\\\s${holePlaceholder}\\\\\\\\]|_)`, 'g')\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { Node } from '@milkdown/prose/model'\n\nimport type { SyncNodePlaceholder } from './config'\nimport { keepLinkRegexp, punctuationRegexp } from './regexp'\n\nexport const keepLink = (str: string) => {\n  let text = str\n  let match = text.match(keepLinkRegexp)\n  while (match && match.groups) {\n    const { span } = match.groups\n    text = text.replace(keepLinkRegexp, span as string)\n\n    match = text.match(keepLinkRegexp)\n  }\n  return text\n}\n\nexport const swap = (text: string, first: number, last: number) => {\n  const arr = text.split('')\n  const temp = arr[first]\n  if (arr[first] && arr[last]) {\n    arr[first] = arr[last] as string\n    arr[last] = temp as string\n  }\n  return arr.join('').toString()\n}\n\nexport const replacePunctuation = (holePlaceholder: string) => (text: string) =>\n  text.replace(punctuationRegexp(holePlaceholder), '')\n\nexport const calculatePlaceholder = (placeholder: SyncNodePlaceholder) => (text: string) => {\n  const index = text.indexOf(placeholder.hole)\n  const left = text.charAt(index - 1)\n  const right = text.charAt(index + 1)\n  const notAWord = /[^\\w]|_/\n\n  // cursor on the right\n  if (!right)\n    return placeholder.punctuation\n\n  // cursor on the left\n  if (!left)\n    return placeholder.char\n\n  if (notAWord.test(left) && notAWord.test(right))\n    return placeholder.punctuation\n\n  return placeholder.char\n}\n\nexport const calcOffset = (node: Node, from: number, placeholder: string) => {\n  let offset = from\n  let find = false\n  node.descendants((n) => {\n    if (find)\n      return false\n    if (!n.textContent.includes(placeholder)) {\n      offset += n.nodeSize\n      return false\n    }\n    if (n.isText) {\n      const i = n.text?.indexOf(placeholder)\n      if (i != null && i >= 0) {\n        find = true\n        offset += i\n        return false\n      }\n    }\n\n    // enter the node\n    offset += 1\n    return true\n  })\n  return offset\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport type { Node, NodeType } from '@milkdown/prose/model'\nimport type { Transaction } from '@milkdown/prose/state'\nimport { $ctx } from '@milkdown/utils'\n\nimport { withMeta } from '../../__internal__'\nimport { swap } from './utils'\n\n/// @internal\nexport type ShouldSyncNode = (context: {\n  prevNode: Node\n  nextNode: Node\n  ctx: Ctx\n  tr: Transaction\n  text: string\n}) => boolean\n\n/// @internal\nexport interface SyncNodePlaceholder {\n  hole: string\n  punctuation: string\n  char: string\n}\n\n/// @internal\nexport interface InlineSyncConfig {\n  placeholderConfig: SyncNodePlaceholder\n  shouldSyncNode: ShouldSyncNode\n  globalNodes: Array<NodeType | string>\n  movePlaceholder: (placeholderToMove: string, text: string) => string\n}\n\n/// @internal\nexport const defaultConfig: InlineSyncConfig = {\n  placeholderConfig: {\n    hole: '∅',\n    punctuation: '⁂',\n    char: '∴',\n  },\n  globalNodes: ['footnote_definition'],\n  shouldSyncNode: ({ prevNode, nextNode }) =>\n    prevNode.inlineContent\n        && nextNode\n        // if node type changes, do not sync\n        && prevNode.type === nextNode.type\n        // if two node fully equal, we don't modify them\n        && !prevNode.eq(nextNode),\n  movePlaceholder: (placeholderToMove: string, text: string) => {\n    const symbolsNeedToMove = ['*', '_']\n\n    let index = text.indexOf(placeholderToMove)\n    while (symbolsNeedToMove.includes(text[index - 1] || '') && symbolsNeedToMove.includes(text[index + 1] || '')) {\n      text = swap(text, index, index + 1)\n      index = index + 1\n    }\n\n    return text\n  },\n}\n\n/// A slice that contains the inline sync config.\n/// You can set value to this slice to change the config.\n///\n/// ```typescript\n/// ctx.update(inlineSyncConfigCtx, (prevCfg) => ({\n///   ...prevCfg,\n///   // your config\n/// }));\n/// ```\n///\n/// You can find the default config [here](https://github.com/Milkdown/milkdown/blob/main/packages/preset-commonmark/src/plugin/inline-sync-plugin/config.ts).\nexport const inlineSyncConfig = $ctx<InlineSyncConfig, 'inlineSyncConfig'>(defaultConfig, 'inlineSyncConfig')\n\nwithMeta(inlineSyncConfig, {\n  displayName: 'Ctx<inlineSyncConfig>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { parserCtx, serializerCtx } from '@milkdown/core'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { pipe } from '@milkdown/utils'\n\nimport { inlineSyncConfig } from './config'\nimport { calculatePlaceholder, keepLink, replacePunctuation } from './utils'\n\nexport interface InlineSyncContext {\n  text: string\n  prevNode: Node\n  nextNode: Node\n  placeholder: string\n}\n\nconst getNodeFromSelection = (state: EditorState) => {\n  return state.selection.$from.node()\n}\n\nconst getMarkdown = (ctx: Ctx, state: EditorState, node: Node, globalNode: Node[]) => {\n  const serializer = ctx.get(serializerCtx)\n  const doc = state.schema.topNodeType.create(undefined, [node, ...globalNode])\n\n  const markdown = serializer(doc)\n\n  return markdown\n}\n\nconst addPlaceholder = (ctx: Ctx, markdown: string) => {\n  const config = ctx.get(inlineSyncConfig.key)\n  const holePlaceholder = config.placeholderConfig.hole\n\n  const [firstLine = '', ...rest] = markdown.split('\\n\\n')\n\n  const movePlaceholder = (text: string) => config.movePlaceholder(holePlaceholder, text)\n\n  const handleText = pipe(replacePunctuation(holePlaceholder), movePlaceholder, keepLink)\n\n  let text = handleText(firstLine)\n  const placeholder = calculatePlaceholder(config.placeholderConfig)(text)\n\n  text = text.replace(holePlaceholder, placeholder)\n\n  text = [text, ...rest].join('\\n\\n')\n\n  return [text, placeholder] as [markdown: string, placeholder: string]\n}\n\nconst getNewNode = (ctx: Ctx, text: string) => {\n  const parser = ctx.get(parserCtx)\n  const parsed = parser(text)\n\n  if (!parsed)\n    return null\n\n  return parsed.firstChild\n}\n\nconst collectGlobalNodes = (ctx: Ctx, state: EditorState) => {\n  const { globalNodes } = ctx.get(inlineSyncConfig.key)\n  const nodes: Node[] = []\n\n  state.doc.descendants((node) => {\n    if (globalNodes.includes(node.type.name) || globalNodes.includes(node.type)) {\n      nodes.push(node)\n      return false\n    }\n\n    return undefined\n  })\n\n  return nodes\n}\n\nconst removeGlobalFromText = (text: string) => text.split('\\n\\n')[0] || ''\n\nconst onlyHTML = (node: Node) => {\n  return node.childCount === 1 && node.child(0).type.name === 'html'\n}\n\nexport const getContextByState = (ctx: Ctx, state: EditorState): InlineSyncContext | null => {\n  try {\n    const globalNode = collectGlobalNodes(ctx, state)\n    const node = getNodeFromSelection(state)\n\n    const markdown = getMarkdown(ctx, state, node, globalNode)\n    const [text, placeholder] = addPlaceholder(ctx, markdown)\n\n    const newNode = getNewNode(ctx, text)\n\n    if (!newNode || node.type !== newNode.type || onlyHTML(newNode))\n      return null\n\n    // @ts-expect-error hijack the node attribute\n    newNode.attrs = { ...node.attrs }\n\n    newNode.descendants((node) => {\n      const marks = node.marks\n      const link = marks.find(mark => mark.type.name === 'link')\n      if (link && node.text?.includes(placeholder) && link.attrs.href.includes(placeholder)) {\n        // @ts-expect-error hijack the mark attribute\n        link.attrs.href = link.attrs.href.replace(placeholder, '')\n      }\n    })\n\n    return {\n      text: removeGlobalFromText(text),\n      prevNode: node,\n      nextNode: newNode,\n      placeholder,\n    }\n  }\n  catch {\n    return null\n  }\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport type { Attrs } from '@milkdown/prose/model'\nimport type { EditorState, PluginKey, Transaction } from '@milkdown/prose/state'\nimport { TextSelection } from '@milkdown/prose/state'\n\nimport { inlineSyncConfig } from './config'\nimport { getContextByState } from './context'\nimport { calcOffset } from './utils'\nimport { linkRegexp } from './regexp'\n\nexport const runReplacer = (\n  ctx: Ctx,\n  key: PluginKey,\n  state: EditorState,\n  dispatch: (tr: Transaction) => void,\n  attrs: Attrs,\n) => {\n  const { placeholderConfig } = ctx.get(inlineSyncConfig.key)\n  const holePlaceholder = placeholderConfig.hole\n  // insert a placeholder to restore the selection\n  let tr = state.tr.setMeta(key, true).insertText(holePlaceholder, state.selection.from)\n\n  const nextState = state.apply(tr)\n  const context = getContextByState(ctx, nextState)\n\n  if (!context)\n    return\n\n  const lastUserInput = context.text.slice(0, context.text.indexOf(context.placeholder))\n\n  const { $from } = nextState.selection\n  const from = $from.before()\n  const to = $from.after()\n\n  const offset = calcOffset(context.nextNode, from, context.placeholder)\n\n  tr = tr\n    .replaceWith(from, to, context.nextNode)\n    .setNodeMarkup(from, undefined, attrs)\n    // delete the placeholder\n    .delete(offset + 1, offset + 2)\n\n  // restore the selection\n  tr = tr.setSelection(TextSelection.near(tr.doc.resolve(offset + 1)))\n\n  const needsRestoreMark = linkRegexp.test(lastUserInput) || ['*', '_', '~'].includes(lastUserInput.at(-1) || '')\n  if (needsRestoreMark && tr.selection instanceof TextSelection) {\n    const marks = tr.selection.$cursor?.marks() ?? []\n    marks.forEach((mark) => {\n      tr = tr.removeStoredMark(mark.type)\n    })\n  }\n\n  dispatch(tr)\n}\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/ctx'\nimport { editorViewCtx } from '@milkdown/core'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\nimport { withMeta } from '../../__internal__'\nimport { inlineSyncConfig } from './config'\nimport { getContextByState } from './context'\nimport { runReplacer } from './replacer'\n\n/// This plugin is used to sync the inline mark.\n/// It will create and remove marks automatically according to the user input.\n///\n/// When users type something, the plugin will transform the line (for better performance) to real markdown AST by serializer\n/// and render the AST to dom by parser, thus the input texts can be displayed correctly.\nexport const inlineSyncPlugin = $prose((ctx: Ctx) => {\n  let requestId: number | null = null\n  const inlineSyncPluginKey = new PluginKey('MILKDOWN_INLINE_SYNC')\n\n  return new Plugin<null>({\n    key: inlineSyncPluginKey,\n    state: {\n      init: () => {\n        return null\n      },\n      apply: (tr, _value, _oldState, newState) => {\n        const view = ctx.get(editorViewCtx)\n        if (!view.hasFocus?.() || !view.editable)\n          return null\n\n        if (!tr.docChanged)\n          return null\n\n        const meta = tr.getMeta(inlineSyncPluginKey)\n        if (meta)\n          return null\n\n        const context = getContextByState(ctx, newState)\n        if (!context)\n          return null\n\n        if (requestId) {\n          cancelAnimationFrame(requestId)\n          requestId = null\n        }\n\n        const { prevNode, nextNode, text } = context\n\n        const { shouldSyncNode } = ctx.get(inlineSyncConfig.key)\n\n        if (!shouldSyncNode({ prevNode, nextNode, ctx, tr, text }))\n          return null\n\n        requestId = requestAnimationFrame(() => {\n          requestId = null\n\n          const { dispatch, state } = ctx.get(editorViewCtx)\n\n          runReplacer(ctx, inlineSyncPluginKey, state, dispatch, prevNode.attrs)\n        })\n\n        return null\n      },\n    },\n  })\n})\n\nwithMeta(inlineSyncPlugin, {\n  displayName: 'Prose<inlineSyncPlugin>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Node, Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to add order in list for remark AST.\nexport const remarkAddOrderInListPlugin = $remark(() => () => (tree: Node) => {\n  visit(tree, 'list', (node: Parent & { ordered?: boolean; start?: number }) => {\n    if (node.ordered) {\n      const start = node.start ?? 1\n      node.children.forEach((child, index) => {\n        (child as Node & { label: number }).label = index + start\n      })\n    }\n  })\n})\n\nwithMeta(remarkAddOrderInListPlugin, {\n  displayName: 'Remark<remarkAddOrderInListPlugin>',\n  group: 'Remark',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Literal, Node, Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to add inline line break for remark AST.\n/// The inline line break should be treated as a `space`.\n/// And the normal line break should be treated as a `LF`.\nexport const remarkLineBreak = $remark(() => () => (tree: Node) => {\n  const find = /[\\t ]*(?:\\r?\\n|\\r)/g\n  visit(tree, 'text', (node: Literal, index: number, parent: Parent) => {\n    if (!node.value || typeof node.value !== 'string')\n      return\n\n    const result = []\n    let start = 0\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n\n      if (start !== position)\n        result.push({ type: 'text', value: node.value.slice(start, position) })\n\n      result.push({ type: 'break', data: { isInline: true } })\n      start = position + match[0].length\n      match = find.exec(node.value)\n    }\n\n    const hasResultAndIndex = result.length > 0 && parent && typeof index === 'number'\n\n    if (!hasResultAndIndex)\n      return\n\n    if (start < node.value.length)\n      result.push({ type: 'text', value: node.value.slice(start) })\n\n    parent.children.splice(index, 1, ...result)\n    return index + result.length\n  })\n})\n\nwithMeta(remarkLineBreak, {\n  displayName: 'Remark<remarkLineBreak>',\n  group: 'Remark',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport remarkInlineLinks from 'remark-inline-links'\nimport { withMeta } from '../__internal__'\n\n/// This plugin wraps [remark-inline-links](https://github.com/remarkjs/remark-inline-links).\nexport const remarkInlineLinkPlugin = $remark(() => remarkInlineLinks)\n\nwithMeta(remarkInlineLinkPlugin, {\n  displayName: 'Remark<remarkInlineLinkPlugin>',\n  group: 'Remark',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Literal, Node, Parent } from 'unist'\nimport { withMeta } from '../__internal__'\n\nconst isParent = (node: Node): node is Parent => !!(node as Parent).children\nconst isHTML = (node: Node): node is Literal<string> => node.type === 'html'\n\nfunction flatMapWithDepth(ast: Node, fn: (node: Node, index: number, parent: Node | null) => Node[]) {\n  return transform(ast, 0, null)[0]\n\n  function transform(node: Node, index: number, parent: Node | null) {\n    if (isParent(node)) {\n      const out = []\n      for (let i = 0, n = node.children.length; i < n; i++) {\n        const nthChild = node.children[i]\n        if (nthChild) {\n          const xs = transform(nthChild, i, node)\n          if (xs) {\n            for (let j = 0, m = xs.length; j < m; j++) {\n              const item = xs[j]\n              if (item)\n                out.push(item)\n            }\n          }\n        }\n      }\n      node.children = out\n    }\n\n    return fn(node, index, parent)\n  }\n}\n\n/// @internal\n/// This plugin should be deprecated after we support HTML.\nexport const remarkHtmlTransformer = $remark(() => () => (tree: Node) => {\n  flatMapWithDepth(tree, (node, _index, parent) => {\n    if (!isHTML(node))\n      return [node]\n\n    if (parent?.type === 'root') {\n      (node as Literal & { children: Literal[] }).children = [{ ...node }]\n      delete (node as Literal).value\n      node.type = 'paragraph'\n    }\n\n    return [node]\n  })\n})\n\nwithMeta(remarkHtmlTransformer, {\n  displayName: 'Remark<remarkHtmlTransformer>',\n  group: 'Remark',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { $remark } from '@milkdown/utils'\nimport type { Node } from 'unist'\nimport type { VFile } from 'vfile'\nimport { visit } from 'unist-util-visit'\nimport { withMeta } from '../__internal__'\n\nexport const remarkMarker = $remark(() => () => (tree: Node, file: VFile) => {\n  const getMarker = (node: Node) => {\n    return (file.value as string).charAt(node.position!.start.offset!)\n  }\n  visit(tree, node => ['strong', 'emphasis'].includes(node.type), (node: Node) => {\n    (node as Node & { marker: string }).marker = getMarker(node)\n  })\n})\n\nwithMeta(remarkMarker, {\n  displayName: 'Remark<remarkMarker>',\n  group: 'Remark',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { Decoration, DecorationSet } from '@milkdown/prose/view'\nimport { $prose } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is to solve the [chrome 98 bug](https://discuss.prosemirror.net/t/cursor-jumps-at-the-end-of-line-when-it-betweens-two-inline-nodes/4641).\nexport const inlineNodesCursorPlugin = $prose(() => {\n  let lock = false\n  const inlineNodesCursorPluginKey = new PluginKey('MILKDOWN_INLINE_NODES_CURSOR')\n  const inlineNodesCursorPlugin: Plugin = new Plugin({\n    key: inlineNodesCursorPluginKey,\n    state: {\n      init() {\n        return false\n      },\n      apply(tr) {\n        if (!tr.selection.empty)\n          return false\n\n        const pos = tr.selection.$from\n        const left = pos.nodeBefore\n        const right = pos.nodeAfter\n        if (left && right && left.isInline && !left.isText && right.isInline && !right.isText)\n          return true\n\n        return false\n      },\n    },\n    props: {\n      handleDOMEvents: {\n        compositionend: (view, e) => {\n          if (lock) {\n            lock = false\n            requestAnimationFrame(() => {\n              const active = inlineNodesCursorPlugin.getState(view.state)\n              if (active) {\n                const from = view.state.selection.from\n                e.preventDefault()\n                view.dispatch(view.state.tr.insertText(e.data || '', from))\n              }\n            })\n\n            return true\n          }\n          return false\n        },\n        compositionstart: (view) => {\n          const active = inlineNodesCursorPlugin.getState(view.state)\n          if (active)\n            lock = true\n\n          return false\n        },\n        beforeinput: (view, e) => {\n          const active = inlineNodesCursorPlugin.getState(view.state)\n          if (active && e instanceof InputEvent && e.data && !lock) {\n            const from = view.state.selection.from\n            e.preventDefault()\n            view.dispatch(view.state.tr.insertText(e.data || '', from))\n\n            return true\n          }\n\n          return false\n        },\n      },\n      decorations(state) {\n        const active = inlineNodesCursorPlugin.getState(state)\n        if (active) {\n          const pos = state.selection.$from\n          const position = pos.pos\n          const left = document.createElement('span')\n          const leftDec = Decoration.widget(position, left, {\n            side: -1,\n          })\n          const right = document.createElement('span')\n          const rightDec = Decoration.widget(position, right)\n          setTimeout(() => {\n            left.contentEditable = 'true'\n            right.contentEditable = 'true'\n          })\n          return DecorationSet.create(state.doc, [leftDec, rightDec])\n        }\n        return DecorationSet.empty\n      },\n    },\n  })\n\n  return inlineNodesCursorPlugin\n})\n\nwithMeta(inlineNodesCursorPlugin, {\n  displayName: 'Prose<inlineNodesCursorPlugin>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { AddMarkStep, ReplaceStep } from '@milkdown/prose/transform'\nimport { $prose } from '@milkdown/utils'\nimport { hardbreakSchema } from '../node'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to clear the marks around the hardbreak node.\nexport const hardbreakClearMarkPlugin = $prose(() => {\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_HARDBREAK_MARKS'),\n    appendTransaction: (trs, _oldState, newState) => {\n      if (!trs.length)\n        return\n\n      const [tr] = trs\n      if (!tr)\n        return\n\n      const [step] = tr.steps\n\n      const isInsertHr = tr.getMeta('hardbreak')\n      if (isInsertHr) {\n        if (!(step instanceof ReplaceStep))\n          return\n\n        const { from } = step as unknown as { from: number }\n        return newState.tr.setNodeMarkup(from, hardbreakSchema.type(), undefined, [])\n      }\n\n      const isAddMarkStep = step instanceof AddMarkStep\n      if (isAddMarkStep) {\n        let _tr = newState.tr\n        const { from, to } = step as unknown as { from: number; to: number }\n        newState.doc.nodesBetween(from, to, (node, pos) => {\n          if (node.type === hardbreakSchema.type())\n            _tr = _tr.setNodeMarkup(pos, hardbreakSchema.type(), undefined, [])\n        })\n\n        return _tr\n      }\n\n      return undefined\n    },\n  })\n})\n\nwithMeta(hardbreakClearMarkPlugin, {\n  displayName: 'Prose<hardbreakClearMarkPlugin>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\nimport { withMeta } from '../__internal__'\n\n/// This slice contains the nodes that within which the hardbreak will be ignored.\nexport const hardbreakFilterNodes = $ctx(['table', 'code_block'], 'hardbreakFilterNodes')\n\nwithMeta(hardbreakFilterNodes, {\n  displayName: 'Ctx<hardbreakFilterNodes>',\n  group: 'Prose',\n})\n\n/// This plugin is used to filter the hardbreak node.\n/// If the hardbreak is going to be inserted within a node that is in the `hardbreakFilterNodes`, ignore it.\nexport const hardbreakFilterPlugin = $prose((ctx) => {\n  const notIn = ctx.get(hardbreakFilterNodes.key)\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_HARDBREAK_FILTER'),\n    filterTransaction: (tr, state) => {\n      const isInsertHr = tr.getMeta('hardbreak')\n      const [step] = tr.steps\n      if (isInsertHr && step) {\n        const { from } = step as unknown as { from: number }\n        const $from = state.doc.resolve(from)\n        let curDepth = $from.depth\n        let canApply = true\n        while (curDepth > 0) {\n          if (notIn.includes($from.node(curDepth).type.name))\n            canApply = false\n\n          curDepth--\n        }\n        return canApply\n      }\n      return true\n    },\n  })\n})\n\nwithMeta(hardbreakFilterPlugin, {\n  displayName: 'Prose<hardbreakFilterPlugin>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { $prose } from '@milkdown/utils'\nimport { headingIdGenerator, headingSchema } from '../node/heading'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to sync the heading id when the heading content changes.\n/// It will use the `headingIdGenerator` to generate the id.\nexport const syncHeadingIdPlugin = $prose((ctx) => {\n  const headingIdPluginKey = new PluginKey('MILKDOWN_HEADING_ID')\n\n  const updateId = (view: EditorView) => {\n    if (view.composing || !view.editable)\n      return\n\n    const getId = ctx.get(headingIdGenerator.key)\n    const tr = view.state.tr.setMeta('addToHistory', false)\n\n    let found = false\n\n    view.state.doc.descendants((node, pos) => {\n      if (node.type === headingSchema.type()) {\n        if (node.textContent.trim().length === 0)\n          return\n\n        const attrs = node.attrs\n        const id = getId(node)\n\n        if (attrs.id !== id) {\n          found = true\n          tr.setMeta(headingIdPluginKey, true).setNodeMarkup(pos, undefined, {\n            ...attrs,\n            id,\n          })\n        }\n      }\n    })\n\n    if (found)\n      view.dispatch(tr)\n  }\n\n  return new Plugin({\n    key: headingIdPluginKey,\n    view: (view) => {\n      updateId(view)\n\n      return {\n        update: (view) => {\n          updateId(view)\n        },\n      }\n    },\n  })\n})\n\nwithMeta(syncHeadingIdPlugin, {\n  displayName: 'Prose<syncHeadingIdPlugin>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { listItemSchema } from '../node/list-item'\n\nimport { orderedListSchema } from '../node/ordered-list'\nimport { bulletListSchema } from '../node'\nimport { withMeta } from '../__internal__'\n\n/// This plugin is used to keep the label of list item up to date in ordered list.\nexport const syncListOrderPlugin = $prose(() => {\n  const syncOrderLabel = (view: EditorView) => {\n    if (view.composing || !view.editable)\n      return\n\n    const orderedListType = orderedListSchema.type()\n    const bulletListType = bulletListSchema.type()\n    const listItemType = listItemSchema.type()\n    const state = view.state\n    const handleNodeItem = (attrs: Record<string, any>, index: number): boolean => {\n      let changed = false\n      const expectedLabel = `${index + 1}.`\n      if (attrs.label !== expectedLabel) {\n        attrs.label = expectedLabel\n        changed = true\n      }\n\n      return changed\n    }\n\n    let tr = state.tr\n    let needDispatch = false\n    state.doc.descendants((node, pos, parent, index) => {\n      if (node.type === bulletListType) {\n        const base = node.maybeChild(0)\n        if (base?.type === listItemType && base.attrs.listType === 'ordered') {\n          needDispatch = true\n          tr.setNodeMarkup(pos, orderedListType, { spread: 'true' })\n\n          node.descendants((child, pos, _parent, index) => {\n            if (child.type === listItemType) {\n              const attrs = { ...child.attrs }\n              const changed = handleNodeItem(attrs, index)\n              if (changed)\n                tr = tr.setNodeMarkup(pos, undefined, attrs)\n            }\n            return false\n          })\n        }\n      }\n      else if (node.type === listItemType && parent?.type === orderedListType) {\n        const attrs = { ...node.attrs }\n        let changed = false\n        if (attrs.listType !== 'ordered') {\n          attrs.listType = 'ordered'\n          changed = true\n        }\n\n        const base = parent?.maybeChild(0)\n        if (base)\n          changed = handleNodeItem(attrs, index)\n\n        if (changed) {\n          tr = tr.setNodeMarkup(pos, undefined, attrs)\n          needDispatch = true\n        }\n      }\n    })\n\n    if (needDispatch)\n      view.dispatch(tr.setMeta('addToHistory', false))\n  }\n  return new Plugin({\n    key: new PluginKey('MILKDOWN_KEEP_LIST_ORDER'),\n    view: (view) => {\n      syncOrderLabel(view)\n      return {\n        update: (view) => {\n          syncOrderLabel(view)\n        },\n      }\n    },\n  })\n})\n\nwithMeta(syncListOrderPlugin, {\n  displayName: 'Prose<syncListOrderPlugin>',\n  group: 'Prose',\n})\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport type { MilkdownPlugin } from '@milkdown/ctx'\nimport {\n  hardbreakClearMarkPlugin,\n  hardbreakFilterNodes,\n  hardbreakFilterPlugin,\n  inlineNodesCursorPlugin,\n  inlineSyncConfig,\n  inlineSyncPlugin,\n  remarkAddOrderInListPlugin,\n  remarkHtmlTransformer,\n  remarkInlineLinkPlugin,\n  remarkLineBreak, remarkMarker,\n  syncHeadingIdPlugin,\n  syncListOrderPlugin,\n} from '../plugin'\n\n/// @internal\nexport const plugins: MilkdownPlugin[] = [\n  inlineSyncConfig,\n  inlineSyncPlugin,\n\n  hardbreakClearMarkPlugin,\n  hardbreakFilterNodes,\n  hardbreakFilterPlugin,\n\n  inlineNodesCursorPlugin,\n\n  remarkAddOrderInListPlugin,\n  remarkInlineLinkPlugin,\n  remarkLineBreak,\n  remarkHtmlTransformer,\n  remarkMarker,\n\n  syncHeadingIdPlugin,\n  syncListOrderPlugin,\n]\n", "/* Copyright 2021, Milkdown by Mirone. */\n\nimport { commands, inputrules, keymap, plugins, schema } from './composed'\n\nexport * from './node'\nexport * from './mark'\nexport * from './plugin'\nexport * from './composed'\n\n/// The commonmark preset, includes all the plugins.\nexport const commonmark = [schema, inputrules, commands, keymap, plugins].flat()\n"],
  "mappings": "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",
  "names": ["replacements", "tr", "node", "serializeText", "state", "node", "_a", "contentArr", "n", "_", "i", "Fragment", "withMeta", "plugin", "meta", "emphasisAttr", "$markAttr", "emphasisSchema", "$markSchema", "ctx", "remarkStringifyOptionsCtx", "value", "mark", "markType", "toggleEmphasisCommand", "$command", "toggleMarkdownMark", "emphasisKeymap", "$useKeymap", "commands", "commandsCtx", "strongAttr", "strongSchema", "toggleStrongCommand", "markSymbol", "strongKeymap", "inlineCodeAttr", "inlineCodeSchema", "toggleInlineCodeCommand", "dispatch", "selection", "tr", "from", "to", "x", "name", "t", "inlineCodeKeymap", "linkAttr", "linkSchema", "dom", "expectDomTypeError", "url", "title", "toggleLinkCommand", "payload", "toggleMark", "updateLinkCommand", "pos", "p", "type", "start", "end", "linkMark", "TextSelection", "docSchema", "$node", "paragraphAttr", "$nodeAttr", "paragraphSchema", "$nodeSchema", "turnIntoTextCommand", "setBlockType", "paragraphKeymap", "headingIndex", "defaultHeadingIdGenerator", "slugify", "headingIdGenerator", "$ctx", "headingAttr", "headingSchema", "getId", "depth", "wrapInHeadingInputRule", "$inputRule", "textblockTypeInputRule", "match", "_b", "view", "editorViewCtx", "$from", "level", "wrapInHeadingCommand", "downgradeHeadingCommand", "headingKeymap", "blockquoteAttr", "blockquoteSchema", "wrapInBlockquoteInputRule", "wrappingInputRule", "wrapInBlockquoteCommand", "wrapIn", "blockquoteKeymap", "codeBlockAttr", "codeBlockSchema", "attr", "language", "createCodeBlockInputRule", "createCodeBlockCommand", "updateCodeBlockLanguageCommand", "codeBlockKeymap", "imageAttr", "imageSchema", "alt", "insertImageCommand", "src", "updateImageCommand", "nodeWithPos", "findSelectedNodeOfType", "newAttrs", "insertImageInputRule", "InputRule", "matched", "hardbreakAttr", "hardbreakSchema", "insertHardbreakCommand", "Selection", "hardbreakKeymap", "hrAttr", "hrSchema", "insertHrInputRule", "insertHrCommand", "paragraph", "_tr", "sel", "bulletListAttr", "bulletListSchema", "ordered", "spread", "wrapInBulletListInputRule", "wrapInBulletListCommand", "bulletListKeymap", "orderedListAttr", "orderedListSchema", "wrapInOrderedListInputRule", "wrapInOrderedListCommand", "orderedListKeymap", "listItemAttr", "listItemSchema", "label", "listType", "sinkListItemCommand", "sinkListItem", "liftListItemCommand", "liftListItem", "splitListItemCommand", "splitListItem", "liftFirstListItem", "empty", "parentItem", "liftFirstListItemCommand", "listItemKeymap", "textSchema", "htmlAttr", "htmlSchema", "span", "schema", "inputrules", "keymap", "linkRegexp", "keepLinkRegexp", "punctuationRegexp", "holePlaceholder", "keepLink", "str", "text", "swap", "first", "last", "arr", "temp", "replacePunctuation", "calculatePlaceholder", "placeholder", "index", "left", "right", "notAWord", "calcOffset", "offset", "find", "defaultConfig", "prevNode", "nextNode", "placeholderToMove", "symbolsNeedToMove", "inlineSyncConfig", "getNodeFromSelection", "getMarkdown", "globalNode", "serializer", "serializerCtx", "doc", "addPlaceholder", "markdown", "config", "firstLine", "rest", "movePlaceholder", "pipe", "getNewNode", "parsed", "parserCtx", "collectGlobalNodes", "globalNodes", "nodes", "removeGlobalFromText", "onlyHTML", "getContextByState", "newNode", "link", "runReplacer", "key", "attrs", "placeholderConfig", "nextState", "context", "lastUserInput", "inlineSyncPlugin", "$prose", "requestId", "inlineSyncPluginKey", "PluginKey", "Plugin", "_value", "_oldState", "newState", "shouldSyncNode", "remarkAddOrderInListPlugin", "$remark", "tree", "visit", "child", "remarkLineBreak", "parent", "result", "position", "remarkInlineLinkPlugin", "remarkInlineLinks", "isParent", "isHTML", "flatMapWithDepth", "ast", "fn", "transform", "out", "nthChild", "xs", "j", "m", "item", "remarkHtmlTransformer", "_index", "remarkMarker", "file", "getMarker", "inlineNodesCursorPlugin", "lock", "inlineNodesCursorPluginKey", "e", "leftDec", "Decoration", "rightDec", "DecorationSet", "hardbreakClearMarkPlugin", "trs", "step", "ReplaceStep", "AddMarkStep", "hardbreakFilterNodes", "hardbreakFilterPlugin", "notIn", "isInsertHr", "curDepth", "canApply", "syncHeadingIdPlugin", "headingIdPluginKey", "updateId", "found", "id", "syncListOrderPlugin", "syncOrderLabel", "orderedListType", "bulletListType", "listItemType", "handleNodeItem", "changed", "expectedLabel", "needDispatch", "base", "_parent", "plugins", "commonmark"]
}
